
udisk.exe:     file format elf32-tradlittlemips

Disassembly of section .text:

bfc16400 <sys_op_entry>:
bfc16400:	6b0f      	li	v1,15
bfc16402:	e805      	break	0

bfc16404 <libc_op_entry>:
bfc16404:	6b10      	li	v1,16
bfc16406:	e805      	break	0

bfc16408 <audio_device_op_entry>:
bfc16408:	6b0c      	li	v1,12
bfc1640a:	e805      	break	0

bfc1640c <key_op_entry>:
bfc1640c:	6b09      	li	v1,9
bfc1640e:	e805      	break	0

bfc16410 <lcd_op_entry>:
bfc16410:	6b07      	li	v1,7
bfc16412:	e805      	break	0

bfc16414 <ccd_op_entry>:
bfc16414:	6b0a      	li	v1,10
bfc16416:	e805      	break	0

bfc16418 <base_op_entry>:
bfc16418:	6b00      	li	v1,0
bfc1641a:	e805      	break	0

bfc1641c <stub_mod_cmd>:
bfc1641c:	6b40      	li	v1,64
bfc1641e:	e805      	break	0

bfc16420 <handle_timers>:
bfc16420:	64f5      	save	40,ra,s0-s1
 * \ingroup      app_timer
 * \note 
*******************************************************************************/
void handle_timers(void)
{
bfc16422:	b42a      	lw	a0,bfc164c8 <handle_timers+0xa8>
    app_timer_t *tm;
    uint32 cur_time_ms;
    int8 i;

    for(i = 0; i < g_app_timer_count; i++) 
bfc16424:	6b00      	li	v1,0
bfc16426:	a440      	lbu	v0,0(a0)
bfc16428:	d304      	sw	v1,16(sp)
bfc1642a:	224c      	beqz	v0,bfc164c4 <handle_timers+0xa4>
bfc1642c:	b028      	lw	s0,bfc164cc <handle_timers+0xac>
    {
        tm = &g_app_timer_vector[i];
bfc1642e:	9204      	lw	v0,16(sp)
bfc16430:	98e0      	lw	a3,0(s0)
bfc16432:	3650      	sll	a2,v0,4
bfc16434:	e7c1      	addu	s0,a3,a2
bfc16436:	a0a1      	lbu	a1,1(s0)
        if(((tm->attrb==APP_TIMER_ATTRB_CONTROL)||(g_app_info_state.backlight_state!=BACKLIGHT_STATE_OFF))//类型校验
bfc16438:	7501      	cmpi	a1,1
bfc1643a:	6004      	bteqz	bfc16444 <handle_timers+0x24>
bfc1643c:	b425      	lw	a0,bfc164d0 <handle_timers+0xb0>
bfc1643e:	a469      	lbu	v1,9(a0)
bfc16440:	7302      	cmpi	v1,2
bfc16442:	6037      	bteqz	bfc164b2 <handle_timers+0x92>
bfc16444:	b624      	lw	a2,bfc164d4 <handle_timers+0xb4>
bfc16446:	a065      	lbu	v1,5(s0)
bfc16448:	a6a0      	lbu	a1,0(a2)
bfc1644a:	ed6e      	xor	a1,v1
bfc1644c:	2502      	beqz	a1,bfc16452 <handle_timers+0x32>
bfc1644e:	73ff      	cmpi	v1,255
bfc16450:	6130      	btnez	bfc164b2 <handle_timers+0x92>
bfc16452:	6c00      	li	a0,0
        && ((tm->tag == g_this_app_timer_tag) || (tm->tag == APP_TIMER_TAG_SYS)))//场景校验
        {
            cur_time_ms = sys_get_ab_timer();
bfc16454:	b121      	lw	s1,bfc164d8 <handle_timers+0xb8>
bfc16456:	67a4      	move	a1,a0
bfc16458:	67c4      	move	a2,a0
bfc1645a:	e940      	jalr	s1
bfc1645c:	6f1c      	li	a3,28
bfc1645e:	9862      	lw	v1,8(s0)
            if((cur_time_ms >= tm->timeout_expires)//定时时间已到
bfc16460:	6722      	move	s1,v0
bfc16462:	ea63      	sltu	v0,v1
bfc16464:	6118      	btnez	bfc16496 <handle_timers+0x76>
bfc16466:	a0c0      	lbu	a2,0(s0)
bfc16468:	2e16      	bnez	a2,bfc16496 <handle_timers+0x76>
bfc1646a:	98e3      	lw	a3,12(s0)
bfc1646c:	2714      	beqz	a3,bfc16496 <handle_timers+0x76>
bfc1646e:	a881      	lhu	a0,2(s0)
            && (tm->state == TIMER_STATE_RUNNING)//定时器正在运行才需要执行handle
            && (tm->func_proc != NULL))//定时器handle有效
            {
                //重设软定时器超时时间
                if(tm->timeout > (cur_time_ms - tm->timeout_expires))
bfc16470:	e26b      	subu	v0,v1
bfc16472:	ea83      	sltu	v0,a0
bfc16474:	e389      	addu	v0,v1,a0
                {
                    tm->timeout_expires += tm->timeout;//直接在expires上加定时周期，以确保多次定时时间准确
bfc16476:	6107      	btnez	bfc16486 <handle_timers+0x66>
bfc16478:	b318      	lw	v1,bfc164d8 <handle_timers+0xb8>
                }
                else
                {
                    tm->timeout_expires = sys_get_ab_timer() + tm->timeout;
bfc1647a:	6786      	move	a0,a2
bfc1647c:	67a6      	move	a1,a2
bfc1647e:	eb40      	jalr	v1
bfc16480:	6f1c      	li	a3,28
bfc16482:	a861      	lhu	v1,2(s0)
bfc16484:	e269      	addu	v0,v1
bfc16486:	a0a4      	lbu	a1,4(s0)
                }
                
                //单发软定时器一次执行完后 kill 掉
                if(tm->type == TIMER_TYPE_SINGLE_SHOT)
bfc16488:	d842      	sw	v0,8(s0)
bfc1648a:	7501      	cmpi	a1,1
bfc1648c:	6102      	btnez	bfc16492 <handle_timers+0x72>
bfc1648e:	6e02      	li	a2,2
                {
                    tm->state = TIMER_STATE_NOUSED;
bfc16490:	c0c0      	sb	a2,0(s0)
bfc16492:	9843      	lw	v0,12(s0)
                }
                
                //调用软定时器服务例程
                tm->func_proc();
bfc16494:	eac0      	jalrc	v0
bfc16496:	a861      	lhu	v1,2(s0)
            }
    
            if( cur_time_ms <= (tm->timeout_expires - tm->timeout ))
bfc16498:	9882      	lw	a0,8(s0)
bfc1649a:	e47f      	subu	a3,a0,v1
bfc1649c:	ef23      	sltu	a3,s1
bfc1649e:	6109      	btnez	bfc164b2 <handle_timers+0x92>
bfc164a0:	6c00      	li	a0,0
            {
                //如果系统时间因某种原因落在超时时间点后面，那么必须修复该时间点
                tm->timeout_expires = sys_get_ab_timer() + tm->timeout;
bfc164a2:	b20e      	lw	v0,bfc164d8 <handle_timers+0xb8>
bfc164a4:	67a4      	move	a1,a0
bfc164a6:	67c4      	move	a2,a0
bfc164a8:	ea40      	jalr	v0
bfc164aa:	6f1c      	li	a3,28
bfc164ac:	a8c1      	lhu	a2,2(s0)
bfc164ae:	e2d5      	addu	a1,v0,a2
bfc164b0:	d8a2      	sw	a1,8(s0)
bfc164b2:	9604      	lw	a2,16(sp)
bfc164b4:	b305      	lw	v1,bfc164c8 <handle_timers+0xa8>
bfc164b6:	46a1      	addiu	a1,a2,1
bfc164b8:	ed91      	seb	a1
bfc164ba:	d504      	sw	a1,16(sp)
bfc164bc:	a3e0      	lbu	a3,0(v1)
bfc164be:	9404      	lw	a0,16(sp)
bfc164c0:	ece2      	slt	a0,a3
bfc164c2:	61b4      	btnez	bfc1642c <handle_timers+0xc>
bfc164c4:	6475      	restore	40,ra,s0-s1
bfc164c6:	e8a0      	jrc	ra
bfc164c8:	5400      	slti	a0,0
bfc164ca:	9fc1      	lw	a2,4(a3)
bfc164cc:	5410      	slti	a0,16
bfc164ce:	9fc1      	lw	a2,4(a3)
bfc164d0:	a1b8      	lbu	a1,24(s1)
bfc164d2:	9fc1      	lw	a2,4(a3)
bfc164d4:	5414      	slti	a0,20
bfc164d6:	9fc1      	lw	a2,4(a3)
bfc164d8:	6401      	restore	8
bfc164da:	bfc1      	lwu	a2,4(a3)

bfc164dc <get_gui_msg>:
bfc164dc:	64e4      	save	32,ra,s0
 * \endcode
 * \note
*******************************************************************************/
bool get_gui_msg(input_gui_msg_t *input_msg)
{
bfc164de:	b20c      	lw	v0,bfc1650c <get_gui_msg+0x30>
    uint32 key_data;

    if(sys_mq_receive(MQ_ID_GUI, (void *)&key_data) == 0)
bfc164e0:	6704      	move	s0,a0
bfc164e2:	0504      	addiu	a1,sp,16
bfc164e4:	6c06      	li	a0,6
bfc164e6:	6e00      	li	a2,0
bfc164e8:	ea40      	jalr	v0
bfc164ea:	6f19      	li	a3,25
bfc164ec:	2a0c      	bnez	v0,bfc16506 <get_gui_msg+0x2a>
bfc164ee:	9504      	lw	a1,16(sp)
    {
        //消息解压缩
        input_msg->type = (input_msg_type_e)(uint8)key_data;//byte 0
bfc164f0:	b208      	lw	v0,bfc16510 <get_gui_msg+0x34>
        //if(input_msg->type == INPUT_MSG_KEY)
        //{
        input_msg->data.kmsg.val = (uint8)(key_data >> 8);//byte 1
        input_msg->data.kmsg.type = (key_type_e)(key_data >> 16);//byte 2-3
        //}
        //else if(input_msg->type == INPUT_MSG_TOUCH)
        //{
        //    input_msg->data.tmsg.x = (uint16)(key_data >> 8);//bit[8-17]
        //    input_msg->data.tmsg.y = (uint16)(key_data >> 18);//bit[18-27]
        //    input_msg->data.tmsg.type = (tp_type_e)(key_data >> 28);//bit[28-31]
        //}
        //else//INPUT_MSG_GSENSOR
        //{
        //
        //}

        //收到gui消息，表示有用户操作，进行一些系统处理，比如：
        //0.长按按键后过滤掉后续按键
        //1.背光关闭计时，屏幕保护计时，省电关机计时，返回正在播放计时 清0
        //2.按键音处理
        //3.按键锁处理
        //com_gui_msg_hook(input_msg);
        if(TRUE == com_gui_msg_hook(input_msg)) //FALSE:按键事件过滤掉了； TRUE:按键有效
bfc164f2:	34a2      	srl	a0,a1,8
bfc164f4:	3382      	srl	v1,a0,8
bfc164f6:	c082      	sb	a0,2(s0)
bfc164f8:	c0a0      	sb	a1,0(s0)
bfc164fa:	c862      	sh	v1,4(s0)
bfc164fc:	ea40      	jalr	v0
bfc164fe:	6790      	move	a0,s0
bfc16500:	7201      	cmpi	v0,1
bfc16502:	6a01      	li	v0,1
        {
            return TRUE;
bfc16504:	6001      	bteqz	bfc16508 <get_gui_msg+0x2c>
bfc16506:	6a00      	li	v0,0
        }
    }

    return FALSE;
bfc16508:	6464      	restore	32,ra,s0
}
bfc1650a:	e8a0      	jrc	ra
bfc1650c:	6401      	restore	8
bfc1650e:	bfc1      	lwu	a2,4(a3)
bfc16510:	4601      	addiu	s0,a2,1
bfc16512:	4859      	addiu	s0,89

bfc16514 <get_sys_msg>:
bfc16514:	64e4      	save	32,ra,s0

/******************************************************************************/
/*!
 * \par  Description:
 *    接收系统消息，并广播给所有应用。
 * \param[in]    none
 * \param[out]   sys_msg：返回接收到的系统消息
 * \return       bool
 * \retval           TRUE 接收系统消息成功。
 * \retval           FALSE 接收系统消息失败。
 * \ingroup      applib_msg
 * \note
 * \li  获取系统消息后，会广播给所有应用。
 * \li  该接口只在前台AP的 get_app_msg 中调用，也就是说，系统消息从发出到被处理，
 *      可能会被 delay 一些时间，直到有前台AP进入消息循环。
*******************************************************************************/
bool get_sys_msg(sys_msg_t *sys_msg)
{
bfc16516:	6704      	move	s0,a0
bfc16518:	6b00      	li	v1,0
    msg_apps_t msg;

    //须把type清0，因为系统消息长度为2个字节，sys_mq_receive 并不会覆盖到type（4字节）高2字节，会导致type错误
    sys_msg->type = MSG_NULL;
bfc1651a:	b20a      	lw	v0,bfc16540 <get_sys_msg+0x2c>
    if(sys_mq_receive(MQ_ID_SYS, (void *)sys_msg) == 0)
bfc1651c:	cc60      	sh	v1,0(a0)
bfc1651e:	67b0      	move	a1,s0
bfc16520:	6c05      	li	a0,5
bfc16522:	6e00      	li	a2,0
bfc16524:	ea40      	jalr	v0
bfc16526:	6f19      	li	a3,25
bfc16528:	6b00      	li	v1,0
    {
        msg.type = sys_msg->type;
        return broadcast_msg_sys(&msg);
    }

    //消息队列已空，返回false
    return FALSE;
bfc1652a:	2a06      	bnez	v0,bfc16538 <get_sys_msg+0x24>
bfc1652c:	a880      	lhu	a0,0(s0)
bfc1652e:	b206      	lw	v0,bfc16544 <get_sys_msg+0x30>
bfc16530:	d404      	sw	a0,16(sp)
bfc16532:	ea40      	jalr	v0
bfc16534:	0404      	addiu	a0,sp,16
bfc16536:	6762      	move	v1,v0
bfc16538:	6743      	move	v0,v1
}
bfc1653a:	6464      	restore	32,ra,s0
bfc1653c:	e8a0      	jrc	ra
bfc1653e:	0000      	addiu	s0,sp,0
bfc16540:	6401      	restore	8
bfc16542:	bfc1      	lwu	a2,4(a3)
bfc16544:	47e9      	addiu	a3,a3,-7
bfc16546:	4849      	addiu	s0,73

bfc16548 <get_app_msg>:
bfc16548:	64f5      	save	40,ra,s0-s1

/******************************************************************************/
/*!
 * \par  Description:
 *    接收应用私有消息（有些来自于接收系统消息时转发的）。
 * \param[in]    none
 * \param[out]   private_msg：返回接收到的应用私有消息
 * \return       bool
 * \retval           TRUE 接收应用私有消息成功。
 * \retval           FALSE 接收应用私有消息失败。
 * \ingroup      applib_msg
 * \par          exmaple code
 * \code
    例子1：应用私有消息处理
    private_msg_t private_msg;
    app_result_e result;
    bool ret;

    ret = get_app_msg(&private_msg);
    if(ret == TRUE)
    {
        result = msg_callback(&private_msg);
        if(result == RESULT_REDRAW)
        {
            返回重绘
        }
        else
        {
            其他返回值处理
        }
    }
 * \endcode
 * \note
*******************************************************************************/
bool get_app_msg(private_msg_t *private_msg)
{
bfc1654a:	b00e      	lw	s0,bfc16580 <.LBE2+0x20>
    //软定时器扫描
    handle_timers();
bfc1654c:	e840      	jalr	s0
bfc1654e:	6724      	move	s1,a0
bfc16550:	b00d      	lw	s0,bfc16584 <.LBE2+0x24>

#ifdef PC
    UpdateMainWnd();
#endif

    if(g_this_app_info->app_type == APP_TYPE_GUI)
bfc16552:	9860      	lw	v1,0(s0)
bfc16554:	a342      	lbu	v0,2(v1)
bfc16556:	7201      	cmpi	v0,1
bfc16558:	6103      	btnez	bfc16560 <.LBE2>

bfc1655a <.LBB2>:
bfc1655a:	1a1f 5945 	jal	bfc16514 <get_sys_msg>
    {
        //前台应用
        sys_msg_t sys_msg;

        //获取系统消息并广播
        get_sys_msg(&sys_msg);
bfc1655e:	0404      	addiu	a0,sp,16

bfc16560 <.LBE2>:
bfc16560:	98a0      	lw	a1,0(s0)
    }
    //接收 应用私有消息
    if(sys_mq_receive((uint32)(g_this_app_info->mq_id), (void *)private_msg) == 0)
bfc16562:	b20a      	lw	v0,bfc16588 <.LBE2+0x28>
bfc16564:	a583      	lbu	a0,3(a1)
bfc16566:	6e00      	li	a2,0
bfc16568:	67b1      	move	a1,s1
bfc1656a:	ea40      	jalr	v0
bfc1656c:	6f19      	li	a3,25
bfc1656e:	6b00      	li	v1,0
    {
        com_app_msg_hook(private_msg);
        return TRUE;
    }

    //消息队列已空，返回false
    return FALSE;
bfc16570:	2a04      	bnez	v0,bfc1657a <.LBE2+0x1a>
bfc16572:	b307      	lw	v1,bfc1658c <.LBE2+0x2c>
bfc16574:	eb40      	jalr	v1
bfc16576:	6791      	move	a0,s1
bfc16578:	6b01      	li	v1,1
bfc1657a:	6743      	move	v0,v1
}
bfc1657c:	6475      	restore	40,ra,s0-s1
bfc1657e:	e8a0      	jrc	ra
bfc16580:	6421      	restore	8,s0
bfc16582:	bfc1      	lwu	a2,4(a3)
bfc16584:	5404      	slti	a0,4
bfc16586:	9fc1      	lw	a2,4(a3)
bfc16588:	6401      	restore	8
bfc1658a:	bfc1      	lwu	a2,4(a3)
bfc1658c:	4899      	addiu	s0,-103
bfc1658e:	4859      	addiu	s0,89

bfc16590 <read_battery_pic_to_ram>:
bfc16590:	64d5      	save	40,ra,s1
 * Notes       :
 *
 ********************************************************************************/
void read_battery_pic_to_ram(void)
{
bfc16592:	0104      	addiu	s1,sp,16
bfc16594:	6a00      	li	v0,0
    res_size_t tmp_size;
    uint8 i;
    for (i = 0; i < 5; i++)
bfc16596:	c148      	sb	v0,8(s1)
bfc16598:	a148      	lbu	v0,8(s1)
bfc1659a:	5a05      	sltiu	v0,5
bfc1659c:	6012      	bteqz	bfc165c2 <read_battery_pic_to_ram+0x32>
bfc1659e:	a148      	lbu	v0,8(s1)
    {
        ui_read_pic_to_buffer(P_UDISK_BATTERY_0 + i, (uint8 *) (BAT_PIC_BUFFER + i * BATTERY_PIC_LENGTH), &tmp_size);
bfc165a0:	4281      	addiu	a0,v0,1
bfc165a2:	a168      	lbu	v1,8(s1)
bfc165a4:	f660 6a08 	li	v0,1640
bfc165a8:	eb58      	mult	v1,v0
bfc165aa:	b208      	lw	v0,bfc165c8 <read_battery_pic_to_ram+0x38>
bfc165ac:	eb12      	mflo	v1
bfc165ae:	e349      	addu	v0,v1,v0
bfc165b0:	67a2      	move	a1,v0
bfc165b2:	67d1      	move	a2,s1
bfc165b4:	6f20      	li	a3,32
bfc165b6:	b206      	lw	v0,bfc165cc <read_battery_pic_to_ram+0x3c>
bfc165b8:	eac0      	jalrc	v0
bfc165ba:	a148      	lbu	v0,8(s1)
bfc165bc:	4241      	addiu	v0,v0,1
bfc165be:	c148      	sb	v0,8(s1)
bfc165c0:	17eb      	b	bfc16598 <read_battery_pic_to_ram+0x8>
bfc165c2:	65b9      	move	sp,s1
    }
}
bfc165c4:	6453      	restore	24,ra,s1
bfc165c6:	e8a0      	jrc	ra
bfc165c8:	9400      	lw	a0,0(sp)
bfc165ca:	0003      	addiu	s0,sp,12
bfc165cc:	6bdd      	li	v1,221
bfc165ce:	bfc1      	lwu	a2,4(a3)

bfc165d0 <read_connect_pic_to_ram>:
bfc165d0:	64d5      	save	40,ra,s1

/********************************************************************************
 * Description : 读数据传输更新图片到缓存中
 *
 * Arguments  :     ramaddr
 *
 *
 * Returns     :
 *            无
 * Notes       :
 *
 ********************************************************************************/
void read_connect_pic_to_ram(void)
{
bfc165d2:	0104      	addiu	s1,sp,16
bfc165d4:	6a00      	li	v0,0
    res_size_t tmp_size;
    uint8 i;
    for (i = 0; i < 10; i++)
bfc165d6:	c148      	sb	v0,8(s1)
bfc165d8:	a148      	lbu	v0,8(s1)
bfc165da:	5a0a      	sltiu	v0,10
bfc165dc:	6011      	bteqz	bfc16600 <read_connect_pic_to_ram+0x30>
bfc165de:	a148      	lbu	v0,8(s1)
    {
        ui_read_pic_to_buffer(P_UDISK_POINT_1A + i, (uint8 *) (CONNECT_PIC_BUFFER + i * CONNECT_PIC_LENGTH), &tmp_size);
bfc165e0:	6782      	move	a0,v0
bfc165e2:	4c09      	addiu	a0,9
bfc165e4:	a148      	lbu	v0,8(s1)
bfc165e6:	3340      	sll	v1,v0,8
bfc165e8:	3364      	sll	v1,1
bfc165ea:	b208      	lw	v0,bfc16608 <read_connect_pic_to_ram+0x38>
bfc165ec:	e349      	addu	v0,v1,v0
bfc165ee:	67a2      	move	a1,v0
bfc165f0:	67d1      	move	a2,s1
bfc165f2:	6f20      	li	a3,32
bfc165f4:	b206      	lw	v0,bfc1660c <read_connect_pic_to_ram+0x3c>
bfc165f6:	eac0      	jalrc	v0
bfc165f8:	a148      	lbu	v0,8(s1)
bfc165fa:	4241      	addiu	v0,v0,1
bfc165fc:	c148      	sb	v0,8(s1)
bfc165fe:	17ec      	b	bfc165d8 <read_connect_pic_to_ram+0x8>
bfc16600:	65b9      	move	sp,s1
    }
}
bfc16602:	6453      	restore	24,ra,s1
bfc16604:	e8a0      	jrc	ra
bfc16606:	0000      	addiu	s0,sp,0
bfc16608:	8000      	lb	s0,0(s0)
bfc1660a:	0003      	addiu	s0,sp,12
bfc1660c:	6bdd      	li	v1,221
bfc1660e:	bfc1      	lwu	a2,4(a3)

bfc16610 <ui_show_battery>:
bfc16610:	64d6      	save	48,ra,s1

/********************************************************************************
 * Description : 根据获取到的电压值显示相应的电池图标
 *
 * Arguments  :
 *            value：当前获取到的电压值
 *
 * Returns     :
 *            无
 * Notes       :
 *
 ********************************************************************************/
void ui_show_battery(void)
{
bfc16612:	0104      	addiu	s1,sp,16
bfc16614:	6a00      	li	v0,0
    //   uint8 value;
    uint8 frame = 0;
bfc16616:	c140      	sb	v0,0(s1)
bfc16618:	b213      	lw	v0,bfc16664 <ui_show_battery+0x54>
    style_infor_t style_infor_battery;
    picbox_private_t picbox_param;
    /*    value = act_readb(BATADC_DATA);
     if (charge_state == BAT_NO_EXIST)
     {
     frame = 0;
     }
     else
     {*/
    //分5档显示电池图标，对应关系如下：
    /*
     电池电压范围
     1.       空格电：<=3.5V  0.05V误差

     2.       一格电：3.5-3.6V  0.05V误差

     3.       两格电：3.6-3.65V   0.05V误差

     4.       三格电：3.65-3.8V    0.05V误差

     5         满格：  3 .8V以上    0.05V 误差

     */

    /*        for (frame = 0; frame < 5; frame++)
     {
     if (value <= batvalue[frame])
     {
     break;
     }
     }
     if (frame >= 4)
     {
     frame = 4;
     }
     }*/
    if (charge_value == 0)
bfc1661a:	a240      	lbu	v0,0(v0)
bfc1661c:	2a03      	bnez	v0,bfc16624 <ui_show_battery+0x14>
bfc1661e:	6a00      	li	v0,0
    {
        frame = 0;
bfc16620:	c140      	sb	v0,0(s1)
bfc16622:	1004      	b	bfc1662c <ui_show_battery+0x1c>
bfc16624:	b210      	lw	v0,bfc16664 <ui_show_battery+0x54>
    }
    else
    {
        frame = charge_value - 1;
bfc16626:	a240      	lbu	v0,0(v0)
bfc16628:	424f      	addiu	v0,v0,-1
bfc1662a:	c140      	sb	v0,0(s1)
bfc1662c:	a140      	lbu	v0,0(s1)
    }

    if (frame >= 4)
bfc1662e:	5a04      	sltiu	v0,4
bfc16630:	6102      	btnez	bfc16636 <ui_show_battery+0x26>
bfc16632:	6a04      	li	v0,4
    {
        frame = 4;
bfc16634:	c140      	sb	v0,0(s1)
bfc16636:	6a00      	li	v0,0
    }

    style_infor_battery.type = UI_AP;
bfc16638:	c14a      	sb	v0,10(s1)
bfc1663a:	f002 6a07 	li	v0,4103
    style_infor_battery.style_id = UDISK_BATTERY;
bfc1663e:	c944      	sh	v0,8(s1)
bfc16640:	6a01      	li	v0,1
    picbox_param.pic_id = -1;
bfc16642:	ea4b      	neg	v0
bfc16644:	c948      	sh	v0,16(s1)
bfc16646:	a140      	lbu	v0,0(s1)
    picbox_param.frame_id = frame;
bfc16648:	c152      	sb	v0,18(s1)
bfc1664a:	4147      	addiu	v0,s1,7
    //显示界面
    ui_show_picbox(&style_infor_battery, &picbox_param);
bfc1664c:	4241      	addiu	v0,v0,1
bfc1664e:	4167      	addiu	v1,s1,7
bfc16650:	4b09      	addiu	v1,9
bfc16652:	6782      	move	a0,v0
bfc16654:	67a3      	move	a1,v1
bfc16656:	6e00      	li	a2,0
bfc16658:	6f02      	li	a3,2
bfc1665a:	b204      	lw	v0,bfc16668 <ui_show_battery+0x58>
bfc1665c:	eac0      	jalrc	v0
bfc1665e:	65b9      	move	sp,s1
}
bfc16660:	6454      	restore	32,ra,s1
bfc16662:	e8a0      	jrc	ra
bfc16664:	55c3      	slti	a1,195
bfc16666:	9fc1      	lw	a2,4(a3)
bfc16668:	6bdd      	li	v1,221
bfc1666a:	bfc1      	lwu	a2,4(a3)

bfc1666c <timer_usb_display_battery>:
bfc1666c:	64d5      	save	40,ra,s1

void timer_usb_display_battery(void)
{
bfc1666e:	0104      	addiu	s1,sp,16
bfc16670:	b322      	lw	v1,bfc166f8 <timer_usb_display_battery+0x8c>
    uint16 pix_cnt;
    region_t res_region;
    time_count++;
bfc16672:	b222      	lw	v0,bfc166f8 <timer_usb_display_battery+0x8c>
bfc16674:	a240      	lbu	v0,0(v0)
bfc16676:	4241      	addiu	v0,v0,1
bfc16678:	c340      	sb	v0,0(v1)
bfc1667a:	b220      	lw	v0,bfc166f8 <timer_usb_display_battery+0x8c>
    if (time_count == 5)
bfc1667c:	a240      	lbu	v0,0(v0)
bfc1667e:	7205      	cmpi	v0,5
bfc16680:	6758      	move	v0,t8
bfc16682:	5a01      	sltiu	v0,1
bfc16684:	6003      	bteqz	bfc1668c <timer_usb_display_battery+0x20>
bfc16686:	b31d      	lw	v1,bfc166f8 <timer_usb_display_battery+0x8c>
    {
        time_count = 0;
bfc16688:	6a00      	li	v0,0
bfc1668a:	c340      	sb	v0,0(v1)
bfc1668c:	f100 6a0e 	li	v0,270
    }
    /*将connect picture buffer中的图片刷到屏上*/
    res_region.x = POS_BATTERY_X_BASE;
bfc16690:	c944      	sh	v0,8(s1)
bfc16692:	6a04      	li	v0,4
    res_region.y = POS_BATTERY_Y_BASE;
bfc16694:	c945      	sh	v0,10(s1)
bfc16696:	6a29      	li	v0,41
    res_region.width = WIDTH_BATTERY;
bfc16698:	c946      	sh	v0,12(s1)
bfc1669a:	6a14      	li	v0,20
    res_region.height = HEIGHT_BATTERY;
bfc1669c:	c947      	sh	v0,14(s1)
bfc1669e:	4147      	addiu	v0,s1,7

    lcd_set_window(&res_region); //设窗参数设置
bfc166a0:	4241      	addiu	v0,v0,1
bfc166a2:	6782      	move	a0,v0
bfc166a4:	6d00      	li	a1,0
bfc166a6:	6e00      	li	a2,0
bfc166a8:	6f00      	li	a3,0
bfc166aa:	b215      	lw	v0,bfc166fc <timer_usb_display_battery+0x90>
bfc166ac:	eac0      	jalrc	v0
bfc166ae:	a966      	lhu	v1,12(s1)

    pix_cnt = res_region.width * res_region.height;
bfc166b0:	a947      	lhu	v0,14(s1)
bfc166b2:	eb58      	mult	v1,v0
bfc166b4:	ea12      	mflo	v0
bfc166b6:	c940      	sh	v0,0(s1)
bfc166b8:	b412      	lw	a0,bfc16700 <timer_usb_display_battery+0x94>

    libc_memcpy(LCD_BUF1_ADDR, BAT_PIC_BUFFER + time_count * BATTERY_PIC_LENGTH, pix_cnt * 2);
bfc166ba:	b210      	lw	v0,bfc166f8 <timer_usb_display_battery+0x8c>
bfc166bc:	a260      	lbu	v1,0(v0)
bfc166be:	f660 6a08 	li	v0,1640
bfc166c2:	eb58      	mult	v1,v0
bfc166c4:	b210      	lw	v0,bfc16704 <timer_usb_display_battery+0x98>
bfc166c6:	ed12      	mflo	a1
bfc166c8:	e54d      	addu	v1,a1,v0
bfc166ca:	a940      	lhu	v0,0(s1)
bfc166cc:	3244      	sll	v0,1
bfc166ce:	67a3      	move	a1,v1
bfc166d0:	67c2      	move	a2,v0
bfc166d2:	6f00      	li	a3,0
bfc166d4:	b20d      	lw	v0,bfc16708 <timer_usb_display_battery+0x9c>
bfc166d6:	eac0      	jalrc	v0
bfc166d8:	a940      	lhu	v0,0(s1)
    //DMA到GRAM中
    lcd_dma_set_counter(pix_cnt, 0);
bfc166da:	6782      	move	a0,v0
bfc166dc:	6d00      	li	a1,0
bfc166de:	6e00      	li	a2,0
bfc166e0:	6f0a      	li	a3,10
bfc166e2:	b207      	lw	v0,bfc166fc <timer_usb_display_battery+0x90>
bfc166e4:	eac0      	jalrc	v0
bfc166e6:	6c01      	li	a0,1
    //开始DMA传输
    lcd_dma_start_trans(LCD_RAM1_INDEX);
bfc166e8:	6d00      	li	a1,0
bfc166ea:	6e00      	li	a2,0
bfc166ec:	6f0b      	li	a3,11
bfc166ee:	b204      	lw	v0,bfc166fc <timer_usb_display_battery+0x90>
bfc166f0:	eac0      	jalrc	v0
bfc166f2:	65b9      	move	sp,s1


}
bfc166f4:	6453      	restore	24,ra,s1
bfc166f6:	e8a0      	jrc	ra
bfc166f8:	55c6      	slti	a1,198
bfc166fa:	9fc1      	lw	a2,4(a3)
bfc166fc:	6411      	restore	8,s1
bfc166fe:	bfc1      	lwu	a2,4(a3)
bfc16700:	0400      	addiu	a0,sp,0
bfc16702:	0002      	addiu	s0,sp,8
bfc16704:	9400      	lw	a0,0(sp)
bfc16706:	0003      	addiu	s0,sp,12
bfc16708:	6405      	restore	40
bfc1670a:	bfc1      	lwu	a2,4(a3)

bfc1670c <timer_usb_display_connect>:
bfc1670c:	64d5      	save	40,ra,s1

void timer_usb_display_connect(void)
{
bfc1670e:	0104      	addiu	s1,sp,16
bfc16710:	b331      	lw	v1,bfc167d4 <timer_usb_display_connect+0xc8>
    uint8 i;
    uint8 frame;
    uint16 pix_cnt;
    region_t res_region;
    time_count++;
bfc16712:	b231      	lw	v0,bfc167d4 <timer_usb_display_connect+0xc8>
bfc16714:	a240      	lbu	v0,0(v0)
bfc16716:	4241      	addiu	v0,v0,1
bfc16718:	c340      	sb	v0,0(v1)
bfc1671a:	b22f      	lw	v0,bfc167d4 <timer_usb_display_connect+0xc8>
    if (time_count == 5)
bfc1671c:	a240      	lbu	v0,0(v0)
bfc1671e:	7205      	cmpi	v0,5
bfc16720:	6758      	move	v0,t8
bfc16722:	5a01      	sltiu	v0,1
bfc16724:	6003      	bteqz	bfc1672c <timer_usb_display_connect+0x20>
bfc16726:	b32c      	lw	v1,bfc167d4 <timer_usb_display_connect+0xc8>
    {
        time_count = 0;
bfc16728:	6a00      	li	v0,0
bfc1672a:	c340      	sb	v0,0(v1)
bfc1672c:	6a00      	li	v0,0
    }

    for (i = 0; i < 5; i++)
bfc1672e:	c140      	sb	v0,0(s1)
bfc16730:	a140      	lbu	v0,0(s1)
bfc16732:	5a05      	sltiu	v0,5
bfc16734:	604c      	bteqz	bfc167ce <timer_usb_display_connect+0xc2>
bfc16736:	b228      	lw	v0,bfc167d4 <timer_usb_display_connect+0xc8>
    {
        if (i == time_count)
bfc16738:	a160      	lbu	v1,0(s1)
bfc1673a:	a240      	lbu	v0,0(v0)
bfc1673c:	ea6e      	xor	v0,v1
bfc1673e:	5a01      	sltiu	v0,1
bfc16740:	6006      	bteqz	bfc1674e <timer_usb_display_connect+0x42>
bfc16742:	a160      	lbu	v1,0(s1)
        {
            frame = 2 * (4 - i);
bfc16744:	6a04      	li	v0,4
bfc16746:	e26b      	subu	v0,v1
bfc16748:	3244      	sll	v0,1
bfc1674a:	c141      	sb	v0,1(s1)
bfc1674c:	1006      	b	bfc1675a <timer_usb_display_connect+0x4e>
bfc1674e:	a160      	lbu	v1,0(s1)
        }
        else
        {
            frame = 2 * (4 - i) + 1;
bfc16750:	6a04      	li	v0,4
bfc16752:	e26b      	subu	v0,v1
bfc16754:	3244      	sll	v0,1
bfc16756:	4241      	addiu	v0,v0,1
bfc16758:	c141      	sb	v0,1(s1)
bfc1675a:	a160      	lbu	v1,0(s1)
        }
        /*将connect picture buffer中的图片刷到屏上*/

        res_region.x = POS_CONNECT_X_BASE + (4 - i) * POS_CONNECT_INC_X;
bfc1675c:	6a04      	li	v0,4
bfc1675e:	e26f      	subu	v1,v0,v1
bfc16760:	6743      	move	v0,v1
bfc16762:	3250      	sll	v0,4
bfc16764:	e26b      	subu	v0,v1
bfc16766:	3244      	sll	v0,1
bfc16768:	4a73      	addiu	v0,115
bfc1676a:	c944      	sh	v0,8(s1)
bfc1676c:	6ab1      	li	v0,177
        res_region.y = POS_CONNECT_Y_BASE;
bfc1676e:	c945      	sh	v0,10(s1)
bfc16770:	6a10      	li	v0,16
        res_region.width = WIDTH_CONNECT;
bfc16772:	c946      	sh	v0,12(s1)
bfc16774:	6a10      	li	v0,16
        res_region.height = HEIGHT_CONNECT;
bfc16776:	c947      	sh	v0,14(s1)
bfc16778:	4147      	addiu	v0,s1,7

        lcd_set_window(&res_region); //设窗参数设置
bfc1677a:	4241      	addiu	v0,v0,1
bfc1677c:	6782      	move	a0,v0
bfc1677e:	6d00      	li	a1,0
bfc16780:	6e00      	li	a2,0
bfc16782:	6f00      	li	a3,0
bfc16784:	b215      	lw	v0,bfc167d8 <timer_usb_display_connect+0xcc>
bfc16786:	eac0      	jalrc	v0
bfc16788:	a966      	lhu	v1,12(s1)
        pix_cnt = res_region.width * res_region.height;
bfc1678a:	a947      	lhu	v0,14(s1)
bfc1678c:	eb58      	mult	v1,v0
bfc1678e:	ea12      	mflo	v0
bfc16790:	c941      	sh	v0,2(s1)
bfc16792:	b413      	lw	a0,bfc167dc <timer_usb_display_connect+0xd0>

        libc_memcpy(LCD_BUF1_ADDR, CONNECT_PIC_BUFFER + frame * CONNECT_PIC_LENGTH, pix_cnt * 2);
bfc16794:	a141      	lbu	v0,1(s1)
bfc16796:	3340      	sll	v1,v0,8
bfc16798:	3364      	sll	v1,1
bfc1679a:	b212      	lw	v0,bfc167e0 <timer_usb_display_connect+0xd4>
bfc1679c:	e34d      	addu	v1,v0
bfc1679e:	a941      	lhu	v0,2(s1)
bfc167a0:	3244      	sll	v0,1
bfc167a2:	67a3      	move	a1,v1
bfc167a4:	67c2      	move	a2,v0
bfc167a6:	6f00      	li	a3,0
bfc167a8:	b20f      	lw	v0,bfc167e4 <timer_usb_display_connect+0xd8>
bfc167aa:	eac0      	jalrc	v0
bfc167ac:	a941      	lhu	v0,2(s1)
        lcd_dma_set_counter(pix_cnt, 0);
bfc167ae:	6782      	move	a0,v0
bfc167b0:	6d00      	li	a1,0
bfc167b2:	6e00      	li	a2,0
bfc167b4:	6f0a      	li	a3,10
bfc167b6:	b209      	lw	v0,bfc167d8 <timer_usb_display_connect+0xcc>
bfc167b8:	eac0      	jalrc	v0
bfc167ba:	6c01      	li	a0,1
        lcd_dma_start_trans(LCD_RAM1_INDEX);
bfc167bc:	6d00      	li	a1,0
bfc167be:	6e00      	li	a2,0
bfc167c0:	6f0b      	li	a3,11
bfc167c2:	b206      	lw	v0,bfc167d8 <timer_usb_display_connect+0xcc>
bfc167c4:	eac0      	jalrc	v0
bfc167c6:	a140      	lbu	v0,0(s1)
bfc167c8:	4241      	addiu	v0,v0,1
bfc167ca:	c140      	sb	v0,0(s1)
bfc167cc:	17b1      	b	bfc16730 <timer_usb_display_connect+0x24>
bfc167ce:	65b9      	move	sp,s1

    }
}
bfc167d0:	6453      	restore	24,ra,s1
bfc167d2:	e8a0      	jrc	ra
bfc167d4:	55c6      	slti	a1,198
bfc167d6:	9fc1      	lw	a2,4(a3)
bfc167d8:	6411      	restore	8,s1
bfc167da:	bfc1      	lwu	a2,4(a3)
bfc167dc:	0400      	addiu	a0,sp,0
bfc167de:	0002      	addiu	s0,sp,8
bfc167e0:	8000      	lb	s0,0(s0)
bfc167e2:	0003      	addiu	s0,sp,12
bfc167e4:	6405      	restore	40
bfc167e6:	bfc1      	lwu	a2,4(a3)

bfc167e8 <display>:
bfc167e8:	64fa      	save	80,ra,s0-s1

/******************************************************************************/
/*!
 * \par  Description:
 *    message mananger
 * \param[in]
 * \param[out]   none
 * \retval       none
 * \ingroup      main_udisk.c
 * \note
 *******************************************************************************/
void display(void)
{
bfc167ea:	0104      	addiu	s1,sp,16
bfc167ec:	6a00      	li	v0,0
    uint8 i;
    picbox_private_t picbox_data;
    textbox_private_t textbox_param;
    style_infor_t style_infor;
    style_infor.type = UI_AP;
bfc167ee:	f020 c142 	sb	v0,34(s1)
bfc167f2:	6a7e      	li	v0,126
    textbox_param.lang_id = UNICODEID;
bfc167f4:	c152      	sb	v0,18(s1)
bfc167f6:	6a00      	li	v0,0
    textbox_param.str_value = NULL;
bfc167f8:	d945      	sw	v0,20(s1)
bfc167fa:	6a01      	li	v0,1
    textbox_param.str_id = -1;
bfc167fc:	ea4b      	neg	v0
bfc167fe:	c948      	sh	v0,16(s1)
bfc16800:	b2a3      	lw	v0,bfc16a8c <display+0x2a4>

    if (timer_usb_state_check_id == -1)
bfc16802:	8260      	lb	v1,0(v0)
bfc16804:	6a01      	li	v0,1
bfc16806:	ea4b      	neg	v0
bfc16808:	ea6e      	xor	v0,v1
bfc1680a:	5a01      	sltiu	v0,1
bfc1680c:	600d      	bteqz	bfc16828 <display+0x40>
bfc1680e:	b2a1      	lw	v0,bfc16a90 <display+0x2a8>
    {
        ud_get_status(&g_udisk_status);
bfc16810:	6782      	move	a0,v0
bfc16812:	6d00      	li	a1,0
bfc16814:	6e00      	li	a2,0
bfc16816:	6f00      	li	a3,0
bfc16818:	b29f      	lw	v0,bfc16a94 <display+0x2ac>
bfc1681a:	eac0      	jalrc	v0
bfc1681c:	6c04      	li	a0,4
        ud_set_cmd(SET_LINE_STATUS, 0);
bfc1681e:	6d00      	li	a1,0
bfc16820:	6e00      	li	a2,0
bfc16822:	6f06      	li	a3,6
bfc16824:	b29c      	lw	v0,bfc16a94 <display+0x2ac>
bfc16826:	eac0      	jalrc	v0
bfc16828:	b29a      	lw	v0,bfc16a8c <display+0x2a4>
    }

    if (line_status_bak != g_udisk_status.line_sta) //USB 状态有变化
bfc1682a:	b39c      	lw	v1,bfc16a98 <display+0x2b0>
bfc1682c:	9a80      	lw	a0,0(v0)
bfc1682e:	9b40      	lw	v0,0(v1)
bfc16830:	ea8e      	xor	v0,a0
bfc16832:	5a01      	sltiu	v0,1
bfc16834:	6165      	btnez	bfc16900 <display+0x118>
bfc16836:	b297      	lw	v0,bfc16a90 <display+0x2a8>
    {
        if (g_udisk_status.line_sta == 0x00) //显示任务指示 0:无显示动作  01:上传  02:下传  03:传输结束
bfc16838:	9a40      	lw	v0,0(v0)
bfc1683a:	2a04      	bnez	v0,bfc16844 <display+0x5c>
bfc1683c:	b398      	lw	v1,bfc16a9c <display+0x2b4>
        {
            charge_state_bak = BAT_NORMAL;
bfc1683e:	6a00      	li	v0,0
bfc16840:	c340      	sb	v0,0(v1)
bfc16842:	105e      	b	bfc16900 <display+0x118>
bfc16844:	b293      	lw	v0,bfc16a90 <display+0x2a8>
        }
        else if (((g_udisk_status.line_sta == 0x10) || (g_udisk_status.line_sta == 0x20) || (g_udisk_status.line_sta
bfc16846:	9a40      	lw	v0,0(v0)
bfc16848:	7210      	cmpi	v0,16
bfc1684a:	6758      	move	v0,t8
bfc1684c:	5a01      	sltiu	v0,1
bfc1684e:	610d      	btnez	bfc1686a <display+0x82>
bfc16850:	b290      	lw	v0,bfc16a90 <display+0x2a8>
bfc16852:	9a40      	lw	v0,0(v0)
bfc16854:	7220      	cmpi	v0,32
bfc16856:	6758      	move	v0,t8
bfc16858:	5a01      	sltiu	v0,1
bfc1685a:	6107      	btnez	bfc1686a <display+0x82>
bfc1685c:	b28d      	lw	v0,bfc16a90 <display+0x2a8>
bfc1685e:	9a40      	lw	v0,0(v0)
bfc16860:	7260      	cmpi	v0,96
bfc16862:	6758      	move	v0,t8
bfc16864:	5a01      	sltiu	v0,1
bfc16866:	6101      	btnez	bfc1686a <display+0x82>
bfc16868:	104b      	b	bfc16900 <display+0x118>
bfc1686a:	b28c      	lw	v0,bfc16a98 <display+0x2b0>
bfc1686c:	9a40      	lw	v0,0(v0)
bfc1686e:	2a48      	bnez	v0,bfc16900 <display+0x118>
bfc16870:	b28c      	lw	v0,bfc16aa0 <display+0x2b8>
                == 0x60)) && (line_status_bak == 0x00))
        {
            if (timer_usb_battery_id != -1)
bfc16872:	8260      	lb	v1,0(v0)
bfc16874:	6a01      	li	v0,1
bfc16876:	ea4b      	neg	v0
bfc16878:	ea6e      	xor	v0,v1
bfc1687a:	5a01      	sltiu	v0,1
bfc1687c:	6109      	btnez	bfc16890 <display+0xa8>
bfc1687e:	b289      	lw	v0,bfc16aa0 <display+0x2b8>
            {
                kill_app_timer(timer_usb_battery_id);
bfc16880:	8240      	lb	v0,0(v0)
bfc16882:	6782      	move	a0,v0
bfc16884:	b288      	lw	v0,bfc16aa4 <display+0x2bc>
bfc16886:	eac0      	jalrc	v0
bfc16888:	b386      	lw	v1,bfc16a9c <display+0x2b4>
                timer_usb_battery_id = -1;
bfc1688a:	6a01      	li	v0,1
bfc1688c:	ea4b      	neg	v0
bfc1688e:	c340      	sb	v0,0(v1)
bfc16890:	b27f      	lw	v0,bfc16a8c <display+0x2a4>
            }

            if (timer_usb_state_check_id == -1)
bfc16892:	8260      	lb	v1,0(v0)
bfc16894:	6a01      	li	v0,1
bfc16896:	ea4b      	neg	v0
bfc16898:	ea6e      	xor	v0,v1
bfc1689a:	5a01      	sltiu	v0,1
bfc1689c:	600b      	bteqz	bfc168b4 <display+0xcc>
bfc1689e:	f1e0 6a14 	li	v0,500
            {
                timer_usb_state_check_id = set_app_timer(APP_TIMER_ATTRB_UI, 500, usb_state_check_timer);
bfc168a2:	b382      	lw	v1,bfc16aa8 <display+0x2c0>
bfc168a4:	6c00      	li	a0,0
bfc168a6:	67a2      	move	a1,v0
bfc168a8:	67c3      	move	a2,v1
bfc168aa:	b281      	lw	v0,bfc16aac <display+0x2c4>
bfc168ac:	eac0      	jalrc	v0
bfc168ae:	6762      	move	v1,v0
bfc168b0:	b277      	lw	v0,bfc16a8c <display+0x2a4>
bfc168b2:	c260      	sb	v1,0(v0)
bfc168b4:	b27f      	lw	v0,bfc16ab0 <display+0x2c8>
            }

            if (timer_usb_connect_id == -1)
bfc168b6:	8260      	lb	v1,0(v0)
bfc168b8:	6a01      	li	v0,1
bfc168ba:	ea4b      	neg	v0
bfc168bc:	ea6e      	xor	v0,v1
bfc168be:	5a01      	sltiu	v0,1
bfc168c0:	600e      	bteqz	bfc168de <display+0xf6>
bfc168c2:	f3e0 6a08 	li	v0,1000
            {
                timer_usb_connect_id = set_app_timer(APP_TIMER_ATTRB_UI, 1000, timer_usb_display_connect);
bfc168c6:	b37c      	lw	v1,bfc16ab4 <display+0x2cc>
bfc168c8:	6c00      	li	a0,0
bfc168ca:	67a2      	move	a1,v0
bfc168cc:	67c3      	move	a2,v1
bfc168ce:	b278      	lw	v0,bfc16aac <display+0x2c4>
bfc168d0:	eac0      	jalrc	v0
bfc168d2:	6762      	move	v1,v0
bfc168d4:	b277      	lw	v0,bfc16ab0 <display+0x2c8>
bfc168d6:	c260      	sb	v1,0(v0)
bfc168d8:	b378      	lw	v1,bfc16ab8 <display+0x2d0>
                time_count = 0;
bfc168da:	6a00      	li	v0,0
bfc168dc:	c340      	sb	v0,0(v1)
bfc168de:	f004 6a00 	li	v0,8192
            }
            style_infor.style_id = UDISK_STATE_STR;
bfc168e2:	c950      	sh	v0,32(s1)
bfc168e4:	6a02      	li	v0,2
            textbox_param.str_id = S_UDISK_LINKING;
bfc168e6:	c948      	sh	v0,16(s1)
bfc168e8:	4147      	addiu	v0,s1,7
            ui_show_textbox(&style_infor, &textbox_param, TEXTBOX_DRAW_NORMAL);
bfc168ea:	4a19      	addiu	v0,25
bfc168ec:	4167      	addiu	v1,s1,7
bfc168ee:	4b09      	addiu	v1,9
bfc168f0:	6782      	move	a0,v0
bfc168f2:	67a3      	move	a1,v1
bfc168f4:	6e01      	li	a2,1
bfc168f6:	6f03      	li	a3,3
bfc168f8:	b271      	lw	v0,bfc16abc <display+0x2d4>
bfc168fa:	eac0      	jalrc	v0
bfc168fc:	b271      	lw	v0,bfc16abc <display+0x2d4>
            ui_show_battery();
bfc168fe:	eac0      	jalrc	v0
bfc16900:	b264      	lw	v0,bfc16a8c <display+0x2a4>
        }
        else
        {

        }
    }
    else
    {
    }

    if (g_udisk_status.line_sta == 0x00) //空闲状态
bfc16902:	9a40      	lw	v0,0(v0)
bfc16904:	f0a0 2a17 	bnez	v0,bfc16a76 <display+0x28e>
bfc16908:	b26a      	lw	v0,bfc16ab0 <display+0x2c8>
    {
        if (timer_usb_connect_id != -1)
bfc1690a:	8260      	lb	v1,0(v0)
bfc1690c:	6a01      	li	v0,1
bfc1690e:	ea4b      	neg	v0
bfc16910:	ea6e      	xor	v0,v1
bfc16912:	5a01      	sltiu	v0,1
bfc16914:	6109      	btnez	bfc16928 <display+0x140>
bfc16916:	b267      	lw	v0,bfc16ab0 <display+0x2c8>
        {
            kill_app_timer(timer_usb_connect_id);
bfc16918:	8240      	lb	v0,0(v0)
bfc1691a:	6782      	move	a0,v0
bfc1691c:	b262      	lw	v0,bfc16aa4 <display+0x2bc>
bfc1691e:	eac0      	jalrc	v0
bfc16920:	b364      	lw	v1,bfc16aac <display+0x2c4>
            timer_usb_connect_id = -1;
bfc16922:	6a01      	li	v0,1
bfc16924:	ea4b      	neg	v0
bfc16926:	c340      	sb	v0,0(v1)
bfc16928:	b259      	lw	v0,bfc16a8c <display+0x2a4>
        }

        if (timer_usb_state_check_id != -1)
bfc1692a:	8260      	lb	v1,0(v0)
bfc1692c:	6a01      	li	v0,1
bfc1692e:	ea4b      	neg	v0
bfc16930:	ea6e      	xor	v0,v1
bfc16932:	5a01      	sltiu	v0,1
bfc16934:	6109      	btnez	bfc16948 <display+0x160>
bfc16936:	b256      	lw	v0,bfc16a8c <display+0x2a4>
        {
            kill_app_timer(timer_usb_state_check_id);
bfc16938:	8240      	lb	v0,0(v0)
bfc1693a:	6782      	move	a0,v0
bfc1693c:	b25a      	lw	v0,bfc16aa4 <display+0x2bc>
bfc1693e:	eac0      	jalrc	v0
bfc16940:	b353      	lw	v1,bfc16a88 <display+0x2a0>
            timer_usb_state_check_id = -1;
bfc16942:	6a01      	li	v0,1
bfc16944:	ea4b      	neg	v0
bfc16946:	c340      	sb	v0,0(v1)
bfc16948:	b254      	lw	v0,bfc16a98 <display+0x2b0>
        }

        if (line_status_bak != 0x00)//从非空闲状态进入到空闲状态才需要更新
bfc1694a:	9a40      	lw	v0,0(v0)
bfc1694c:	221e      	beqz	v0,bfc1698a <display+0x1a2>
bfc1694e:	6a00      	li	v0,0
        {
            for (i = 0; i < 5; i++)
bfc16950:	c140      	sb	v0,0(s1)
bfc16952:	a140      	lbu	v0,0(s1)
bfc16954:	5a05      	sltiu	v0,5
bfc16956:	6019      	bteqz	bfc1698a <display+0x1a2>
bfc16958:	b35b      	lw	v1,bfc16ac4 <display+0x2dc>
            {
                style_infor.style_id = style_usb_point[i];
bfc1695a:	a140      	lbu	v0,0(s1)
bfc1695c:	3244      	sll	v0,1
bfc1695e:	e269      	addu	v0,v1
bfc16960:	aa40      	lhu	v0,0(v0)
bfc16962:	c950      	sh	v0,32(s1)
bfc16964:	6a01      	li	v0,1
                picbox_data.pic_id = -1;
bfc16966:	ea4b      	neg	v0
bfc16968:	c944      	sh	v0,8(s1)
bfc1696a:	6a00      	li	v0,0
                picbox_data.frame_id = 0;
bfc1696c:	c14a      	sb	v0,10(s1)
bfc1696e:	4147      	addiu	v0,s1,7
                //显示界面
                ui_show_picbox(&style_infor, &picbox_data);
bfc16970:	4a19      	addiu	v0,25
bfc16972:	4167      	addiu	v1,s1,7
bfc16974:	4361      	addiu	v1,v1,1
bfc16976:	6782      	move	a0,v0
bfc16978:	67a3      	move	a1,v1
bfc1697a:	6e00      	li	a2,0
bfc1697c:	6f02      	li	a3,2
bfc1697e:	b250      	lw	v0,bfc16abc <display+0x2d4>
bfc16980:	eac0      	jalrc	v0
bfc16982:	a140      	lbu	v0,0(s1)
bfc16984:	4241      	addiu	v0,v0,1
bfc16986:	c140      	sb	v0,0(s1)
bfc16988:	17e4      	b	bfc16952 <display+0x16a>
bfc1698a:	f004 6a00 	li	v0,8192
            }
        }

        style_infor.style_id = UDISK_STATE_STR;
bfc1698e:	c950      	sh	v0,32(s1)
bfc16990:	b04e      	lw	s0,bfc16ac8 <display+0x2e0>
        charge_state = (battery_status_e) (uint32) key_chargeget(&charge_value);
bfc16992:	b24f      	lw	v0,bfc16acc <display+0x2e4>
bfc16994:	6782      	move	a0,v0
bfc16996:	6d00      	li	a1,0
bfc16998:	6e00      	li	a2,0
bfc1699a:	6f00      	li	a3,0
bfc1699c:	b24d      	lw	v0,bfc16ad0 <display+0x2e8>
bfc1699e:	eac0      	jalrc	v0
bfc169a0:	c040      	sb	v0,0(s0)
bfc169a2:	b23f      	lw	v0,bfc16a9c <display+0x2b4>
        if (charge_state_bak != charge_state)
bfc169a4:	b349      	lw	v1,bfc16ac8 <display+0x2e0>
bfc169a6:	a280      	lbu	a0,0(v0)
bfc169a8:	a340      	lbu	v0,0(v1)
bfc169aa:	ea8e      	xor	v0,a0
bfc169ac:	5a01      	sltiu	v0,1
bfc169ae:	6163      	btnez	bfc16a76 <display+0x28e>
bfc169b0:	b246      	lw	v0,bfc16ac8 <display+0x2e0>
        {
            switch (charge_state)
bfc169b2:	a240      	lbu	v0,0(v0)
bfc169b4:	d94a      	sw	v0,40(s1)
bfc169b6:	994a      	lw	v0,40(s1)
bfc169b8:	7202      	cmpi	v0,2
bfc169ba:	6758      	move	v0,t8
bfc169bc:	5a01      	sltiu	v0,1
bfc169be:	6127      	btnez	bfc16a0e <display+0x226>
bfc169c0:	994a      	lw	v0,40(s1)
bfc169c2:	5203      	slti	v0,3
bfc169c4:	6006      	bteqz	bfc169d2 <display+0x1ea>
bfc169c6:	994a      	lw	v0,40(s1)
bfc169c8:	7201      	cmpi	v0,1
bfc169ca:	6758      	move	v0,t8
bfc169cc:	5a01      	sltiu	v0,1
bfc169ce:	6107      	btnez	bfc169de <display+0x1f6>
bfc169d0:	1048      	b	bfc16a62 <display+0x27a>
bfc169d2:	994a      	lw	v0,40(s1)
bfc169d4:	7203      	cmpi	v0,3
bfc169d6:	6758      	move	v0,t8
bfc169d8:	5a01      	sltiu	v0,1
bfc169da:	612e      	btnez	bfc16a38 <display+0x250>
bfc169dc:	1042      	b	bfc16a62 <display+0x27a>
bfc169de:	6a00      	li	v0,0
            {
                case BAT_CHARGING:
                textbox_param.str_id = S_UDISK_CHARGING;
bfc169e0:	c948      	sh	v0,16(s1)
bfc169e2:	b230      	lw	v0,bfc16aa0 <display+0x2b8>
                if (timer_usb_battery_id == -1)
bfc169e4:	8260      	lb	v1,0(v0)
bfc169e6:	6a01      	li	v0,1
bfc169e8:	ea4b      	neg	v0
bfc169ea:	ea6e      	xor	v0,v1
bfc169ec:	5a01      	sltiu	v0,1
bfc169ee:	6039      	bteqz	bfc16a62 <display+0x27a>
bfc169f0:	f1e0 6a14 	li	v0,500
                {
                    timer_usb_battery_id = set_app_timer(APP_TIMER_ATTRB_UI, 500, timer_usb_display_battery);
bfc169f4:	b338      	lw	v1,bfc16ad4 <display+0x2ec>
bfc169f6:	6c00      	li	a0,0
bfc169f8:	67a2      	move	a1,v0
bfc169fa:	67c3      	move	a2,v1
bfc169fc:	b22c      	lw	v0,bfc16aac <display+0x2c4>
bfc169fe:	eac0      	jalrc	v0
bfc16a00:	6762      	move	v1,v0
bfc16a02:	b228      	lw	v0,bfc16aa0 <display+0x2b8>
bfc16a04:	c260      	sb	v1,0(v0)
bfc16a06:	b32d      	lw	v1,bfc16ab8 <display+0x2d0>
                    time_count = 0;
bfc16a08:	6a00      	li	v0,0
bfc16a0a:	c340      	sb	v0,0(v1)
bfc16a0c:	102a      	b	bfc16a62 <display+0x27a>
                }
                break;
bfc16a0e:	6a01      	li	v0,1
                case BAT_FULL:
                textbox_param.str_id = S_UDISK_FULL_CHARGED;
bfc16a10:	c948      	sh	v0,16(s1)
bfc16a12:	b224      	lw	v0,bfc16aa0 <display+0x2b8>
                if (timer_usb_battery_id != -1)
bfc16a14:	8260      	lb	v1,0(v0)
bfc16a16:	6a01      	li	v0,1
bfc16a18:	ea4b      	neg	v0
bfc16a1a:	ea6e      	xor	v0,v1
bfc16a1c:	5a01      	sltiu	v0,1
bfc16a1e:	6109      	btnez	bfc16a32 <display+0x24a>
bfc16a20:	b220      	lw	v0,bfc16aa0 <display+0x2b8>
                {
                    kill_app_timer(timer_usb_battery_id);
bfc16a22:	8240      	lb	v0,0(v0)
bfc16a24:	6782      	move	a0,v0
bfc16a26:	b220      	lw	v0,bfc16aa4 <display+0x2bc>
bfc16a28:	eac0      	jalrc	v0
bfc16a2a:	b31e      	lw	v1,bfc16aa0 <display+0x2b8>
                    timer_usb_battery_id = -1;
bfc16a2c:	6a01      	li	v0,1
bfc16a2e:	ea4b      	neg	v0
bfc16a30:	c340      	sb	v0,0(v1)
bfc16a32:	b224      	lw	v0,bfc16ac0 <display+0x2d8>
                }
                ui_show_battery();
bfc16a34:	eac0      	jalrc	v0
bfc16a36:	1015      	b	bfc16a62 <display+0x27a>
                break;
bfc16a38:	b21a      	lw	v0,bfc16aa0 <display+0x2b8>
                case BAT_NO_EXIST:
                if (timer_usb_battery_id != -1)
bfc16a3a:	8260      	lb	v1,0(v0)
bfc16a3c:	6a01      	li	v0,1
bfc16a3e:	ea4b      	neg	v0
bfc16a40:	ea6e      	xor	v0,v1
bfc16a42:	5a01      	sltiu	v0,1
bfc16a44:	6109      	btnez	bfc16a58 <display+0x270>
bfc16a46:	b217      	lw	v0,bfc16aa0 <display+0x2b8>
                {
                    kill_app_timer(timer_usb_battery_id);
bfc16a48:	8240      	lb	v0,0(v0)
bfc16a4a:	6782      	move	a0,v0
bfc16a4c:	b216      	lw	v0,bfc16aa4 <display+0x2bc>
bfc16a4e:	eac0      	jalrc	v0
bfc16a50:	b314      	lw	v1,bfc16a9c <display+0x2b4>
                    timer_usb_battery_id = -1;
bfc16a52:	6a01      	li	v0,1
bfc16a54:	ea4b      	neg	v0
bfc16a56:	c340      	sb	v0,0(v1)
bfc16a58:	b21d      	lw	v0,bfc16acc <display+0x2e4>
                }
                charge_value = 0;
bfc16a5a:	6b00      	li	v1,0
bfc16a5c:	c260      	sb	v1,0(v0)
bfc16a5e:	b219      	lw	v0,bfc16ac0 <display+0x2d8>
                ui_show_battery();
bfc16a60:	eac0      	jalrc	v0
bfc16a62:	4147      	addiu	v0,s1,7
                break;
                default:
                break;
            }
            ui_show_textbox(&style_infor, &textbox_param, TEXTBOX_DRAW_NORMAL);
bfc16a64:	4a19      	addiu	v0,25
bfc16a66:	4167      	addiu	v1,s1,7
bfc16a68:	4b09      	addiu	v1,9
bfc16a6a:	6782      	move	a0,v0
bfc16a6c:	67a3      	move	a1,v1
bfc16a6e:	6e01      	li	a2,1
bfc16a70:	6f03      	li	a3,3
bfc16a72:	b213      	lw	v0,bfc16abc <display+0x2d4>
bfc16a74:	eac0      	jalrc	v0
bfc16a76:	b30a      	lw	v1,bfc16a9c <display+0x2b4>
        }
    }
    else
    {

    }
    charge_state_bak = charge_state;
bfc16a78:	b214      	lw	v0,bfc16ac8 <display+0x2e0>
bfc16a7a:	a240      	lbu	v0,0(v0)
bfc16a7c:	c340      	sb	v0,0(v1)
bfc16a7e:	b307      	lw	v1,bfc16a98 <display+0x2b0>
    line_status_bak = g_udisk_status.line_sta;
bfc16a80:	b204      	lw	v0,bfc16a90 <display+0x2a8>
bfc16a82:	9a40      	lw	v0,0(v0)
bfc16a84:	db40      	sw	v0,0(v1)
bfc16a86:	65b9      	move	sp,s1
}
bfc16a88:	6478      	restore	64,ra,s0-s1
bfc16a8a:	e8a0      	jrc	ra
bfc16a8c:	55c9      	slti	a1,201
bfc16a8e:	9fc1      	lw	a2,4(a3)
bfc16a90:	55cc      	slti	a1,204
bfc16a92:	9fc1      	lw	a2,4(a3)
bfc16a94:	6bd9      	li	v1,217
bfc16a96:	bfc1      	lwu	a2,4(a3)
bfc16a98:	55e4      	slti	a1,228
bfc16a9a:	9fc1      	lw	a2,4(a3)
bfc16a9c:	55c5      	slti	a1,197
bfc16a9e:	9fc1      	lw	a2,4(a3)
bfc16aa0:	55c8      	slti	a1,200
bfc16aa2:	9fc1      	lw	a2,4(a3)
bfc16aa4:	473d      	daddiu	s1,a3,-3
bfc16aa6:	4845      	addiu	s0,69
bfc16aa8:	6ad9      	li	v0,217
bfc16aaa:	bfc1      	lwu	a2,4(a3)
bfc16aac:	4601      	addiu	s0,a2,1
bfc16aae:	4845      	addiu	s0,69
bfc16ab0:	55c7      	slti	a1,199
bfc16ab2:	9fc1      	lw	a2,4(a3)
bfc16ab4:	670d      	move	s0,t5
bfc16ab6:	bfc1      	lwu	a2,4(a3)
bfc16ab8:	55c6      	slti	a1,198
bfc16aba:	9fc1      	lw	a2,4(a3)
bfc16abc:	6bdd      	li	v1,221
bfc16abe:	bfc1      	lwu	a2,4(a3)
bfc16ac0:	6611      	0x6611
bfc16ac2:	bfc1      	lwu	a2,4(a3)
bfc16ac4:	531c      	slti	v1,28
bfc16ac6:	4001      	addiu	s0,s0,1
bfc16ac8:	55c4      	slti	a1,196
bfc16aca:	9fc1      	lw	a2,4(a3)
bfc16acc:	55c3      	slti	a1,195
bfc16ace:	9fc1      	lw	a2,4(a3)
bfc16ad0:	640d      	restore	104
bfc16ad2:	bfc1      	lwu	a2,4(a3)
bfc16ad4:	666d      	0x666d
bfc16ad6:	bfc1      	lwu	a2,4(a3)

bfc16ad8 <usb_state_check_timer>:
bfc16ad8:	64d6      	save	48,ra,s1

void usb_state_check_timer(void)
{
bfc16ada:	0104      	addiu	s1,sp,16
bfc16adc:	6791      	move	a0,s1

    ureader_status_t udisk_status;
    ud_get_status(&udisk_status);
bfc16ade:	6d00      	li	a1,0
bfc16ae0:	6e00      	li	a2,0
bfc16ae2:	6f00      	li	a3,0
bfc16ae4:	b20e      	lw	v0,bfc16b1c <usb_state_check_timer+0x44>
bfc16ae6:	eac0      	jalrc	v0
bfc16ae8:	9940      	lw	v0,0(s1)
    if ((udisk_status.line_sta == 0x01) || (udisk_status.line_sta == 0x02))
bfc16aea:	7201      	cmpi	v0,1
bfc16aec:	6758      	move	v0,t8
bfc16aee:	5a01      	sltiu	v0,1
bfc16af0:	6112      	btnez	bfc16b16 <usb_state_check_timer+0x3e>
bfc16af2:	9940      	lw	v0,0(s1)
bfc16af4:	7202      	cmpi	v0,2
bfc16af6:	6758      	move	v0,t8
bfc16af8:	5a01      	sltiu	v0,1
bfc16afa:	610d      	btnez	bfc16b16 <usb_state_check_timer+0x3e>
bfc16afc:	b209      	lw	v0,bfc16b20 <usb_state_check_timer+0x48>
    {
        return;
    }
    ud_get_status(&g_udisk_status);
bfc16afe:	6782      	move	a0,v0
bfc16b00:	6d00      	li	a1,0
bfc16b02:	6e00      	li	a2,0
bfc16b04:	6f00      	li	a3,0
bfc16b06:	b206      	lw	v0,bfc16b1c <usb_state_check_timer+0x44>
bfc16b08:	eac0      	jalrc	v0
bfc16b0a:	6c04      	li	a0,4
    ud_set_cmd(SET_LINE_STATUS, 0);
bfc16b0c:	6d00      	li	a1,0
bfc16b0e:	6e00      	li	a2,0
bfc16b10:	6f06      	li	a3,6
bfc16b12:	b203      	lw	v0,bfc16b1c <usb_state_check_timer+0x44>
bfc16b14:	eac0      	jalrc	v0
bfc16b16:	65b9      	move	sp,s1
}
bfc16b18:	6454      	restore	32,ra,s1
bfc16b1a:	e8a0      	jrc	ra
bfc16b1c:	6bd9      	li	v1,217
bfc16b1e:	bfc1      	lwu	a2,4(a3)
bfc16b20:	55cc      	slti	a1,204
bfc16b22:	9fc1      	lw	a2,4(a3)

bfc16b24 <set_time_date>:
bfc16b24:	64d7      	save	56,ra,s1

#ifdef SUPPORT_USER_DEF_USBCMD
void set_time_date(void)
{
bfc16b26:	0104      	addiu	s1,sp,16
bfc16b28:	4147      	addiu	v0,s1,7
    uint8 i;
    time_t down_time;
    date_t down_date;
    uint8 temp_buff[7];

    libc_memset(temp_buff, 0, 7);
bfc16b2a:	4a11      	addiu	v0,17
bfc16b2c:	6782      	move	a0,v0
bfc16b2e:	6d00      	li	a1,0
bfc16b30:	6e07      	li	a2,7
bfc16b32:	6f01      	li	a3,1
bfc16b34:	b223      	lw	v0,bfc16bc0 <set_time_date+0x9c>
bfc16b36:	eac0      	jalrc	v0
bfc16b38:	b223      	lw	v0,bfc16bc0 <set_time_date+0x9c>

    while (0 != (act_readb(Out2cs_hcin2cs) & 0x02))
bfc16b3a:	a240      	lbu	v0,0(v0)
bfc16b3c:	6762      	move	v1,v0
bfc16b3e:	eb11      	zeb	v1
bfc16b40:	6a02      	li	v0,2
bfc16b42:	ea6c      	and	v0,v1
bfc16b44:	2201      	beqz	v0,bfc16b48 <set_time_date+0x24>
bfc16b46:	17f8      	b	bfc16b38 <set_time_date+0x14>
bfc16b48:	6a00      	li	v0,0
    {
        ;//clear_watchdog();
    }

    //改成用LB读寄存器，因为如果FIFO内的数据不是4的整数倍且收完数据，用act_readl访问Fifo2dat FIFO会出错
    for (i = 0; i < 7; i++)
bfc16b4a:	c140      	sb	v0,0(s1)
bfc16b4c:	a140      	lbu	v0,0(s1)
bfc16b4e:	5a07      	sltiu	v0,7
bfc16b50:	600a      	bteqz	bfc16b66 <set_time_date+0x42>
bfc16b52:	b21e      	lw	v0,bfc16bc8 <set_time_date+0xa4>
    {
        asm volatile ("lb $7, %0" : : "m" (*(uint8 *)Fifo2dat) : "$7", "memory");
bfc16b54:	82e0      	lb	a3,0(v0)
bfc16b56:	a160      	lbu	v1,0(s1)
        asm volatile ("sb $7, %0" : "=m" (*((uint8 *) (&temp_buff) + i)) : : "$7", "memory");
bfc16b58:	6751      	move	v0,s1
bfc16b5a:	e269      	addu	v0,v1
bfc16b5c:	c2f8      	sb	a3,24(v0)
bfc16b5e:	a140      	lbu	v0,0(s1)
bfc16b60:	4241      	addiu	v0,v0,1
bfc16b62:	c140      	sb	v0,0(s1)
bfc16b64:	17f3      	b	bfc16b4c <set_time_date+0x28>
bfc16b66:	a94c      	lhu	v0,24(s1)
    }

    down_date.year = *((uint16 *) temp_buff);
bfc16b68:	c948      	sh	v0,16(s1)
bfc16b6a:	a15a      	lbu	v0,26(s1)
    down_date.month = *((uint8 *) temp_buff + 2);
bfc16b6c:	c152      	sb	v0,18(s1)
bfc16b6e:	a15b      	lbu	v0,27(s1)
    down_date.day = *((uint8 *) temp_buff + 3);
bfc16b70:	c153      	sb	v0,19(s1)
bfc16b72:	a15c      	lbu	v0,28(s1)
    down_time.hour = *((uint8 *) temp_buff + 4);
bfc16b74:	c148      	sb	v0,8(s1)
bfc16b76:	a15d      	lbu	v0,29(s1)
    down_time.minute = *((uint8 *) temp_buff + 5);
bfc16b78:	c149      	sb	v0,9(s1)
bfc16b7a:	a15e      	lbu	v0,30(s1)
    down_time.second = *((uint8 *) temp_buff + 6);
bfc16b7c:	c14a      	sb	v0,10(s1)
bfc16b7e:	4147      	addiu	v0,s1,7

    usb_print("day:", down_date.day, 2);

    sys_set_time(&down_time);
bfc16b80:	4241      	addiu	v0,v0,1
bfc16b82:	6782      	move	a0,v0
bfc16b84:	6d00      	li	a1,0
bfc16b86:	6e00      	li	a2,0
bfc16b88:	6f23      	li	a3,35
bfc16b8a:	b211      	lw	v0,bfc16bcc <set_time_date+0xa8>
bfc16b8c:	eac0      	jalrc	v0
bfc16b8e:	4147      	addiu	v0,s1,7
    sys_set_date(&down_date);
bfc16b90:	4a09      	addiu	v0,9
bfc16b92:	6782      	move	a0,v0
bfc16b94:	6d00      	li	a1,0
bfc16b96:	6e00      	li	a2,0
bfc16b98:	6f25      	li	a3,37
bfc16b9a:	b20d      	lw	v0,bfc16bcc <set_time_date+0xa8>
bfc16b9c:	eac0      	jalrc	v0
bfc16b9e:	b40d      	lw	a0,bfc16bd0 <set_time_date+0xac>
    act_writeb(act_readb(OSHRTPCKIR) | 0x40, OSHRTPCKIR);
bfc16ba0:	b20c      	lw	v0,bfc16bd0 <set_time_date+0xac>
bfc16ba2:	a240      	lbu	v0,0(v0)
bfc16ba4:	6762      	move	v1,v0
bfc16ba6:	6a40      	li	v0,64
bfc16ba8:	ea6d      	or	v0,v1
bfc16baa:	c440      	sb	v0,0(a0)
bfc16bac:	6c00      	li	a0,0

    //act_writeb((act_readb(Out2cs_hcin2cs) | 0x02), Out2cs_hcin2cs);
    ud_report_status(0);
bfc16bae:	6d00      	li	a1,0
bfc16bb0:	6e00      	li	a2,0
bfc16bb2:	6f09      	li	a3,9
bfc16bb4:	b208      	lw	v0,bfc16bd4 <set_time_date+0xb0>
bfc16bb6:	eac0      	jalrc	v0
bfc16bb8:	65b9      	move	sp,s1
    return;
}
bfc16bba:	6455      	restore	40,ra,s1
bfc16bbc:	e8a0      	jrc	ra
bfc16bbe:	0000      	addiu	s0,sp,0
bfc16bc0:	6405      	restore	40
bfc16bc2:	bfc1      	lwu	a2,4(a3)
bfc16bc4:	0013      	addiu	s0,sp,76
bfc16bc6:	c008      	sb	s0,8(s0)
bfc16bc8:	0088      	addiu	s0,sp,544
bfc16bca:	c008      	sb	s0,8(s0)
bfc16bcc:	6401      	restore	8
bfc16bce:	bfc1      	lwu	a2,4(a3)
bfc16bd0:	0403      	addiu	a0,sp,12
bfc16bd2:	c008      	sb	s0,8(s0)
bfc16bd4:	6bd9      	li	v1,217
bfc16bd6:	bfc1      	lwu	a2,4(a3)

bfc16bd8 <ud_op_entry>:
bfc16bd8:	6b05      	li	v1,5
bfc16bda:	e805      	break	0

bfc16bdc <ui_op_entry>:
bfc16bdc:	6b06      	li	v1,6
bfc16bde:	e805      	break	0

bfc16be0 <vfs_op_entry>:
bfc16be0:	6b11      	li	v1,17
bfc16be2:	e805      	break	0
Disassembly of section BANK_CONTROL_1_0:

40014c00 <process_start>:
40014c00:	64d4      	save	32,ra,s1
40014c02:	0104      	addiu	s1,sp,16
40014c04:	d984      	sw	a0,16(s1)
40014c06:	9944      	lw	v0,16(s1)
40014c08:	6782      	move	a0,v0
40014c0a:	6d00      	li	a1,0
40014c0c:	b207      	lw	v0,40014c28 <BANK_CONTROL_1_ADDR_BASE+0x28>
40014c0e:	eac0      	jalrc	v0
40014c10:	c140      	sb	v0,0(s1)
40014c12:	8140      	lb	v0,0(s1)
40014c14:	6782      	move	a0,v0
40014c16:	6d00      	li	a1,0
40014c18:	6e00      	li	a2,0
40014c1a:	6f0e      	li	a3,14
40014c1c:	b204      	lw	v0,40014c2c <BANK_CONTROL_1_ADDR_BASE+0x2c>
40014c1e:	eac0      	jalrc	v0
40014c20:	6a00      	li	v0,0
40014c22:	65b9      	move	sp,s1
40014c24:	6452      	restore	16,ra,s1
40014c26:	e8a0      	jrc	ra
40014c28:	4f4d      	addiu	a3,77
40014c2a:	4001      	addiu	s0,s0,1
40014c2c:	6405      	restore	40
40014c2e:	bfc1      	lwu	a2,4(a3)

40014c30 <__start>:
40014c30:	64d6      	save	48,ra,s1
40014c32:	0104      	addiu	s1,sp,16
40014c34:	d988      	sw	a0,32(s1)
40014c36:	d9a9      	sw	a1,36(s1)
40014c38:	6c00      	li	a0,0
40014c3a:	6d00      	li	a1,0
40014c3c:	6e00      	li	a2,0
40014c3e:	6f10      	li	a3,16
40014c40:	b220      	lw	v0,40014cc0 <__start+0x90>
40014c42:	eac0      	jalrc	v0
40014c44:	c150      	sb	v0,16(s1)
40014c46:	8170      	lb	v1,16(s1)
40014c48:	6a01      	li	v0,1
40014c4a:	ea4b      	neg	v0
40014c4c:	ea6e      	xor	v0,v1
40014c4e:	5a01      	sltiu	v0,1
40014c50:	6004      	bteqz	40014c5a <__start+0x2a>
40014c52:	6a01      	li	v0,1
40014c54:	ea4b      	neg	v0
40014c56:	d945      	sw	v0,20(s1)
40014c58:	102e      	b	40014cb6 <__start+0x86>
40014c5a:	b21b      	lw	v0,40014cc4 <__start+0x94>
40014c5c:	d940      	sw	v0,0(s1)
40014c5e:	9948      	lw	v0,32(s1)
40014c60:	d941      	sw	v0,4(s1)
40014c62:	9949      	lw	v0,36(s1)
40014c64:	9a41      	lw	v0,4(v0)
40014c66:	d942      	sw	v0,8(s1)
40014c68:	9949      	lw	v0,36(s1)
40014c6a:	aa41      	lhu	v0,2(v0)
40014c6c:	c946      	sh	v0,12(s1)
40014c6e:	6c00      	li	a0,0
40014c70:	6d00      	li	a1,0
40014c72:	6e00      	li	a2,0
40014c74:	6f33      	li	a3,51
40014c76:	b215      	lw	v0,40014cc8 <__start+0x98>
40014c78:	eac0      	jalrc	v0
40014c7a:	9949      	lw	v0,36(s1)
40014c7c:	aa40      	lhu	v0,0(v0)
40014c7e:	8170      	lb	v1,16(s1)
40014c80:	6791      	move	a0,s1
40014c82:	67a2      	move	a1,v0
40014c84:	67c3      	move	a2,v1
40014c86:	6f4a      	li	a3,74
40014c88:	b210      	lw	v0,40014cc8 <__start+0x98>
40014c8a:	eac0      	jalrc	v0
40014c8c:	5200      	slti	v0,0
40014c8e:	6011      	bteqz	40014cb2 <__start+0x82>
40014c90:	8150      	lb	v0,16(s1)
40014c92:	6782      	move	a0,v0
40014c94:	6d00      	li	a1,0
40014c96:	6e00      	li	a2,0
40014c98:	6f11      	li	a3,17
40014c9a:	b20a      	lw	v0,40014cc0 <__start+0x90>
40014c9c:	eac0      	jalrc	v0
40014c9e:	6c00      	li	a0,0
40014ca0:	6d00      	li	a1,0
40014ca2:	6e00      	li	a2,0
40014ca4:	6f34      	li	a3,52
40014ca6:	b209      	lw	v0,40014cc8 <__start+0x98>
40014ca8:	eac0      	jalrc	v0
40014caa:	6a01      	li	v0,1
40014cac:	ea4b      	neg	v0
40014cae:	d945      	sw	v0,20(s1)
40014cb0:	1002      	b	40014cb6 <__start+0x86>
40014cb2:	6a00      	li	v0,0
40014cb4:	d945      	sw	v0,20(s1)
40014cb6:	9945      	lw	v0,20(s1)
40014cb8:	65b9      	move	sp,s1
40014cba:	6454      	restore	32,ra,s1
40014cbc:	e8a0      	jrc	ra
40014cbe:	0000      	addiu	s0,sp,0
40014cc0:	6405      	restore	40
40014cc2:	bfc1      	lwu	a2,4(a3)
40014cc4:	4c01      	addiu	a0,1
40014cc6:	4001      	addiu	s0,s0,1
40014cc8:	6401      	restore	8
40014cca:	bfc1      	lwu	a2,4(a3)

40014ccc <msgmanager>:
40014ccc:	64d8      	save	64,ra,s1
 * \ingroup      main_udisk.c
 * \note
 *******************************************************************************/
void msgmanager(void)
{
40014cce:	0104      	addiu	s1,sp,16
40014cd0:	b233      	lw	v0,40014d9c <msgmanager+0xd0>
    bool msg_result;
    input_gui_msg_t udisk_gui_msg;
    msg_apps_type_e gui_event;
    private_msg_t udisk_app_msg;

    if (returnkey_press == 1) //已收到return键,不再收消息,以防非空闲状态下跑该函数把KeyUp收走
40014cd2:	a240      	lbu	v0,0(v0)
40014cd4:	7201      	cmpi	v0,1
40014cd6:	6758      	move	v0,t8
40014cd8:	5a01      	sltiu	v0,1
40014cda:	6001      	bteqz	40014cde <msgmanager+0x12>
40014cdc:	105b      	b	40014d94 <msgmanager+0xc8>
    {
        return;
40014cde:	4147      	addiu	v0,s1,7
    }
    /*处理gui消息*/
    msg_result = get_gui_msg(&udisk_gui_msg);
40014ce0:	4241      	addiu	v0,v0,1
40014ce2:	6782      	move	a0,v0
40014ce4:	b22f      	lw	v0,40014da0 <msgmanager+0xd4>
40014ce6:	eac0      	jalrc	v0
40014ce8:	c140      	sb	v0,0(s1)
40014cea:	a140      	lbu	v0,0(s1)
    if (msg_result == TRUE)
40014cec:	7201      	cmpi	v0,1
40014cee:	6758      	move	v0,t8
40014cf0:	5a01      	sltiu	v0,1
40014cf2:	601a      	bteqz	40014d28 <msgmanager+0x5c>
40014cf4:	4147      	addiu	v0,s1,7
    {
        if (com_key_mapping(&udisk_gui_msg, &gui_event, udisk_key_map_list) == TRUE)
40014cf6:	4241      	addiu	v0,v0,1
40014cf8:	4167      	addiu	v1,s1,7
40014cfa:	4b09      	addiu	v1,9
40014cfc:	b62a      	lw	a2,40014da4 <msgmanager+0xd8>
40014cfe:	6782      	move	a0,v0
40014d00:	67a3      	move	a1,v1
40014d02:	b22a      	lw	v0,40014da8 <msgmanager+0xdc>
40014d04:	eac0      	jalrc	v0
40014d06:	7201      	cmpi	v0,1
40014d08:	6758      	move	v0,t8
40014d0a:	5a01      	sltiu	v0,1
40014d0c:	600d      	bteqz	40014d28 <msgmanager+0x5c>
40014d0e:	a948      	lhu	v0,16(s1)
        {
            if(gui_event == EVENT_UDISK_EXIT_LAST)
40014d10:	f505 7201 	cmpi	v0,11521
40014d14:	6758      	move	v0,t8
40014d16:	5a01      	sltiu	v0,1
40014d18:	6007      	bteqz	40014d28 <msgmanager+0x5c>
40014d1a:	b225      	lw	v0,40014dac <msgmanager+0xe0>
            {

                if ( g_udisk_status.line_sta == 0)
40014d1c:	9a40      	lw	v0,0(v0)
40014d1e:	2a04      	bnez	v0,40014d28 <msgmanager+0x5c>
40014d20:	b31f      	lw	v1,40014d9c <msgmanager+0xd0>
                {
                    returnkey_press = 0x01;
40014d22:	6a01      	li	v0,1
40014d24:	c340      	sb	v0,0(v1)
40014d26:	1036      	b	40014d94 <msgmanager+0xc8>
                    return;
40014d28:	4147      	addiu	v0,s1,7
                }
            }

            /*else if((gui_event == EVENT_ENTER_KEYLOCK) || (gui_event == EVENT_ENTER_KEYLOCK_UN))
            {
                //直接把有效执行代码复制过来，以免发生bank切换
                if(get_keylock_state() == TRUE)
                {
                    change_keylock_state(FALSE);
                }
                else
                {
                    change_keylock_state(TRUE);
                }
            }*/
            else
            {
            }
        }
    }
    msg_result = get_app_msg(&udisk_app_msg);
40014d2a:	4a11      	addiu	v0,17
40014d2c:	6782      	move	a0,v0
40014d2e:	b221      	lw	v0,40014db0 <msgmanager+0xe4>
40014d30:	eac0      	jalrc	v0
40014d32:	c140      	sb	v0,0(s1)
40014d34:	a140      	lbu	v0,0(s1)
    if (msg_result == TRUE)
40014d36:	7201      	cmpi	v0,1
40014d38:	6758      	move	v0,t8
40014d3a:	5a01      	sltiu	v0,1
40014d3c:	602b      	bteqz	40014d94 <msgmanager+0xc8>
40014d3e:	9946      	lw	v0,24(s1)
    {
        if(udisk_app_msg.msg.type == MSG_SD_OUT)
40014d40:	72b1      	cmpi	v0,177
40014d42:	6758      	move	v0,t8
40014d44:	5a01      	sltiu	v0,1
40014d46:	6007      	bteqz	40014d56 <msgmanager+0x8a>
40014d48:	b31b      	lw	v1,40014db4 <msgmanager+0xe8>
        {
            iscardout = 0x01;
40014d4a:	6a01      	li	v0,1
40014d4c:	c340      	sb	v0,0(v1)
40014d4e:	b31b      	lw	v1,40014db8 <msgmanager+0xec>
            iscardin = 0;
40014d50:	6a00      	li	v0,0
40014d52:	c340      	sb	v0,0(v1)
40014d54:	101f      	b	40014d94 <msgmanager+0xc8>
40014d56:	9946      	lw	v0,24(s1)
        }
        else if(udisk_app_msg.msg.type == MSG_SD_IN)
40014d58:	72b0      	cmpi	v0,176
40014d5a:	6758      	move	v0,t8
40014d5c:	5a01      	sltiu	v0,1
40014d5e:	6007      	bteqz	40014d6e <msgmanager+0xa2>
40014d60:	b315      	lw	v1,40014db4 <msgmanager+0xe8>
        {
            iscardout = 0x0;
40014d62:	6a00      	li	v0,0
40014d64:	c340      	sb	v0,0(v1)
40014d66:	b315      	lw	v1,40014db8 <msgmanager+0xec>
            iscardin = 1;
40014d68:	6a01      	li	v0,1
40014d6a:	c340      	sb	v0,0(v1)
40014d6c:	1013      	b	40014d94 <msgmanager+0xc8>
40014d6e:	9946      	lw	v0,24(s1)
        }
        else if(udisk_app_msg.msg.type == MSG_EARPHONE_IN)//耳机（天线）插入
40014d70:	72f0      	cmpi	v0,240
40014d72:	6758      	move	v0,t8
40014d74:	5a01      	sltiu	v0,1
40014d76:	6005      	bteqz	40014d82 <msgmanager+0xb6>
40014d78:	6c01      	li	a0,1
        {
            change_antenna_state(TRUE);
40014d7a:	1800 536f 	jal	40014dbc <change_antenna_state>
40014d7e:	6500      	nop
40014d80:	1009      	b	40014d94 <msgmanager+0xc8>
40014d82:	9946      	lw	v0,24(s1)
        }
        else if(udisk_app_msg.msg.type == MSG_EARPHONE_OUT)//耳机（天线）拔出
40014d84:	72f1      	cmpi	v0,241
40014d86:	6758      	move	v0,t8
40014d88:	5a01      	sltiu	v0,1
40014d8a:	6004      	bteqz	40014d94 <msgmanager+0xc8>
40014d8c:	6c00      	li	a0,0
        {
            change_antenna_state(FALSE);
40014d8e:	1800 536f 	jal	40014dbc <change_antenna_state>
40014d92:	6500      	nop
40014d94:	65b9      	move	sp,s1
        }
        else
        {
        }
    }
}
40014d96:	6456      	restore	48,ra,s1
40014d98:	e8a0      	jrc	ra
40014d9a:	0000      	addiu	s0,sp,0
40014d9c:	55c0      	slti	a1,192
40014d9e:	9fc1      	lw	a2,4(a3)
40014da0:	64dd      	save	104,ra,s1
40014da2:	bfc1      	lwu	a2,4(a3)
40014da4:	5310      	slti	v1,16
40014da6:	4001      	addiu	s0,s0,1
40014da8:	47ad      	addiu	a1,a3,-3
40014daa:	4855      	addiu	s0,85
40014dac:	55cc      	slti	a1,204
40014dae:	9fc1      	lw	a2,4(a3)
40014db0:	6549      	move	t2,s1
40014db2:	bfc1      	lwu	a2,4(a3)
40014db4:	55c1      	slti	a1,193
40014db6:	9fc1      	lw	a2,4(a3)
40014db8:	55c2      	slti	a1,194
40014dba:	9fc1      	lw	a2,4(a3)

40014dbc <change_antenna_state>:
40014dbc:	6491      	save	8,s1
}

///修改耳机（天线）状态
static inline void change_antenna_state(bool in_out)
{
40014dbe:	673d      	move	s1,sp
40014dc0:	6744      	move	v0,a0
40014dc2:	c148      	sb	v0,8(s1)
40014dc4:	b303      	lw	v1,40014dd0 <change_antenna_state+0x14>
    g_app_info_state.antenna_state = in_out;// tmp del 2015-12-25
40014dc6:	a148      	lbu	v0,8(s1)
40014dc8:	c34e      	sb	v0,14(v1)
40014dca:	65b9      	move	sp,s1
}
40014dcc:	6411      	restore	8,s1
40014dce:	e8a0      	jrc	ra
40014dd0:	a1b8      	lbu	a1,24(s1)
40014dd2:	9fc1      	lw	a2,4(a3)

40014dd4 <rise_vdd_and_freq>:
40014dd4:	64d3      	save	24,ra,s1

/******************************************************************************/
/*!
 * \par  Description:
 * 调节vdd and 调频 forusb
 * \param[in]    none
 * \param[out]   none
 * \return       none
 * \ingroup      udisk_main.c
 * \note
 *******************************************************************************/
void rise_vdd_and_freq(void)
{
40014dd6:	0104      	addiu	s1,sp,16
40014dd8:	6c0a      	li	a0,10
    adjust_freq_set_level(AP_FRONT_LOW_PRIO, FREQ_LEVEL11, FREQ_NULL);//max frequency
40014dda:	6d0b      	li	a1,11
40014ddc:	6e00      	li	a2,0
40014dde:	6f05      	li	a3,5
40014de0:	b206      	lw	v0,40014df8 <rise_vdd_and_freq+0x24>
40014de2:	eac0      	jalrc	v0
40014de4:	6c01      	li	a0,1
    //sys_enter_high_powered(3);
    sys_enter_high_powered(1);
40014de6:	6d03      	li	a1,3
40014de8:	6e01      	li	a2,1
40014dea:	6f36      	li	a3,54
40014dec:	b204      	lw	v0,40014dfc <rise_vdd_and_freq+0x28>
40014dee:	eac0      	jalrc	v0
40014df0:	65b9      	move	sp,s1
}
40014df2:	6451      	restore	8,ra,s1
40014df4:	e8a0      	jrc	ra
40014df6:	0000      	addiu	s0,sp,0
40014df8:	640d      	restore	104
40014dfa:	bfc1      	lwu	a2,4(a3)
40014dfc:	6401      	restore	8
40014dfe:	bfc1      	lwu	a2,4(a3)

40014e00 <back_vdd_and_freq>:
40014e00:	64d3      	save	24,ra,s1

/******************************************************************************/
/*!
 * \par  Description:
 * 恢复vdd and freq
 * \param[in]    none
 * \param[out]   none
 * \return       none
 * \ingroup      udisk_main.c
 * \note
 *******************************************************************************/
void back_vdd_and_freq(void)
{
40014e02:	0104      	addiu	s1,sp,16
40014e04:	6c00      	li	a0,0
    sys_exit_high_powered();
40014e06:	6d03      	li	a1,3
40014e08:	6e00      	li	a2,0
40014e0a:	6f36      	li	a3,54
40014e0c:	b206      	lw	v0,40014e24 <back_vdd_and_freq+0x24>
40014e0e:	eac0      	jalrc	v0
40014e10:	6c0a      	li	a0,10
    adjust_freq_set_level(AP_FRONT_LOW_PRIO, FREQ_LEVEL7, FREQ_NULL);
40014e12:	6d07      	li	a1,7
40014e14:	6e00      	li	a2,0
40014e16:	6f05      	li	a3,5
40014e18:	b204      	lw	v0,40014e28 <back_vdd_and_freq+0x28>
40014e1a:	eac0      	jalrc	v0
40014e1c:	65b9      	move	sp,s1
}
40014e1e:	6451      	restore	8,ra,s1
40014e20:	e8a0      	jrc	ra
40014e22:	0000      	addiu	s0,sp,0
40014e24:	6401      	restore	8
40014e26:	bfc1      	lwu	a2,4(a3)
40014e28:	640d      	restore	104
40014e2a:	bfc1      	lwu	a2,4(a3)

40014e2c <detect_usb_line_status>:
40014e2c:	64d4      	save	32,ra,s1


/******************************************************************************/
/*!
 * \par  Description:
 *  检测是否有usb插入，确认是否进入U盘应用
 * \param[in]    none
 * \param[out]   none
 * \return       none
 * \ingroup      music
 * \note
 *******************************************************************************/
uint8 detect_usb_line_status(void)
{
40014e2e:	0104      	addiu	s1,sp,16
40014e30:	6a00      	li	v0,0
    //uint32 temp_save;
    //private_msg_t pri_msg;
    unsigned char plug_in = 0;
40014e32:	c140      	sb	v0,0(s1)
40014e34:	1800 53a9 	jal	40014ea4 <get_usb_port_state>
    if (get_usb_port_state() == USB_PORT_HOST)
40014e38:	6500      	nop
40014e3a:	7201      	cmpi	v0,1
40014e3c:	6758      	move	v0,t8
40014e3e:	5a01      	sltiu	v0,1
40014e40:	6018      	bteqz	40014e72 <detect_usb_line_status+0x46>
40014e42:	6c02      	li	a0,2
    {
        //检测到uhost插入
        if (sys_detect_disk(DRV_GROUP_STG_UHOST) == 0)
40014e44:	6d00      	li	a1,0
40014e46:	6e00      	li	a2,0
40014e48:	6f09      	li	a3,9
40014e4a:	b213      	lw	v0,40014e94 <detect_usb_line_status+0x68>
40014e4c:	eac0      	jalrc	v0
40014e4e:	651a      	move	t8,v0
40014e50:	6103      	btnez	40014e58 <detect_usb_line_status+0x2c>
40014e52:	6a00      	li	v0,0
        {
            return FALSE;
40014e54:	d941      	sw	v0,4(s1)
40014e56:	101a      	b	40014e8c <detect_usb_line_status+0x60>
40014e58:	b210      	lw	v0,40014e98 <detect_usb_line_status+0x6c>
        }

        key_peripheral_detect_handle(PER_DETECT_USB_FORCE);
40014e5a:	6782      	move	a0,v0
40014e5c:	6d00      	li	a1,0
40014e5e:	6e00      	li	a2,0
40014e60:	6f06      	li	a3,6
40014e62:	b20f      	lw	v0,40014e9c <detect_usb_line_status+0x70>
40014e64:	eac0      	jalrc	v0
40014e66:	6c1e      	li	a0,30

        sys_os_time_dly(30);
40014e68:	6d00      	li	a1,0
40014e6a:	6e00      	li	a2,0
40014e6c:	6f31      	li	a3,49
40014e6e:	b20a      	lw	v0,40014e94 <detect_usb_line_status+0x68>
40014e70:	eac0      	jalrc	v0
40014e72:	b20c      	lw	v0,40014ea0 <detect_usb_line_status+0x74>
    }

    //get usbcable plug status
    plug_in = (act_readb(DPDMCTRL) & (1 << DPDMCTRL_Plugin));
40014e74:	a240      	lbu	v0,0(v0)
40014e76:	6762      	move	v1,v0
40014e78:	6a40      	li	v0,64
40014e7a:	ea6c      	and	v0,v1
40014e7c:	c140      	sb	v0,0(s1)
40014e7e:	a140      	lbu	v0,0(s1)

    if (plug_in != 0)
40014e80:	2203      	beqz	v0,40014e88 <detect_usb_line_status+0x5c>
40014e82:	6a01      	li	v0,1
    {
        return TRUE;
40014e84:	d941      	sw	v0,4(s1)
40014e86:	1002      	b	40014e8c <detect_usb_line_status+0x60>
40014e88:	6a00      	li	v0,0
    }
    else
    {
        return FALSE;
40014e8a:	d941      	sw	v0,4(s1)
40014e8c:	9941      	lw	v0,4(s1)
    }
}
40014e8e:	65b9      	move	sp,s1
40014e90:	6452      	restore	16,ra,s1
40014e92:	e8a0      	jrc	ra
40014e94:	6401      	restore	8
40014e96:	bfc1      	lwu	a2,4(a3)
40014e98:	0000      	addiu	s0,sp,0
40014e9a:	4000      	addiu	s0,s0,0
40014e9c:	640d      	restore	104
40014e9e:	bfc1      	lwu	a2,4(a3)
40014ea0:	041a      	addiu	a0,sp,104
40014ea2:	c008      	sb	s0,8(s0)

40014ea4 <get_usb_port_state>:
40014ea4:	6492      	save	16,s1
} usb_port_state_e;

//获取当前usb端口设备状态
static inline uint8 get_usb_port_state(void)
{
40014ea6:	673d      	move	s1,sp
40014ea8:	b208      	lw	v0,40014ec8 <get_usb_port_state+0x24>
    if ((act_readb(DPDMCTRL) & 0x0f) != 0)
40014eaa:	a240      	lbu	v0,0(v0)
40014eac:	6762      	move	v1,v0
40014eae:	eb11      	zeb	v1
40014eb0:	6a0f      	li	v0,15
40014eb2:	ea6c      	and	v0,v1
40014eb4:	2203      	beqz	v0,40014ebc <get_usb_port_state+0x18>
40014eb6:	6a00      	li	v0,0
    {
        return USB_PORT_DEVICE;
40014eb8:	d940      	sw	v0,0(s1)
40014eba:	1002      	b	40014ec0 <get_usb_port_state+0x1c>
40014ebc:	6a01      	li	v0,1
    }
    else
    {
        return USB_PORT_HOST;
40014ebe:	d940      	sw	v0,0(s1)
40014ec0:	9940      	lw	v0,0(s1)
    }
}
40014ec2:	65b9      	move	sp,s1
40014ec4:	6412      	restore	16,s1
40014ec6:	e8a0      	jrc	ra
40014ec8:	041a      	addiu	a0,sp,104
40014eca:	c008      	sb	s0,8(s0)

40014ecc <switch_to_adfu>:
40014ecc:	64d3      	save	24,ra,s1




/******************************************************************************/
/*!
 * \par  Description:
 *  切换到adfu的处理
 * \param[in]    none
 * \param[out]   none
 * \return       none
 * \ingroup      usb
 * \note
 *******************************************************************************/
void switch_to_adfu(void)
{
40014ece:	0104      	addiu	s1,sp,16
40014ed0:	b316      	lw	v1,40014f28 <switch_to_adfu+0x5c>

    p_adfu_launcher = *(uint32*) 0xbfc002a0;
40014ed2:	b217      	lw	v0,40014f2c <switch_to_adfu+0x60>
40014ed4:	9a40      	lw	v0,0(v0)
40014ed6:	db40      	sw	v0,0(v1)
40014ed8:	6c0a      	li	a0,10

    //select hosc
    adjust_freq_set_level(AP_FRONT_LOW_PRIO, FREQ_LEVEL7, FREQ_NULL);
40014eda:	6d07      	li	a1,7
40014edc:	6e00      	li	a2,0
40014ede:	6f05      	li	a3,5
40014ee0:	b214      	lw	v0,40014f30 <switch_to_adfu+0x64>
40014ee2:	eac0      	jalrc	v0
40014ee4:	b414      	lw	a0,40014f30 <switch_to_adfu+0x64>

    //rise vcc 3.3v and vdd 1.3v, improve usb signal.xiaomaky.2012-9-11 11:55.
    act_writel(((act_readl(VOUT_CTL) & 0xFFFFFF80) | 0x6A), VOUT_CTL);
40014ee6:	b214      	lw	v0,40014f34 <switch_to_adfu+0x68>
40014ee8:	9a60      	lw	v1,0(v0)
40014eea:	6a80      	li	v0,128
40014eec:	ea4b      	neg	v0
40014eee:	eb4c      	and	v1,v0
40014ef0:	6a6a      	li	v0,106
40014ef2:	ea6d      	or	v0,v1
40014ef4:	dc40      	sw	v0,0(a0)
40014ef6:	6c03      	li	a0,3
    sys_mdelay(3);
40014ef8:	6d00      	li	a1,0
40014efa:	6e00      	li	a2,0
40014efc:	6f1d      	li	a3,29
40014efe:	b20f      	lw	v0,40014f38 <switch_to_adfu+0x6c>
40014f00:	eac0      	jalrc	v0
40014f02:	b30f      	lw	v1,40014f3c <switch_to_adfu+0x70>

    act_writel(0, INTC_CFG0);
40014f04:	6a00      	li	v0,0
40014f06:	db40      	sw	v0,0(v1)
40014f08:	b30e      	lw	v1,40014f40 <switch_to_adfu+0x74>
    act_writel(0, INTC_CFG1);
40014f0a:	6a00      	li	v0,0
40014f0c:	db40      	sw	v0,0(v1)
40014f0e:	b30e      	lw	v1,40014f44 <switch_to_adfu+0x78>
    act_writel(0, INTC_CFG2); //assgin usb intrrupt to IP2
40014f10:	6a00      	li	v0,0
40014f12:	db40      	sw	v0,0(v1)
40014f14:	b30d      	lw	v1,40014f48 <switch_to_adfu+0x7c>

    //act_writel(0x58, WD_CTL);
    act_writel(0x4D, WD_CTL);
40014f16:	6a4d      	li	v0,77
40014f18:	db40      	sw	v0,0(v1)
40014f1a:	b204      	lw	v0,40014f28 <switch_to_adfu+0x5c>

    p_adfu_launcher();
40014f1c:	9a40      	lw	v0,0(v0)
40014f1e:	eac0      	jalrc	v0
40014f20:	65b9      	move	sp,s1

}
40014f22:	6451      	restore	8,ra,s1
40014f24:	e8a0      	jrc	ra
40014f26:	0000      	addiu	s0,sp,0
40014f28:	5634      	slti	a2,52
40014f2a:	9fc1      	lw	a2,4(a3)
40014f2c:	02a0      	addiu	v0,sp,640
40014f2e:	bfc0      	lwu	a2,0(a3)
40014f30:	640d      	restore	104
40014f32:	bfc1      	lwu	a2,4(a3)
40014f34:	0000      	addiu	s0,sp,0
40014f36:	c002      	sb	s0,2(s0)
40014f38:	6401      	restore	8
40014f3a:	bfc1      	lwu	a2,4(a3)
40014f3c:	0008      	addiu	s0,sp,32
40014f3e:	c00b      	sb	s0,11(s0)
40014f40:	000c      	addiu	s0,sp,48
40014f42:	c00b      	sb	s0,11(s0)
40014f44:	0010      	addiu	s0,sp,64
40014f46:	c00b      	sb	s0,11(s0)
40014f48:	001c      	addiu	s0,sp,112
40014f4a:	c012      	sb	s0,18(s0)

40014f4c <main>:
40014f4c:	64f5      	save	40,ra,s0-s1

/******************************************************************************/
/*!
 * \par  Description:
 *    MainMenu 应用的入口函数和场景管理器模块
 * \param[in]    0, 无播放模式，1，正在播放模式，2，上一次播放模式
 * \param[out]   none
 * \return       the result
 * \retval       0 sucess
 * \retval       1 failed
 * \ingroup      module name
 * \par          exmaple code
 * \code
 *               list example code in here
 * \endcode
 * \note
 *******************************************************************************/
int main(int argc, const char *argv[])
{
40014f4e:	0104      	addiu	s1,sp,16
40014f50:	d986      	sw	a0,24(s1)
40014f52:	d9a7      	sw	a1,28(s1)
40014f54:	6c0c      	li	a0,12
    app_result_e result;
    uint8 real_charge_state;

    //初始化applib库，前台AP
    applib_init(APP_ID_UDISK, APP_TYPE_GUI);
40014f56:	6d01      	li	a1,1
40014f58:	b261      	lw	v0,400150dc <main+0x190>
40014f5a:	eac0      	jalrc	v0
40014f5c:	b261      	lw	v0,400150dc <main+0x190>

    //初始化软定时器
    init_app_timers(usb_app_timer_vector, COMMON_TIMER_COUNT + APP_TIMER_COUNT);
40014f5e:	6782      	move	a0,v0
40014f60:	6d06      	li	a1,6
40014f62:	b261      	lw	v0,400150e4 <main+0x198>
40014f64:	eac0      	jalrc	v0
40014f66:	6c00      	li	a0,0

    //初始化 applib 消息模块
    applib_message_init(NULL);
40014f68:	b260      	lw	v0,400150e8 <main+0x19c>
40014f6a:	eac0      	jalrc	v0
40014f6c:	b260      	lw	v0,400150e8 <main+0x19c>

    sys_timer_init();
40014f6e:	eac0      	jalrc	v0
40014f70:	b260      	lw	v0,400150ec <main+0x1a0>

    sys_vm_read(&g_setting_vars, VM_AP_SETTING, sizeof(setting_comval_t));
40014f72:	6782      	move	a0,v0
40014f74:	6d00      	li	a1,0
40014f76:	6e22      	li	a2,34
40014f78:	6f12      	li	a3,18
40014f7a:	b25f      	lw	v0,400150f4 <main+0x1a8>
40014f7c:	eac0      	jalrc	v0
40014f7e:	b25d      	lw	v0,400150f0 <main+0x1a4>

    com_set_sys_comval(&g_setting_vars.g_comval);
40014f80:	6782      	move	a0,v0
40014f82:	b25e      	lw	v0,400150f8 <main+0x1ac>
40014f84:	eac0      	jalrc	v0
40014f86:	f0c3 6a03 	li	v0,6339

    ui_set_backgd_color(Color_BACKCOLOR_def);//清为全黑屏 //2015-10-30
40014f8a:	6782      	move	a0,v0
40014f8c:	6d00      	li	a1,0
40014f8e:	6e00      	li	a2,0
40014f90:	6f14      	li	a3,20
40014f92:	b25b      	lw	v0,400150fc <main+0x1b0>
40014f94:	eac0      	jalrc	v0
40014f96:	6c00      	li	a0,0
    ui_clear_screen(NULL); //2015-10-30
40014f98:	6d00      	li	a1,0
40014f9a:	6e00      	li	a2,0
40014f9c:	6f12      	li	a3,18
40014f9e:	b258      	lw	v0,400150fc <main+0x1b0>
40014fa0:	eac0      	jalrc	v0
40014fa2:	1800 5375 	jal	40014dd4 <rise_vdd_and_freq>

    rise_vdd_and_freq();
40014fa6:	6500      	nop
40014fa8:	0a44      	la	v0,400150b8 <main+0x16c>

    /*读取ui资源文件*/
    ui_res_open("udisk.sty", UI_AP); //2015-11-03
40014faa:	6782      	move	a0,v0
40014fac:	6d00      	li	a1,0
40014fae:	6e00      	li	a2,0
40014fb0:	6f00      	li	a3,0
40014fb2:	b253      	lw	v0,400150fc <main+0x1b0>
40014fb4:	eac0      	jalrc	v0
40014fb6:	0a44      	la	v0,400150c4 <main+0x178>
    ui_res_open("common.sty", UI_COM); //2015-11-03
40014fb8:	6782      	move	a0,v0
40014fba:	6d01      	li	a1,1
40014fbc:	6e00      	li	a2,0
40014fbe:	6f00      	li	a3,0
40014fc0:	b24f      	lw	v0,400150fc <main+0x1b0>
40014fc2:	eac0      	jalrc	v0
40014fc4:	6c00      	li	a0,0

    //card_exist_flag = 1;

    key_chargeset(CHARGE_START, 0, 0);
40014fc6:	6d00      	li	a1,0
40014fc8:	6e00      	li	a2,0
40014fca:	6f01      	li	a3,1
40014fcc:	b24d      	lw	v0,40015100 <main+0x1b4>
40014fce:	eac0      	jalrc	v0
40014fd0:	b04d      	lw	s0,40015100 <main+0x1b4>
    charge_state = (battery_status_e) (uint32) key_chargeget(&real_charge_state);
40014fd2:	4142      	addiu	v0,s1,2
40014fd4:	6782      	move	a0,v0
40014fd6:	6d00      	li	a1,0
40014fd8:	6e00      	li	a2,0
40014fda:	6f00      	li	a3,0
40014fdc:	b249      	lw	v0,40015100 <main+0x1b4>
40014fde:	eac0      	jalrc	v0
40014fe0:	c040      	sb	v0,0(s0)
40014fe2:	1800 538b 	jal	40014e2c <detect_usb_line_status>

    usb_print("enter_usb!", 0, 0);

    if (detect_usb_line_status() != FALSE)
40014fe6:	6500      	nop
40014fe8:	651a      	move	t8,v0
40014fea:	603e      	bteqz	40015068 <main+0x11c>
40014fec:	b247      	lw	v0,40015108 <main+0x1bc>
    {
        config_disk_label();
40014fee:	eac0      	jalrc	v0
40014ff0:	0a38      	la	v0,400150cc <main+0x180>

        sys_drv_install(DRV_GROUP_UD, 0, "udisk.drv");
40014ff2:	6c05      	li	a0,5
40014ff4:	6d00      	li	a1,0
40014ff6:	67c2      	move	a2,v0
40014ff8:	6f0a      	li	a3,10
40014ffa:	b23f      	lw	v0,400150f4 <main+0x1a8>
40014ffc:	eac0      	jalrc	v0
40014ffe:	b244      	lw	v0,4001510c <main+0x1c0>

        //some config set
        set_usb_info();
40015000:	eac0      	jalrc	v0
40015002:	b444      	lw	a0,40015110 <main+0x1c4>

        //disable detect when init
        DISABLE_USB_DETECT();
40015004:	b243      	lw	v0,40015110 <main+0x1c4>
40015006:	9a60      	lw	v1,0(v0)
40015008:	6a40      	li	v0,64
4001500a:	ea6d      	or	v0,v1
4001500c:	dc40      	sw	v0,0(a0)
4001500e:	6c00      	li	a0,0
        //start init
        ud_module_start(NULL);
40015010:	6d00      	li	a1,0
40015012:	6e00      	li	a2,0
40015014:	6f01      	li	a3,1
40015016:	b240      	lw	v0,40015114 <main+0x1c8>
40015018:	eac0      	jalrc	v0
4001501a:	b43e      	lw	a0,40015110 <main+0x1c4>
        //enable detect after init
        ENABLE_USB_DETECT();
4001501c:	b23d      	lw	v0,40015110 <main+0x1c4>
4001501e:	9a60      	lw	v1,0(v0)
40015020:	6a41      	li	v0,65
40015022:	ea4b      	neg	v0
40015024:	ea6c      	and	v0,v1
40015026:	dc40      	sw	v0,0(a0)
40015028:	9946      	lw	v0,24(s1)

        result = usb_main_control(argc);
4001502a:	6782      	move	a0,v0
4001502c:	1800 545b 	jal	4001516c <usb_main_control>
40015030:	6500      	nop
40015032:	c940      	sh	v0,0(s1)
40015034:	b437      	lw	a0,40015110 <main+0x1c4>

        //disable detect when exit (need init)
        DISABLE_USB_DETECT();
40015036:	b237      	lw	v0,40015110 <main+0x1c4>
40015038:	9a60      	lw	v1,0(v0)
4001503a:	6a40      	li	v0,64
4001503c:	ea6d      	or	v0,v1
4001503e:	dc40      	sw	v0,0(a0)
40015040:	6c00      	li	a0,0
        //stop and exit
        ud_module_stop();
40015042:	6d00      	li	a1,0
40015044:	6e00      	li	a2,0
40015046:	6f02      	li	a3,2
40015048:	b233      	lw	v0,40015114 <main+0x1c8>
4001504a:	eac0      	jalrc	v0
4001504c:	b431      	lw	a0,4001510c <main+0x1c0>
        //enable detect after init
        ENABLE_USB_DETECT();
4001504e:	b231      	lw	v0,40015110 <main+0x1c4>
40015050:	9a60      	lw	v1,0(v0)
40015052:	6a41      	li	v0,65
40015054:	ea4b      	neg	v0
40015056:	ea6c      	and	v0,v1
40015058:	dc40      	sw	v0,0(a0)
4001505a:	6c05      	li	a0,5

        sys_drv_uninstall(DRV_GROUP_UD);
4001505c:	6d00      	li	a1,0
4001505e:	6e00      	li	a2,0
40015060:	6f0b      	li	a3,11
40015062:	b225      	lw	v0,400150f4 <main+0x1a8>
40015064:	eac0      	jalrc	v0
40015066:	1005      	b	40015072 <main+0x126>
40015068:	9946      	lw	v0,24(s1)

    }
    else
    {   
        //Add by yanghong
        result = udisk_exit_all(argc);
4001506a:	6782      	move	a0,v0
4001506c:	b22b      	lw	v0,40015118 <main+0x1cc>
4001506e:	eac0      	jalrc	v0
40015070:	c940      	sh	v0,0(s1)
40015072:	a960      	lhu	v1,0(s1)
    }

    //switch to adfu and upgrade
    if (result == RESULT_AUTO_UPGRADE)
40015074:	f030 6a04 	li	v0,32804
40015078:	ea6e      	xor	v0,v1
4001507a:	5a01      	sltiu	v0,1
4001507c:	6003      	bteqz	40015084 <main+0x138>
4001507e:	1800 53b3 	jal	40014ecc <switch_to_adfu>
    {
        switch_to_adfu();
40015082:	6500      	nop
40015084:	6c00      	li	a0,0
    }

    if (result == RESULT_ENTER_STUB_DEBUG)
    {
        usb_print("open stub", 0, 0);

        //        result = com_sys_install_stub();
    }

#ifdef SUPPORT_LCD_RAM0
    ui_set_display_buf(LCD_RAM1_INDEX);
#endif

    ui_res_close(UI_AP);
40015086:	6d00      	li	a1,0
40015088:	6e00      	li	a2,0
4001508a:	6f01      	li	a3,1
4001508c:	b21c      	lw	v0,400150fc <main+0x1b0>
4001508e:	eac0      	jalrc	v0
40015090:	6c01      	li	a0,1
    ui_res_close(UI_COM);
40015092:	6d00      	li	a1,0
40015094:	6e00      	li	a2,0
40015096:	6f01      	li	a3,1
40015098:	b219      	lw	v0,400150fc <main+0x1b0>
4001509a:	eac0      	jalrc	v0
4001509c:	b220      	lw	v0,40015118 <main+0x1cc>

    sys_timer_exit();
4001509e:	eac0      	jalrc	v0
400150a0:	1800 5380 	jal	40014e00 <back_vdd_and_freq>

    back_vdd_and_freq();
400150a4:	6500      	nop
400150a6:	b21f      	lw	v0,40015120 <main+0x1d4>

    applib_quit();
400150a8:	eac0      	jalrc	v0
400150aa:	a940      	lhu	v0,0(s1)

    return result;
400150ac:	651a      	move	t8,v0
400150ae:	6758      	move	v0,t8
}
400150b0:	65b9      	move	sp,s1
400150b2:	6473      	restore	24,ra,s0-s1
400150b4:	e8a0      	jrc	ra
400150b6:	0000      	addiu	s0,sp,0
400150b8:	6475      	restore	40,ra,s0-s1
400150ba:	7369      	cmpi	v1,105
400150bc:	2e6b      	bnez	a2,40015194 <usb_main_control+0x28>
400150be:	7473      	cmpi	a0,115
400150c0:	0079      	addiu	s0,sp,484
400150c2:	0000      	addiu	s0,sp,0
400150c4:	6f63      	li	a3,99
400150c6:	6d6d      	li	a1,109
400150c8:	6e6f      	li	a2,111
400150ca:	732e      	cmpi	v1,46
400150cc:	7974      	sd	v1,160(s1)
400150ce:	0000      	addiu	s0,sp,0
400150d0:	6475      	restore	40,ra,s0-s1
400150d2:	7369      	cmpi	v1,105
400150d4:	2e6b      	bnez	a2,400151ac <usb_main_control+0x40>
400150d6:	7264      	cmpi	v0,100
400150d8:	0076      	addiu	s0,sp,472
400150da:	0000      	addiu	s0,sp,0
400150dc:	4601      	addiu	s0,a2,1
400150de:	4841      	addiu	s0,65
400150e0:	5638      	slti	a2,56
400150e2:	9fc1      	lw	a2,4(a3)
400150e4:	476d      	addiu	v1,a3,-3
400150e6:	4845      	addiu	s0,69
400150e8:	4601      	addiu	s0,a2,1
400150ea:	4849      	addiu	s0,73
400150ec:	46b5      	daddiu	a1,a2,5
400150ee:	4861      	addiu	s0,97
400150f0:	5610      	slti	a2,16
400150f2:	9fc1      	lw	a2,4(a3)
400150f4:	6401      	restore	8
400150f6:	bfc1      	lwu	a2,4(a3)
400150f8:	4691      	daddiu	a0,a2,1
400150fa:	4861      	addiu	s0,97
400150fc:	6bdd      	li	v1,221
400150fe:	bfc1      	lwu	a2,4(a3)
40015100:	640d      	restore	104
40015102:	bfc1      	lwu	a2,4(a3)
40015104:	55c4      	slti	a1,196
40015106:	9fc1      	lw	a2,4(a3)
40015108:	4e21      	addiu	a2,33
4001510a:	4005      	addiu	s0,s0,5
4001510c:	4c01      	addiu	a0,1
4001510e:	4005      	addiu	s0,s0,5
40015110:	aa5c      	lhu	v0,56(v0)
40015112:	9fc1      	lw	a2,4(a3)
40015114:	6bd9      	li	v1,217
40015116:	bfc1      	lwu	a2,4(a3)
40015118:	5041      	slti	s0,65
4001511a:	4005      	addiu	s0,s0,5
4001511c:	478d      	addiu	a0,a3,-3
4001511e:	4861      	addiu	s0,97
40015120:	46f9      	daddiu	a3,a2,-7
40015122:	4841      	addiu	s0,65

40015124 <udisk_timer_exit>:
40015124:	64d3      	save	24,ra,s1

void udisk_timer_exit(void)
{
40015126:	0104      	addiu	s1,sp,16
40015128:	b20e      	lw	v0,40015160 <udisk_timer_exit+0x3c>
    if (timer_usb_connect_id != -1)
4001512a:	8260      	lb	v1,0(v0)
4001512c:	6a01      	li	v0,1
4001512e:	ea4b      	neg	v0
40015130:	ea6e      	xor	v0,v1
40015132:	5a01      	sltiu	v0,1
40015134:	6105      	btnez	40015140 <udisk_timer_exit+0x1c>
40015136:	b20b      	lw	v0,40015160 <udisk_timer_exit+0x3c>
    {
        kill_app_timer(timer_usb_connect_id);
40015138:	8240      	lb	v0,0(v0)
4001513a:	6782      	move	a0,v0
4001513c:	b20a      	lw	v0,40015164 <udisk_timer_exit+0x40>
4001513e:	eac0      	jalrc	v0
40015140:	b20a      	lw	v0,40015164 <udisk_timer_exit+0x40>
    }
    if (timer_usb_battery_id != -1)
40015142:	8260      	lb	v1,0(v0)
40015144:	6a01      	li	v0,1
40015146:	ea4b      	neg	v0
40015148:	ea6e      	xor	v0,v1
4001514a:	5a01      	sltiu	v0,1
4001514c:	6105      	btnez	40015158 <udisk_timer_exit+0x34>
4001514e:	b207      	lw	v0,40015168 <udisk_timer_exit+0x44>
    {
        kill_app_timer(timer_usb_battery_id);
40015150:	8240      	lb	v0,0(v0)
40015152:	6782      	move	a0,v0
40015154:	b204      	lw	v0,40015164 <udisk_timer_exit+0x40>
40015156:	eac0      	jalrc	v0
40015158:	65b9      	move	sp,s1
    }
}
4001515a:	6451      	restore	8,ra,s1
4001515c:	e8a0      	jrc	ra
4001515e:	0000      	addiu	s0,sp,0
40015160:	55c7      	slti	a1,199
40015162:	9fc1      	lw	a2,4(a3)
40015164:	473d      	daddiu	s1,a3,-3
40015166:	4845      	addiu	s0,69
40015168:	55c8      	slti	a1,200
4001516a:	9fc1      	lw	a2,4(a3)

4001516c <usb_main_control>:
4001516c:	64d7      	save	56,ra,s1

/******************************************************************************/
/*!
 * \par  Description:
 *    MainMenu 读取应用VM全局变量,初始化全局变量
 * \param[in]    none
 * \param[out]   none
 * \return       none
 * \ingroup      mainmenu
 * \note
 *******************************************************************************/
app_result_e usb_main_control(int argc)
{
4001516e:	0104      	addiu	s1,sp,16
40015170:	d98a      	sw	a0,40(s1)
40015172:	6a00      	li	v0,0
    ureader_status_t udisk_status;
    app_result_e result = RESULT_NULL;
40015174:	c94c      	sh	v0,24(s1)
40015176:	6a00      	li	v0,0
    uint8 count_num = 0;
40015178:	c15a      	sb	v0,26(s1)
4001517a:	6a00      	li	v0,0
    uint16 wait_time_before_enum = 0;
4001517c:	c94e      	sh	v0,28(s1)
4001517e:	b355      	lw	v1,400152d0 <.L48+0x14>
    timer_usb_connect_id = -1;
40015180:	6a01      	li	v0,1
40015182:	ea4b      	neg	v0
40015184:	c340      	sb	v0,0(v1)
40015186:	b354      	lw	v1,400152d4 <.L48+0x18>
    timer_usb_battery_id = -1;
40015188:	6a01      	li	v0,1
4001518a:	ea4b      	neg	v0
4001518c:	c340      	sb	v0,0(v1)
4001518e:	b353      	lw	v1,400152d8 <.L48+0x1c>
    timer_usb_state_check_id = -1;
40015190:	6a01      	li	v0,1
40015192:	ea4b      	neg	v0
40015194:	c340      	sb	v0,0(v1)
40015196:	b352      	lw	v1,400152dc <.L48+0x20>
    time_count = 0;
40015198:	6a00      	li	v0,0
4001519a:	c340      	sb	v0,0(v1)
4001519c:	b351      	lw	v1,400152e0 <.L48+0x24>
    line_status_bak = -1;
4001519e:	6a01      	li	v0,1
400151a0:	ea4b      	neg	v0
400151a2:	db40      	sw	v0,0(v1)
400151a4:	b350      	lw	v1,400152e4 <.L48+0x28>
    charge_state_bak = BAT_NORMAL;
400151a6:	6a00      	li	v0,0
400151a8:	c340      	sb	v0,0(v1)
400151aa:	b250      	lw	v0,400152e8 <.L48+0x2c>
    
    //调用usb初始化函数
    udisk_init_all(); //2015-11-10
400151ac:	eac0      	jalrc	v0
400151ae:	6a00      	li	v0,0
    for (count_num = 0; count_num < 0x7f; count_num++)
400151b0:	c15a      	sb	v0,26(s1)
400151b2:	a15a      	lbu	v0,26(s1)
400151b4:	5a7f      	sltiu	v0,127
400151b6:	6004      	bteqz	400151c0 <usb_main_control+0x54>
400151b8:	a15a      	lbu	v0,26(s1)
400151ba:	4241      	addiu	v0,v0,1
400151bc:	c15a      	sb	v0,26(s1)
400151be:	17f9      	b	400151b2 <usb_main_control+0x46>
400151c0:	b24b      	lw	v0,400152ec <.L48+0x30>
    {
        ; //delay
    }

    //配置usb自定义命令，必须放在ud_module_start之后
#ifdef SUPPORT_USER_DEF_USBCMD
    ud_set_usrcmd(0x00, ACT_SET_TIME, set_time_date);
400151c2:	6c00      	li	a0,0
400151c4:	6db0      	li	a1,176
400151c6:	67c2      	move	a2,v0
400151c8:	6f08      	li	a3,8
400151ca:	b24a      	lw	v0,400152f0 <.L48+0x34>
400151cc:	eac0      	jalrc	v0
400151ce:	1800 5333 	jal	40014ccc <msgmanager>
    //ud_set_usrcmd(0x03, ACT_SET_TIME, set_time_date);
#endif

    //udisk ap主函数体
    while (1)
    {
        msgmanager(); //消息解释
400151d2:	6500      	nop
400151d4:	b248      	lw	v0,400152f4 <.L48+0x38>

        if (iscardout == 1)
400151d6:	a240      	lbu	v0,0(v0)
400151d8:	7201      	cmpi	v0,1
400151da:	6758      	move	v0,t8
400151dc:	5a01      	sltiu	v0,1
400151de:	6009      	bteqz	400151f2 <usb_main_control+0x86>
400151e0:	6c07      	li	a0,7
        {
            ud_set_cmd(SET_CARD_INOUT, 0);
400151e2:	6d00      	li	a1,0
400151e4:	6e00      	li	a2,0
400151e6:	6f06      	li	a3,6
400151e8:	b242      	lw	v0,400152f0 <.L48+0x34>
400151ea:	eac0      	jalrc	v0
400151ec:	b342      	lw	v1,400152f0 <.L48+0x34>
            iscardout = 0;
400151ee:	6a00      	li	v0,0
400151f0:	c340      	sb	v0,0(v1)
400151f2:	b242      	lw	v0,400152f8 <.L48+0x3c>
        }

        if (iscardin == 1)
400151f4:	a240      	lbu	v0,0(v0)
400151f6:	7201      	cmpi	v0,1
400151f8:	6758      	move	v0,t8
400151fa:	5a01      	sltiu	v0,1
400151fc:	6009      	bteqz	40015210 <usb_main_control+0xa4>
400151fe:	6c07      	li	a0,7
        {

            ud_set_cmd(SET_CARD_INOUT, 1);
40015200:	6d01      	li	a1,1
40015202:	6e00      	li	a2,0
40015204:	6f06      	li	a3,6
40015206:	b23b      	lw	v0,400152f0 <.L48+0x34>
40015208:	eac0      	jalrc	v0
4001520a:	b33c      	lw	v1,400152f8 <.L48+0x3c>
            iscardin = 0;
4001520c:	6a00      	li	v0,0
4001520e:	c340      	sb	v0,0(v1)
40015210:	6791      	move	a0,s1
        }

        //       ud_get_status(&g_udisk_status);

#ifndef _CARD_BASE_
        if ((wait_time_before_enum > 400) && (g_udisk_status.suspend_flag == 0) && (g_udisk_status.reset_count == 0))
        {
            break; //插入的是充电器,插上usb后长时间没有bus reset
        }
#endif

        ud_get_status(&udisk_status);
40015212:	6d00      	li	a1,0
40015214:	6e00      	li	a2,0
40015216:	6f00      	li	a3,0
40015218:	b236      	lw	v0,400152f0 <.L48+0x34>
4001521a:	eac0      	jalrc	v0
4001521c:	9940      	lw	v0,0(s1)
        if ((udisk_status.line_sta == 0x01) || (udisk_status.line_sta == 0x02))
4001521e:	7201      	cmpi	v0,1
40015220:	6758      	move	v0,t8
40015222:	5a01      	sltiu	v0,1
40015224:	6146      	btnez	400152b2 <usb_main_control+0x146>
40015226:	9940      	lw	v0,0(s1)
40015228:	7202      	cmpi	v0,2
4001522a:	6758      	move	v0,t8
4001522c:	5a01      	sltiu	v0,1
4001522e:	6141      	btnez	400152b2 <usb_main_control+0x146>
40015230:	b233      	lw	v0,400152fc <.L48+0x40>
        {
            break;
        }

        //  1:拔线；2:挂起
        /*     if((g_udisk_status.line_sta== 0x01)||(g_udisk_status.line_sta == 0x02))
         {
         break;
         }*/

        //switch to adfu
        if (g_udisk_status.switch_to_adfu == 0x01)
40015232:	9a43      	lw	v0,12(v0)
40015234:	7201      	cmpi	v0,1
40015236:	6758      	move	v0,t8
40015238:	5a01      	sltiu	v0,1
4001523a:	6005      	bteqz	40015246 <usb_main_control+0xda>
4001523c:	f7cf 6a1c 	li	v0,32732
        {
            //固件升级
            result = RESULT_AUTO_UPGRADE;
40015240:	ea4b      	neg	v0
40015242:	c94c      	sh	v0,24(s1)
40015244:	103b      	b	400152bc <.L48>
            goto exit_usb;
40015246:	b22e      	lw	v0,400152fc <.L48+0x40>
        }
        else if (g_udisk_status.switch_to_adfu == 0x02)
40015248:	9a43      	lw	v0,12(v0)
4001524a:	7202      	cmpi	v0,2
4001524c:	6758      	move	v0,t8
4001524e:	5a01      	sltiu	v0,1
40015250:	6005      	bteqz	4001525c <usb_main_control+0xf0>
40015252:	f7ef 6a04 	li	v0,32740
        {

            //进入stub应用程序
            result = RESULT_ENTER_STUB_DEBUG;
40015256:	ea4b      	neg	v0
40015258:	c94c      	sh	v0,24(s1)
4001525a:	1030      	b	400152bc <.L48>
            goto exit_usb;
4001525c:	b228      	lw	v0,400152fc <.L48+0x40>
        }
        else
        {
            ;//do nothing
        }

        if (g_udisk_status.remove_card == 1)
4001525e:	9a45      	lw	v0,20(v0)
40015260:	7201      	cmpi	v0,1
40015262:	6758      	move	v0,t8
40015264:	5a01      	sltiu	v0,1
40015266:	6006      	bteqz	40015274 <usb_main_control+0x108>
40015268:	6c07      	li	a0,7
        {
            ud_set_cmd(SET_CARD_INOUT, 0);
4001526a:	6d00      	li	a1,0
4001526c:	6e00      	li	a2,0
4001526e:	6f06      	li	a3,6
40015270:	b220      	lw	v0,400152f0 <.L48+0x34>
40015272:	eac0      	jalrc	v0
40015274:	b223      	lw	v0,400152fc <.L48+0x40>
        }

        display();
40015276:	eac0      	jalrc	v0
40015278:	b223      	lw	v0,40015300 <.L48+0x44>

        if (((returnkey_press == 1) && (g_udisk_status.line_sta == 0)) || (g_udisk_status.line_sta == 0x90))
4001527a:	a240      	lbu	v0,0(v0)
4001527c:	7201      	cmpi	v0,1
4001527e:	6758      	move	v0,t8
40015280:	5a01      	sltiu	v0,1
40015282:	6004      	bteqz	4001528c <usb_main_control+0x120>
40015284:	b21e      	lw	v0,400152fc <.L48+0x40>
40015286:	9a40      	lw	v0,0(v0)
40015288:	2a01      	bnez	v0,4001528c <usb_main_control+0x120>
4001528a:	1013      	b	400152b2 <usb_main_control+0x146>
4001528c:	b21c      	lw	v0,400152fc <.L48+0x40>
4001528e:	9a40      	lw	v0,0(v0)
40015290:	7290      	cmpi	v0,144
40015292:	6758      	move	v0,t8
40015294:	5a01      	sltiu	v0,1
40015296:	610d      	btnez	400152b2 <usb_main_control+0x146>
40015298:	b31b      	lw	v1,40015304 <.L48+0x48>
        {
            break;
        }
        else
        {
            returnkey_press = 0;
4001529a:	6a00      	li	v0,0
4001529c:	c340      	sb	v0,0(v1)
4001529e:	6c01      	li	a0,1
        }
        //挂起10ms，多任务调度
        sys_os_time_dly(1);
400152a0:	6d00      	li	a1,0
400152a2:	6e00      	li	a2,0
400152a4:	6f31      	li	a3,49
400152a6:	b219      	lw	v0,40015308 <.L48+0x4c>
400152a8:	eac0      	jalrc	v0
400152aa:	a94e      	lhu	v0,28(s1)
        wait_time_before_enum++;
400152ac:	4241      	addiu	v0,v0,1
400152ae:	c94e      	sh	v0,28(s1)
400152b0:	178e      	b	400151ce <usb_main_control+0x62>
400152b2:	994a      	lw	v0,40(s1)

    }

    result = udisk_exit_all(argc);
400152b4:	6782      	move	a0,v0
400152b6:	b216      	lw	v0,4001530c <.L48+0x50>
400152b8:	eac0      	jalrc	v0
400152ba:	c94c      	sh	v0,24(s1)

400152bc <.L48>:
400152bc:	1800 5449 	jal	40015124 <udisk_timer_exit>

    exit_usb:

    udisk_timer_exit();
400152c0:	6500      	nop
400152c2:	a94c      	lhu	v0,24(s1)
    return result;
400152c4:	651a      	move	t8,v0
400152c6:	6758      	move	v0,t8

}
400152c8:	65b9      	move	sp,s1
400152ca:	6455      	restore	40,ra,s1
400152cc:	e8a0      	jrc	ra
400152ce:	0000      	addiu	s0,sp,0
400152d0:	55c7      	slti	a1,199
400152d2:	9fc1      	lw	a2,4(a3)
400152d4:	55c8      	slti	a1,200
400152d6:	9fc1      	lw	a2,4(a3)
400152d8:	55c9      	slti	a1,201
400152da:	9fc1      	lw	a2,4(a3)
400152dc:	55c6      	slti	a1,198
400152de:	9fc1      	lw	a2,4(a3)
400152e0:	55e4      	slti	a1,228
400152e2:	9fc1      	lw	a2,4(a3)
400152e4:	55c5      	slti	a1,197
400152e6:	9fc1      	lw	a2,4(a3)
400152e8:	4f01      	addiu	a3,1
400152ea:	4005      	addiu	s0,s0,5
400152ec:	6b25      	li	v1,37
400152ee:	bfc1      	lwu	a2,4(a3)
400152f0:	6bd9      	li	v1,217
400152f2:	bfc1      	lwu	a2,4(a3)
400152f4:	55c1      	slti	a1,193
400152f6:	9fc1      	lw	a2,4(a3)
400152f8:	55c2      	slti	a1,194
400152fa:	9fc1      	lw	a2,4(a3)
400152fc:	55cc      	slti	a1,204
400152fe:	9fc1      	lw	a2,4(a3)
40015300:	67e9      	move	a3,t1
40015302:	bfc1      	lwu	a2,4(a3)
40015304:	55c0      	slti	a1,192
40015306:	9fc1      	lw	a2,4(a3)
40015308:	6401      	restore	8
4001530a:	bfc1      	lwu	a2,4(a3)
4001530c:	5041      	slti	s0,65
4001530e:	4005      	addiu	s0,s0,5

40015310 <udisk_key_map_list>:
40015310:	0007 0400 2d01 0000 0000 0000               .....-......

4001531c <style_usb_point>:
4001531c:	1006 1005 1004 1003 1002 0000               ............
Disassembly of section BANK_CONTROL_1_1:

40054c00 <set_usb_info>:
40054c00:	64d3      	save	24,ra,s1
 * \ingroup      udisk_main.c
 * \note
 *******************************************************************************/
void set_usb_info(void)
{
40054c02:	0104      	addiu	s1,sp,16
40054c04:	6aff      	li	v0,255
    //uint8 info_str[16];

    //vid
    com_get_config_struct(USB_VID, g_info_str, 6);
40054c06:	4a09      	addiu	v0,9
40054c08:	b326      	lw	v1,40054ca0 <set_usb_info+0xa0>
40054c0a:	6782      	move	a0,v0
40054c0c:	67a3      	move	a1,v1
40054c0e:	6e06      	li	a2,6
40054c10:	b225      	lw	v0,40054ca4 <set_usb_info+0xa4>
40054c12:	eac0      	jalrc	v0
40054c14:	b223      	lw	v0,40054c9c <set_usb_info+0x9c>

    ud_set_config(0, g_info_str, 6);
40054c16:	6c00      	li	a0,0
40054c18:	67a2      	move	a1,v0
40054c1a:	6e06      	li	a2,6
40054c1c:	6f03      	li	a3,3
40054c1e:	b223      	lw	v0,40054ca8 <set_usb_info+0xa8>
40054c20:	eac0      	jalrc	v0
40054c22:	6aff      	li	v0,255

    //pid
    com_get_config_struct(USB_CARDREADER_PID, g_info_str, 6);
40054c24:	4a0b      	addiu	v0,11
40054c26:	b31f      	lw	v1,40054ca0 <set_usb_info+0xa0>
40054c28:	6782      	move	a0,v0
40054c2a:	67a3      	move	a1,v1
40054c2c:	6e06      	li	a2,6
40054c2e:	b21e      	lw	v0,40054ca4 <set_usb_info+0xa4>
40054c30:	eac0      	jalrc	v0
40054c32:	b21c      	lw	v0,40054ca0 <set_usb_info+0xa0>

    ud_set_config(1, g_info_str, 6);
40054c34:	6c01      	li	a0,1
40054c36:	67a2      	move	a1,v0
40054c38:	6e06      	li	a2,6
40054c3a:	6f03      	li	a3,3
40054c3c:	b21b      	lw	v0,40054ca8 <set_usb_info+0xa8>
40054c3e:	eac0      	jalrc	v0
40054c40:	6aff      	li	v0,255

    //vendor
    com_get_config_struct(INF_USB_VENDOR, g_info_str, 8);
40054c42:	4a0d      	addiu	v0,13
40054c44:	b317      	lw	v1,40054ca0 <set_usb_info+0xa0>
40054c46:	6782      	move	a0,v0
40054c48:	67a3      	move	a1,v1
40054c4a:	6e08      	li	a2,8
40054c4c:	b216      	lw	v0,40054ca4 <set_usb_info+0xa4>
40054c4e:	eac0      	jalrc	v0
40054c50:	b214      	lw	v0,40054c9c <set_usb_info+0x9c>

    ud_set_config(2, g_info_str, 8);
40054c52:	6c02      	li	a0,2
40054c54:	67a2      	move	a1,v0
40054c56:	6e08      	li	a2,8
40054c58:	6f03      	li	a3,3
40054c5a:	b214      	lw	v0,40054ca8 <set_usb_info+0xa8>
40054c5c:	eac0      	jalrc	v0
40054c5e:	6aff      	li	v0,255

    //product name
    com_get_config_struct(INF_CARDREADER_PRODUCT_NAME, g_info_str, 16);
40054c60:	4a11      	addiu	v0,17
40054c62:	b310      	lw	v1,40054ca0 <set_usb_info+0xa0>
40054c64:	6782      	move	a0,v0
40054c66:	67a3      	move	a1,v1
40054c68:	6e10      	li	a2,16
40054c6a:	b20f      	lw	v0,40054ca4 <set_usb_info+0xa4>
40054c6c:	eac0      	jalrc	v0
40054c6e:	b20d      	lw	v0,40054ca0 <set_usb_info+0xa0>

    ud_set_config(3, g_info_str, 16);
40054c70:	6c03      	li	a0,3
40054c72:	67a2      	move	a1,v0
40054c74:	6e10      	li	a2,16
40054c76:	6f03      	li	a3,3
40054c78:	b20c      	lw	v0,40054ca8 <set_usb_info+0xa8>
40054c7a:	eac0      	jalrc	v0
40054c7c:	6aff      	li	v0,255

    ////CMD_Inquiry_information_FOB
    com_get_config_struct(INF_INQUIRY_INFORMATION_FOB, g_info_str, 52);
40054c7e:	4a13      	addiu	v0,19
40054c80:	b308      	lw	v1,40054ca0 <set_usb_info+0xa0>
40054c82:	6782      	move	a0,v0
40054c84:	67a3      	move	a1,v1
40054c86:	6e34      	li	a2,52
40054c88:	b207      	lw	v0,40054ca4 <set_usb_info+0xa4>
40054c8a:	eac0      	jalrc	v0
40054c8c:	b205      	lw	v0,40054c9c <set_usb_info+0x9c>

    ud_set_config(4, g_info_str, 52);
40054c8e:	6c04      	li	a0,4
40054c90:	67a2      	move	a1,v0
40054c92:	6e34      	li	a2,52
40054c94:	6f03      	li	a3,3
40054c96:	b205      	lw	v0,40054ca8 <set_usb_info+0xa8>
40054c98:	eac0      	jalrc	v0
40054c9a:	65b9      	move	sp,s1

}
40054c9c:	6451      	restore	8,ra,s1
40054c9e:	e8a0      	jrc	ra
40054ca0:	5698      	slti	a2,152
40054ca2:	9fc1      	lw	a2,4(a3)
40054ca4:	464d      	addiu	v0,a2,-3
40054ca6:	4851      	addiu	s0,81
40054ca8:	6bd9      	li	v1,217
40054caa:	bfc1      	lwu	a2,4(a3)

40054cac <label_fs_init>:
40054cac:	64d5      	save	40,ra,s1


/******************************************************************************/
/*!
 * \par  Description:
 *  装载物理介质和文件系统
 * \param[in]    disk_type 磁盘类型
 * \param[out]   none
 * \return       none
 * \ingroup      config
 * \note
 *******************************************************************************/
int32 label_fs_init(uint8 disk_type)
{
40054cae:	0104      	addiu	s1,sp,16
40054cb0:	6744      	move	v0,a0
40054cb2:	c158      	sb	v0,24(s1)
40054cb4:	a158      	lbu	v0,24(s1)
    uint8 drv_type;
    uint8 *drv_name;
    int32 file_sys_id;

    if (disk_type == DISK_H)
40054cb6:	7210      	cmpi	v0,16
40054cb8:	6758      	move	v0,t8
40054cba:	5a01      	sltiu	v0,1
40054cbc:	6005      	bteqz	40054cc8 <label_fs_init+0x1c>
40054cbe:	6a01      	li	v0,1
    {
        drv_type = DRV_GROUP_STG_CARD;
40054cc0:	c140      	sb	v0,0(s1)
40054cc2:	b21c      	lw	v0,40054d30 <label_fs_init+0x84>
        drv_name = (uint8 *) card_drv_name;
40054cc4:	d941      	sw	v0,4(s1)
40054cc6:	1004      	b	40054cd0 <label_fs_init+0x24>
40054cc8:	6a01      	li	v0,1
    }
    else
    {
        return -1;
40054cca:	ea4b      	neg	v0
40054ccc:	d943      	sw	v0,12(s1)
40054cce:	102b      	b	40054d26 <label_fs_init+0x7a>
40054cd0:	a140      	lbu	v0,0(s1)
    }

    //装载物理介质
    if (sys_drv_install(drv_type, 0, drv_name) != 0)
40054cd2:	9961      	lw	v1,4(s1)
40054cd4:	6782      	move	a0,v0
40054cd6:	6d00      	li	a1,0
40054cd8:	67c3      	move	a2,v1
40054cda:	6f0a      	li	a3,10
40054cdc:	b216      	lw	v0,40054d34 <label_fs_init+0x88>
40054cde:	eac0      	jalrc	v0
40054ce0:	651a      	move	t8,v0
40054ce2:	6004      	bteqz	40054cec <label_fs_init+0x40>
40054ce4:	6a02      	li	v0,2
    {
        return -2;
40054ce6:	ea4b      	neg	v0
40054ce8:	d943      	sw	v0,12(s1)
40054cea:	101d      	b	40054d26 <label_fs_init+0x7a>
40054cec:	a140      	lbu	v0,0(s1)
    }

    //装载文件系统
    file_sys_id = sys_mount_fs(drv_type, disk_type, 0);
40054cee:	a178      	lbu	v1,24(s1)
40054cf0:	6782      	move	a0,v0
40054cf2:	67a3      	move	a1,v1
40054cf4:	6e00      	li	a2,0
40054cf6:	6f29      	li	a3,41
40054cf8:	b20f      	lw	v0,40054d34 <label_fs_init+0x88>
40054cfa:	eac0      	jalrc	v0
40054cfc:	ea91      	seb	v0
40054cfe:	d942      	sw	v0,8(s1)
40054d00:	9962      	lw	v1,8(s1)

    if (file_sys_id == -1)
40054d02:	6a01      	li	v0,1
40054d04:	ea4b      	neg	v0
40054d06:	ea6e      	xor	v0,v1
40054d08:	5a01      	sltiu	v0,1
40054d0a:	600b      	bteqz	40054d22 <label_fs_init+0x76>
40054d0c:	a140      	lbu	v0,0(s1)
    {
        //卸载驱动程序
        sys_drv_uninstall(drv_type);
40054d0e:	6782      	move	a0,v0
40054d10:	6d00      	li	a1,0
40054d12:	6e00      	li	a2,0
40054d14:	6f0b      	li	a3,11
40054d16:	b208      	lw	v0,40054d34 <label_fs_init+0x88>
40054d18:	eac0      	jalrc	v0
40054d1a:	6a03      	li	v0,3
        return -3;
40054d1c:	ea4b      	neg	v0
40054d1e:	d943      	sw	v0,12(s1)
40054d20:	1002      	b	40054d26 <label_fs_init+0x7a>
40054d22:	9942      	lw	v0,8(s1)
    }

    return file_sys_id;
40054d24:	d943      	sw	v0,12(s1)
40054d26:	9943      	lw	v0,12(s1)
}
40054d28:	65b9      	move	sp,s1
40054d2a:	6453      	restore	24,ra,s1
40054d2c:	e8a0      	jrc	ra
40054d2e:	0000      	addiu	s0,sp,0
40054d30:	4ef4      	addiu	a2,-12
40054d32:	4005      	addiu	s0,s0,5
40054d34:	6401      	restore	8
40054d36:	bfc1      	lwu	a2,4(a3)

40054d38 <label_fs_deinit>:
40054d38:	64d5      	save	40,ra,s1
/******************************************************************************/
/*!
 * \par  Description:
 *  卸载物理介质和文件系统
 * \param[in]    disk_type 磁盘类型
 * \param[out]   none
 * \return       none
 * \ingroup      config
 * \note
 *******************************************************************************/
bool label_fs_deinit(uint8 disk_type, int32 file_sys_id)
{
40054d3a:	0104      	addiu	s1,sp,16
40054d3c:	6744      	move	v0,a0
40054d3e:	d9a7      	sw	a1,28(s1)
40054d40:	c158      	sb	v0,24(s1)
40054d42:	9967      	lw	v1,28(s1)
    int32 ret_val;
    uint8 drv_type;

    if (file_sys_id != -1)
40054d44:	6a01      	li	v0,1
40054d46:	ea4b      	neg	v0
40054d48:	ea6e      	xor	v0,v1
40054d4a:	5a01      	sltiu	v0,1
40054d4c:	610c      	btnez	40054d66 <label_fs_deinit+0x2e>
40054d4e:	9947      	lw	v0,28(s1)
    {
        ret_val = sys_unmount_fs(file_sys_id);
40054d50:	6782      	move	a0,v0
40054d52:	6d00      	li	a1,0
40054d54:	6e00      	li	a2,0
40054d56:	6f2a      	li	a3,42
40054d58:	b21c      	lw	v0,40054dc8 <label_fs_deinit+0x90>
40054d5a:	eac0      	jalrc	v0
40054d5c:	d940      	sw	v0,0(s1)
40054d5e:	6a01      	li	v0,1
        file_sys_id = -1;
40054d60:	ea4b      	neg	v0
40054d62:	d947      	sw	v0,28(s1)
40054d64:	1003      	b	40054d6c <label_fs_deinit+0x34>
40054d66:	6a01      	li	v0,1
    }
    else
    {
        return TRUE;
40054d68:	d942      	sw	v0,8(s1)
40054d6a:	1029      	b	40054dbe <label_fs_deinit+0x86>
40054d6c:	9940      	lw	v0,0(s1)
    }

    if (0 > ret_val)
40054d6e:	5200      	slti	v0,0
40054d70:	6003      	bteqz	40054d78 <label_fs_deinit+0x40>
40054d72:	6a00      	li	v0,0
    {
        return FALSE;
40054d74:	d942      	sw	v0,8(s1)
40054d76:	1023      	b	40054dbe <label_fs_deinit+0x86>
40054d78:	a158      	lbu	v0,24(s1)
    }

    if (disk_type == DISK_H)
40054d7a:	7210      	cmpi	v0,16
40054d7c:	6758      	move	v0,t8
40054d7e:	5a01      	sltiu	v0,1
40054d80:	6003      	bteqz	40054d88 <label_fs_deinit+0x50>
40054d82:	6a01      	li	v0,1
    {
        drv_type = DRV_GROUP_STG_CARD;
40054d84:	c144      	sb	v0,4(s1)
40054d86:	100b      	b	40054d9e <label_fs_deinit+0x66>
40054d88:	a158      	lbu	v0,24(s1)
    }
    else if (disk_type == DISK_U)
40054d8a:	7220      	cmpi	v0,32
40054d8c:	6758      	move	v0,t8
40054d8e:	5a01      	sltiu	v0,1
40054d90:	6003      	bteqz	40054d98 <label_fs_deinit+0x60>
40054d92:	6a02      	li	v0,2
    {
        drv_type = DRV_GROUP_STG_UHOST;
40054d94:	c144      	sb	v0,4(s1)
40054d96:	1003      	b	40054d9e <label_fs_deinit+0x66>
40054d98:	6a00      	li	v0,0
    }
    else
    {
        return FALSE;
40054d9a:	d942      	sw	v0,8(s1)
40054d9c:	1010      	b	40054dbe <label_fs_deinit+0x86>
40054d9e:	a144      	lbu	v0,4(s1)
    }

    ret_val = sys_drv_uninstall(drv_type);
40054da0:	6782      	move	a0,v0
40054da2:	6d00      	li	a1,0
40054da4:	6e00      	li	a2,0
40054da6:	6f0b      	li	a3,11
40054da8:	b208      	lw	v0,40054dc8 <label_fs_deinit+0x90>
40054daa:	eac0      	jalrc	v0
40054dac:	d940      	sw	v0,0(s1)
40054dae:	9940      	lw	v0,0(s1)

    if (0 > ret_val)
40054db0:	5200      	slti	v0,0
40054db2:	6003      	bteqz	40054dba <label_fs_deinit+0x82>
40054db4:	6a00      	li	v0,0
    {
        return FALSE;
40054db6:	d942      	sw	v0,8(s1)
40054db8:	1002      	b	40054dbe <label_fs_deinit+0x86>
40054dba:	6a01      	li	v0,1
    }

    return TRUE;
40054dbc:	d942      	sw	v0,8(s1)
40054dbe:	9942      	lw	v0,8(s1)
}
40054dc0:	65b9      	move	sp,s1
40054dc2:	6453      	restore	24,ra,s1
40054dc4:	e8a0      	jrc	ra
40054dc6:	0000      	addiu	s0,sp,0
40054dc8:	6401      	restore	8
40054dca:	bfc1      	lwu	a2,4(a3)

40054dcc <convert_string>:
40054dcc:	6491      	save	8,s1

/******************************************************************************/
/*!
 * \par  Description:
 *    转换文件名，将长文件名转化为unicode字符
 * \param[in]    src_name 源文件名缓冲区
 * \param[in]   dest_name 目标文件名缓冲区
 * \return       none
 * \ingroup      common
 * \note
 *******************************************************************************/
void convert_string(const uint8 * src_name, uint8 * dest_name)
{
40054dce:	673d      	move	s1,sp
40054dd0:	d982      	sw	a0,8(s1)
40054dd2:	d9a3      	sw	a1,12(s1)
40054dd4:	9963      	lw	v1,12(s1)
    *dest_name = 0xff;
40054dd6:	6a01      	li	v0,1
40054dd8:	ea4b      	neg	v0
40054dda:	c340      	sb	v0,0(v1)
40054ddc:	9963      	lw	v1,12(s1)
    *(dest_name + 1) = 0xfe;
40054dde:	6a02      	li	v0,2
40054de0:	ea4b      	neg	v0
40054de2:	c341      	sb	v0,1(v1)
40054de4:	9943      	lw	v0,12(s1)
    dest_name += 2;
40054de6:	4242      	addiu	v0,v0,2
40054de8:	d943      	sw	v0,12(s1)
40054dea:	9942      	lw	v0,8(s1)

    while (*src_name != '\0')
40054dec:	a240      	lbu	v0,0(v0)
40054dee:	220e      	beqz	v0,40054e0c <convert_string+0x40>
40054df0:	9963      	lw	v1,12(s1)
    {
        *dest_name = *src_name;
40054df2:	9942      	lw	v0,8(s1)
40054df4:	a240      	lbu	v0,0(v0)
40054df6:	c340      	sb	v0,0(v1)
40054df8:	9963      	lw	v1,12(s1)
        *(dest_name + 1) = 0x00;
40054dfa:	6a00      	li	v0,0
40054dfc:	c341      	sb	v0,1(v1)
40054dfe:	9943      	lw	v0,12(s1)
        dest_name += 2;
40054e00:	4242      	addiu	v0,v0,2
40054e02:	d943      	sw	v0,12(s1)
40054e04:	9942      	lw	v0,8(s1)
        src_name++;
40054e06:	4241      	addiu	v0,v0,1
40054e08:	d942      	sw	v0,8(s1)
40054e0a:	17ef      	b	40054dea <convert_string+0x1e>
40054e0c:	9963      	lw	v1,12(s1)
    }

    *dest_name = 0x00;
40054e0e:	6a00      	li	v0,0
40054e10:	c340      	sb	v0,0(v1)
40054e12:	9963      	lw	v1,12(s1)
    *(dest_name + 1) = 0x00;
40054e14:	6a00      	li	v0,0
40054e16:	c341      	sb	v0,1(v1)
40054e18:	65b9      	move	sp,s1

    return;
}
40054e1a:	6411      	restore	8,s1
40054e1c:	e8a0      	jrc	ra
	...

40054e20 <config_disk_label>:
40054e20:	64dc      	save	96,ra,s1

/******************************************************************************/
/*!
 * \par  Description:_config_disk_label
 * \volume set
 * \param[in]    none
 * \param[out]   none
 * \return       none
 * \ingroup      config
 * \note
 *******************************************************************************/
bool config_disk_label(void)
{
40054e22:	0106      	addiu	s1,sp,24
40054e24:	6c01      	li	a0,1
    bool ret_val;
    int32 file_sys_id;

    uint8 volume_label_src[12];

    uint8 volume_label_dst[28];

    if (sys_detect_disk(DRV_GROUP_STG_CARD) == -1)
40054e26:	6d00      	li	a1,0
40054e28:	6e00      	li	a2,0
40054e2a:	6f09      	li	a3,9
40054e2c:	b22e      	lw	v0,40054ee4 <config_disk_label+0xc4>
40054e2e:	eac0      	jalrc	v0
40054e30:	6762      	move	v1,v0
40054e32:	6a01      	li	v0,1
40054e34:	ea4b      	neg	v0
40054e36:	ea6e      	xor	v0,v1
40054e38:	5a01      	sltiu	v0,1
40054e3a:	6003      	bteqz	40054e42 <config_disk_label+0x22>
40054e3c:	6a00      	li	v0,0
    {
        return FALSE;
40054e3e:	d94e      	sw	v0,56(s1)
40054e40:	104d      	b	40054edc <config_disk_label+0xbc>
40054e42:	4147      	addiu	v0,s1,7
    }

    libc_memset(volume_label_src, 0, sizeof(volume_label_src));
40054e44:	4241      	addiu	v0,v0,1
40054e46:	6782      	move	a0,v0
40054e48:	6d00      	li	a1,0
40054e4a:	6e0c      	li	a2,12
40054e4c:	6f01      	li	a3,1
40054e4e:	b227      	lw	v0,40054ee8 <config_disk_label+0xc8>
40054e50:	eac0      	jalrc	v0
40054e52:	4147      	addiu	v0,s1,7

    libc_memset(volume_label_dst, 0, sizeof(volume_label_dst));
40054e54:	4a11      	addiu	v0,17
40054e56:	6782      	move	a0,v0
40054e58:	6d00      	li	a1,0
40054e5a:	6e1c      	li	a2,28
40054e5c:	6f01      	li	a3,1
40054e5e:	b223      	lw	v0,40054ee8 <config_disk_label+0xc8>
40054e60:	eac0      	jalrc	v0
40054e62:	6c07      	li	a0,7

    //装载主盘
#ifdef _CARD_BASE_
    file_sys_id = label_fs_init(DISK_C);
40054e64:	1820 532b 	jal	40054cac <label_fs_init>
40054e68:	6500      	nop
40054e6a:	d941      	sw	v0,4(s1)
40054e6c:	9941      	lw	v0,4(s1)
#else
    file_sys_id = label_fs_init(DISK_H);
#endif
    if (file_sys_id < 0)
40054e6e:	5200      	slti	v0,0
40054e70:	6003      	bteqz	40054e78 <config_disk_label+0x58>
40054e72:	6a00      	li	v0,0
    {
        return FALSE;
40054e74:	d94e      	sw	v0,56(s1)
40054e76:	1032      	b	40054edc <config_disk_label+0xbc>
40054e78:	9961      	lw	v1,4(s1)
    }

    if(0 == vfs_create_volume(file_sys_id, 0))//判断卷标是否存在
40054e7a:	6a15      	li	v0,21
40054e7c:	d204      	sw	v0,16(sp)
40054e7e:	6783      	move	a0,v1
40054e80:	6d00      	li	a1,0
40054e82:	6e00      	li	a2,0
40054e84:	6f00      	li	a3,0
40054e86:	b21a      	lw	v0,40054eec <config_disk_label+0xcc>
40054e88:	eac0      	jalrc	v0
40054e8a:	651a      	move	t8,v0
40054e8c:	6758      	move	v0,t8
40054e8e:	ea11      	zeb	v0
40054e90:	2a1d      	bnez	v0,40054ecc <config_disk_label+0xac>
40054e92:	6aff      	li	v0,255
    {
        com_get_config_struct(INF_UDISK_LABEL, volume_label_src, 11);
40054e94:	4a0c      	addiu	v0,12
40054e96:	4167      	addiu	v1,s1,7
40054e98:	4361      	addiu	v1,v1,1
40054e9a:	6782      	move	a0,v0
40054e9c:	67a3      	move	a1,v1
40054e9e:	6e0b      	li	a2,11
40054ea0:	b214      	lw	v0,40054ef0 <config_disk_label+0xd0>
40054ea2:	eac0      	jalrc	v0
40054ea4:	4147      	addiu	v0,s1,7

        //短名转换成长名形式
        //com_ansi_to_unicode(volume_label);
        convert_string(volume_label_src, volume_label_dst);
40054ea6:	4241      	addiu	v0,v0,1
40054ea8:	4167      	addiu	v1,s1,7
40054eaa:	4b11      	addiu	v1,17
40054eac:	6782      	move	a0,v0
40054eae:	67a3      	move	a1,v1
40054eb0:	1820 5373 	jal	40054dcc <convert_string>
40054eb4:	6500      	nop
40054eb6:	9961      	lw	v1,4(s1)

        //统一由长名创建卷标名
        ret_val = vfs_create_volume(file_sys_id, volume_label_dst);
40054eb8:	41a7      	addiu	a1,s1,7
40054eba:	4d11      	addiu	a1,17
40054ebc:	6a15      	li	v0,21
40054ebe:	d204      	sw	v0,16(sp)
40054ec0:	6783      	move	a0,v1
40054ec2:	6e00      	li	a2,0
40054ec4:	6f00      	li	a3,0
40054ec6:	b20a      	lw	v0,40054eec <config_disk_label+0xcc>
40054ec8:	eac0      	jalrc	v0
40054eca:	c140      	sb	v0,0(s1)
40054ecc:	9941      	lw	v0,4(s1)
    }

 #ifdef _CARD_BASE_
    label_fs_deinit(DISK_C, file_sys_id);
40054ece:	6c07      	li	a0,7
40054ed0:	67a2      	move	a1,v0
40054ed2:	1820 534e 	jal	40054d38 <label_fs_deinit>
40054ed6:	6500      	nop
40054ed8:	a140      	lbu	v0,0(s1)
#else
    label_fs_deinit(DISK_H, file_sys_id);
#endif

    return ret_val;
40054eda:	d94e      	sw	v0,56(s1)
40054edc:	994e      	lw	v0,56(s1)
}
40054ede:	65b9      	move	sp,s1
40054ee0:	6459      	restore	72,ra,s1
40054ee2:	e8a0      	jrc	ra
40054ee4:	6401      	restore	8
40054ee6:	bfc1      	lwu	a2,4(a3)
40054ee8:	6405      	restore	40
40054eea:	bfc1      	lwu	a2,4(a3)
40054eec:	6be1      	li	v1,225
40054eee:	bfc1      	lwu	a2,4(a3)
40054ef0:	464d      	addiu	v0,a2,-3
40054ef2:	4851      	addiu	s0,81

40054ef4 <card_drv_name>:
40054ef4:	6163 6472 642e 7672 0000 0000               card.drv....

40054f00 <udisk_init_all>:
40054f00:	64d8      	save	64,ra,s1
 * \ingroup      main_udisk.c
 * \note
 *******************************************************************************/
void udisk_init_all(void)
{
40054f02:	0104      	addiu	s1,sp,16
40054f04:	6a00      	li	v0,0
    picbox_private_t picbox_data;
    textbox_private_t textbox_param;
    style_infor_t style_infor;
    //  setting_comval_t u_g_setting_vars;
    //bool  result=0;
    uint8 i = 0;
40054f06:	f020 c140 	sb	v0,32(s1)
40054f0a:	6a00      	li	v0,0

    /*显示连接界面*/
    style_infor.type = UI_AP;
40054f0c:	c15a      	sb	v0,26(s1)
40054f0e:	f002 6a00 	li	v0,4096
    //style_infor.style_id = UDISK_LINK_BG;
    //ui_show_picbox(&style_infor, NULL);

    style_infor.style_id = UDISK_MP3;
40054f12:	c94c      	sh	v0,24(s1)
40054f14:	4147      	addiu	v0,s1,7
    ui_show_picbox(&style_infor, NULL);
40054f16:	4a11      	addiu	v0,17
40054f18:	6782      	move	a0,v0
40054f1a:	6d00      	li	a1,0
40054f1c:	6e00      	li	a2,0
40054f1e:	6f02      	li	a3,2
40054f20:	b23f      	lw	v0,4005501c <udisk_init_all+0x11c>
40054f22:	eac0      	jalrc	v0
40054f24:	f002 6a08 	li	v0,4104

    style_infor.style_id = UDISK_USB_PIC;
40054f28:	c94c      	sh	v0,24(s1)
40054f2a:	4147      	addiu	v0,s1,7
    ui_show_picbox(&style_infor, NULL);
40054f2c:	4a11      	addiu	v0,17
40054f2e:	6782      	move	a0,v0
40054f30:	6d00      	li	a1,0
40054f32:	6e00      	li	a2,0
40054f34:	6f02      	li	a3,2
40054f36:	b23a      	lw	v0,4005501c <udisk_init_all+0x11c>
40054f38:	eac0      	jalrc	v0
40054f3a:	f002 6a01 	li	v0,4097

    style_infor.style_id = UDISK_LINK_TYPE;
40054f3e:	c94c      	sh	v0,24(s1)
40054f40:	6a01      	li	v0,1
    picbox_data.pic_id = -1;
40054f42:	ea4b      	neg	v0
40054f44:	c940      	sh	v0,0(s1)
40054f46:	6a00      	li	v0,0
    picbox_data.frame_id = 0;
40054f48:	c142      	sb	v0,2(s1)
40054f4a:	4147      	addiu	v0,s1,7
    ui_show_picbox(&style_infor, &picbox_data);
40054f4c:	4a11      	addiu	v0,17
40054f4e:	6782      	move	a0,v0
40054f50:	67b1      	move	a1,s1
40054f52:	6e00      	li	a2,0
40054f54:	6f02      	li	a3,2
40054f56:	b232      	lw	v0,4005501c <udisk_init_all+0x11c>
40054f58:	eac0      	jalrc	v0
40054f5a:	6a00      	li	v0,0

    for (i = 0; i < 5; i++)
40054f5c:	f020 c140 	sb	v0,32(s1)
40054f60:	f020 a140 	lbu	v0,32(s1)
40054f64:	5a05      	sltiu	v0,5
40054f66:	601a      	bteqz	40054f9c <udisk_init_all+0x9c>
40054f68:	b32e      	lw	v1,40055020 <udisk_init_all+0x120>
    {
        style_infor.style_id = style_usb_point[i];
40054f6a:	f020 a140 	lbu	v0,32(s1)
40054f6e:	3244      	sll	v0,1
40054f70:	e269      	addu	v0,v1
40054f72:	aa40      	lhu	v0,0(v0)
40054f74:	c94c      	sh	v0,24(s1)
40054f76:	6a01      	li	v0,1
        picbox_data.pic_id = -1;
40054f78:	ea4b      	neg	v0
40054f7a:	c940      	sh	v0,0(s1)
40054f7c:	6a00      	li	v0,0
        picbox_data.frame_id = 0;
40054f7e:	c142      	sb	v0,2(s1)
40054f80:	4147      	addiu	v0,s1,7
        //显示界面
        ui_show_picbox(&style_infor, &picbox_data);
40054f82:	4a11      	addiu	v0,17
40054f84:	6782      	move	a0,v0
40054f86:	67b1      	move	a1,s1
40054f88:	6e00      	li	a2,0
40054f8a:	6f02      	li	a3,2
40054f8c:	b224      	lw	v0,4005501c <udisk_init_all+0x11c>
40054f8e:	eac0      	jalrc	v0
40054f90:	f020 a140 	lbu	v0,32(s1)
40054f94:	4241      	addiu	v0,v0,1
40054f96:	f020 c140 	sb	v0,32(s1)
40054f9a:	17e2      	b	40054f60 <udisk_init_all+0x60>
40054f9c:	b222      	lw	v0,40055024 <udisk_init_all+0x124>
    }
    if (timer_usb_connect_id == -1)
40054f9e:	8260      	lb	v1,0(v0)
40054fa0:	6a01      	li	v0,1
40054fa2:	ea4b      	neg	v0
40054fa4:	ea6e      	xor	v0,v1
40054fa6:	5a01      	sltiu	v0,1
40054fa8:	600e      	bteqz	40054fc6 <udisk_init_all+0xc6>
40054faa:	f3e0 6a08 	li	v0,1000
    {
        timer_usb_connect_id = set_app_timer(APP_TIMER_ATTRB_UI, 1000, timer_usb_display_connect);
40054fae:	b31f      	lw	v1,40055028 <udisk_init_all+0x128>
40054fb0:	6c00      	li	a0,0
40054fb2:	67a2      	move	a1,v0
40054fb4:	67c3      	move	a2,v1
40054fb6:	b21e      	lw	v0,4005502c <udisk_init_all+0x12c>
40054fb8:	eac0      	jalrc	v0
40054fba:	6762      	move	v1,v0
40054fbc:	b21a      	lw	v0,40055024 <udisk_init_all+0x124>
40054fbe:	c260      	sb	v1,0(v0)
40054fc0:	b31c      	lw	v1,40055030 <udisk_init_all+0x130>
        time_count = 0;
40054fc2:	6a00      	li	v0,0
40054fc4:	c340      	sb	v0,0(v1)
40054fc6:	f004 6a00 	li	v0,8192
    }
    style_infor.style_id = UDISK_STATE_STR;
40054fca:	c94c      	sh	v0,24(s1)
40054fcc:	6a7e      	li	v0,126
    textbox_param.lang_id = UNICODEID;
40054fce:	c14a      	sb	v0,10(s1)
40054fd0:	6a02      	li	v0,2
    textbox_param.str_id = S_UDISK_LINKING;
40054fd2:	c944      	sh	v0,8(s1)
40054fd4:	6a00      	li	v0,0
    textbox_param.str_value = NULL;
40054fd6:	d943      	sw	v0,12(s1)
40054fd8:	4147      	addiu	v0,s1,7
    ui_show_textbox(&style_infor, &textbox_param, TEXTBOX_DRAW_NORMAL);
40054fda:	4a11      	addiu	v0,17
40054fdc:	4167      	addiu	v1,s1,7
40054fde:	4361      	addiu	v1,v1,1
40054fe0:	6782      	move	a0,v0
40054fe2:	67a3      	move	a1,v1
40054fe4:	6e01      	li	a2,1
40054fe6:	6f03      	li	a3,3
40054fe8:	b20d      	lw	v0,4005501c <udisk_init_all+0x11c>
40054fea:	eac0      	jalrc	v0
40054fec:	f004 6a01 	li	v0,8193

    style_infor.style_id = UDISK_USB_STR;
40054ff0:	c94c      	sh	v0,24(s1)
40054ff2:	6a03      	li	v0,3
    textbox_param.str_id = S_UDISK_USB;
40054ff4:	c944      	sh	v0,8(s1)
40054ff6:	4147      	addiu	v0,s1,7
    ui_show_textbox(&style_infor, &textbox_param, TEXTBOX_DRAW_NORMAL);
40054ff8:	4a11      	addiu	v0,17
40054ffa:	4167      	addiu	v1,s1,7
40054ffc:	4361      	addiu	v1,v1,1
40054ffe:	6782      	move	a0,v0
40055000:	67a3      	move	a1,v1
40055002:	6e01      	li	a2,1
40055004:	6f03      	li	a3,3
40055006:	b206      	lw	v0,4005501c <udisk_init_all+0x11c>
40055008:	eac0      	jalrc	v0
4005500a:	b20b      	lw	v0,40055034 <udisk_init_all+0x134>

    ui_show_battery();
4005500c:	eac0      	jalrc	v0
4005500e:	b20b      	lw	v0,40055038 <udisk_init_all+0x138>
    //保存需要动态刷新的图片到内存
    read_connect_pic_to_ram(); //2015-11-10
40055010:	eac0      	jalrc	v0
40055012:	b20b      	lw	v0,4005503c <udisk_init_all+0x13c>
    read_battery_pic_to_ram();
40055014:	eac0      	jalrc	v0
40055016:	65b9      	move	sp,s1

}
40055018:	6456      	restore	48,ra,s1
4005501a:	e8a0      	jrc	ra
4005501c:	6bdd      	li	v1,221
4005501e:	bfc1      	lwu	a2,4(a3)
40055020:	531c      	slti	v1,28
40055022:	4001      	addiu	s0,s0,1
40055024:	55c7      	slti	a1,199
40055026:	9fc1      	lw	a2,4(a3)
40055028:	670d      	move	s0,t5
4005502a:	bfc1      	lwu	a2,4(a3)
4005502c:	4601      	addiu	s0,a2,1
4005502e:	4845      	addiu	s0,69
40055030:	55c6      	slti	a1,198
40055032:	9fc1      	lw	a2,4(a3)
40055034:	6611      	0x6611
40055036:	bfc1      	lwu	a2,4(a3)
40055038:	65d1      	move	s6,s1
4005503a:	bfc1      	lwu	a2,4(a3)
4005503c:	6591      	move	s4,s1
4005503e:	bfc1      	lwu	a2,4(a3)

40055040 <udisk_exit_all>:
40055040:	64d5      	save	40,ra,s1

//0:空闲  10h:上传  20h:下传  30h:弹出要求退出  40h:拔线要求退出
//60h:分区处理状态  70h:插入到USB充电器  80h:进入Suspend状态  90h:退出Suspend状态

app_result_e udisk_exit_all(int argc)
{
40055042:	0104      	addiu	s1,sp,16
40055044:	d986      	sw	a0,24(s1)
40055046:	6a00      	li	v0,0
    app_result_e ret = 0;
40055048:	c940      	sh	v0,0(s1)
4005504a:	6a00      	li	v0,0
    msg_apps_t msg = {0};
4005504c:	d942      	sw	v0,8(s1)
4005504e:	6a00      	li	v0,0
40055050:	d943      	sw	v0,12(s1)
40055052:	b234      	lw	v0,40055120 <.L9+0xb0>

    /*读取VM信息*/
    sys_vm_read(&update_flag, UDISK_VM, sizeof(uint32));
40055054:	b334      	lw	v1,40055124 <.L9+0xb4>
40055056:	6782      	move	a0,v0
40055058:	67a3      	move	a1,v1
4005505a:	6e04      	li	a2,4
4005505c:	6f12      	li	a3,18
4005505e:	b233      	lw	v0,40055128 <.L9+0xb8>
40055060:	eac0      	jalrc	v0
40055062:	f200 6a01 	li	v0,513
    msg.type = MSG_CREAT_APP; //创建播放列表app
40055066:	d942      	sw	v0,8(s1)
40055068:	b231      	lw	v0,4005512c <.L9+0xbc>
    //按键退出
    if (g_udisk_status.line_sta == 0x00)
4005506a:	9a40      	lw	v0,0(v0)
4005506c:	2a01      	bnez	v0,40055070 <.L9>
4005506e:	1000      	b	40055070 <.L9>

40055070 <.L9>:
40055070:	b22c      	lw	v0,40055120 <.L9+0xb0>
    {

        if (returnkey_press == 1)
        {
            goto exit_0;
        }

    }
    else if (g_udisk_status.line_sta == 0x70)
    {
        goto exit_0;
    }
    else
    {
        //拔线,弹出
        goto exit_0;
    }

    exit_0:
    //创建playlist

#ifdef  _CARD_BASE_
    if ((update_flag & 0x00000001) != 0)
40055072:	9a60      	lw	v1,0(v0)
40055074:	6a01      	li	v0,1
40055076:	ea6c      	and	v0,v1
40055078:	2212      	beqz	v0,4005509e <.L9+0x2e>
4005507a:	6a0f      	li	v0,15
    {
        msg.content.data[1] = (uint8) PARAM_FROM_UDISK;
4005507c:	c14d      	sb	v0,13(s1)
4005507e:	a14d      	lbu	v0,13(s1)
        msg.content.data[1] |= (uint8)PLIST_DISK_C;//playlist ap param
40055080:	6b80      	li	v1,128
40055082:	eb6b      	neg	v1
40055084:	ea6d      	or	v0,v1
40055086:	c14d      	sb	v0,13(s1)
40055088:	6a0a      	li	v0,10
        

#else
    if (((update_flag & 0x00000001) != 0) || ((update_flag & 0x00010000) != 0))
    {
        msg.content.data[1] = (uint8) PARAM_FROM_UDISK;
        if ((update_flag & 0x00000001) != 0)
        {
            msg.content.data[1] |= (uint8) PLIST_DISK_C;//playlist ap param
            
        }
        else
        {
            msg.content.data[1] |= (uint8) PLIST_DISK_H;//playlist ap param
            
        }
#endif
        msg.content.data[0] = (uint8) APP_ID_PLAYLIST;//playlist ap
4005508a:	c14c      	sb	v0,12(s1)
4005508c:	6c00      	li	a0,0
        change_card_update(FALSE);
4005508e:	1820 544d 	jal	40055134 <change_card_update>
40055092:	6500      	nop
40055094:	f1ef 6a04 	li	v0,31204
        ret = RESULT_CREATE_LIST_APP;
40055098:	ea4b      	neg	v0
4005509a:	c940      	sh	v0,0(s1)
4005509c:	1035      	b	40055108 <.L9+0x98>
4005509e:	f7ef 6a11 	li	v0,32753
        //card_rw_flag = 1;
    }
    //返回上一次的AP
    else
    {
        ret = RESULT_LASTPLAY;
400550a2:	ea4b      	neg	v0
400550a4:	c940      	sh	v0,0(s1)
400550a6:	9966      	lw	v1,24(s1)
        if ((argc & 0x00ff) == APP_ID_RADIO)
400550a8:	6aff      	li	v0,255
400550aa:	ea6c      	and	v0,v1
400550ac:	7203      	cmpi	v0,3
400550ae:	6758      	move	v0,t8
400550b0:	5a01      	sltiu	v0,1
400550b2:	6011      	bteqz	400550d6 <.L9+0x66>
400550b4:	6a03      	li	v0,3
        {
            msg.content.data[0] = APP_ID_RADIO;
400550b6:	c14c      	sb	v0,12(s1)
400550b8:	9946      	lw	v0,24(s1)
            //直接回radio播放.  传参为PARAM_BACKTO_PLAYING时不会重设频率
            if ((((uint32) argc >> 16) & 0x00ff) == ENGINE_STATE_PLAYING)
400550ba:	3342      	srl	v1,v0,8
400550bc:	3362      	srl	v1,8
400550be:	6aff      	li	v0,255
400550c0:	ea6c      	and	v0,v1
400550c2:	7201      	cmpi	v0,1
400550c4:	6758      	move	v0,t8
400550c6:	5a01      	sltiu	v0,1
400550c8:	6003      	bteqz	400550d0 <.L9+0x60>
400550ca:	6a0e      	li	v0,14
            {
                msg.content.data[1] = PARAM_FROM_CONFIG; //PARAM_BACKTO_PLAYING;
400550cc:	c14d      	sb	v0,13(s1)
400550ce:	101c      	b	40055108 <.L9+0x98>
400550d0:	6a0e      	li	v0,14
            }
            else
            {
                msg.content.data[1] = PARAM_FROM_CONFIG; //PARAM_BACKTO_PLAYED;
400550d2:	c14d      	sb	v0,13(s1)
400550d4:	1019      	b	40055108 <.L9+0x98>
400550d6:	9946      	lw	v0,24(s1)
            }
        }
        else if ((argc & 0x00ff) == APP_ID_MUSIC)
400550d8:	6bff      	li	v1,255
400550da:	ea6c      	and	v0,v1
400550dc:	2a11      	bnez	v0,40055100 <.L9+0x90>
400550de:	6a00      	li	v0,0
        {
            msg.content.data[0] = APP_ID_MUSIC;
400550e0:	c14c      	sb	v0,12(s1)
400550e2:	9946      	lw	v0,24(s1)
            if ((((uint32) argc >> 16) & 0x00ff) == ENGINE_STATE_PLAYING)
400550e4:	3342      	srl	v1,v0,8
400550e6:	3362      	srl	v1,8
400550e8:	6aff      	li	v0,255
400550ea:	ea6c      	and	v0,v1
400550ec:	7201      	cmpi	v0,1
400550ee:	6758      	move	v0,t8
400550f0:	5a01      	sltiu	v0,1
400550f2:	6003      	bteqz	400550fa <.L9+0x8a>
400550f4:	6a10      	li	v0,16
            {
                msg.content.data[1] = PARAM_BACKTO_PLAYING;
400550f6:	c14d      	sb	v0,13(s1)
400550f8:	1007      	b	40055108 <.L9+0x98>
400550fa:	6a11      	li	v0,17
            }
            else
            {
                msg.content.data[1] = PARAM_BACKTO_PLAYED;
400550fc:	c14d      	sb	v0,13(s1)
400550fe:	1004      	b	40055108 <.L9+0x98>
40055100:	6a09      	li	v0,9
            }
        }
        else
        {
            msg.content.data[0] = APP_ID_MAINMENU;
40055102:	c14c      	sb	v0,12(s1)
40055104:	6a0f      	li	v0,15
            msg.content.data[1] = PARAM_FROM_UDISK;
40055106:	c14d      	sb	v0,13(s1)
40055108:	4147      	addiu	v0,s1,7
        }
    }
    send_async_msg(APP_ID_MANAGER, &msg); //发送异步消息,创建播放列表app的进程
4005510a:	4241      	addiu	v0,v0,1
4005510c:	6c08      	li	a0,8
4005510e:	67a2      	move	a1,v0
40055110:	b208      	lw	v0,40055130 <.L9+0xc0>
40055112:	eac0      	jalrc	v0
40055114:	a940      	lhu	v0,0(s1)

    return ret;
40055116:	651a      	move	t8,v0
40055118:	6758      	move	v0,t8
}
4005511a:	65b9      	move	sp,s1
4005511c:	6453      	restore	24,ra,s1
4005511e:	e8a0      	jrc	ra
40055120:	55bc      	slti	a1,188
40055122:	9fc1      	lw	a2,4(a3)
40055124:	8000      	lb	s0,0(s0)
40055126:	0002      	addiu	s0,sp,8
40055128:	6401      	restore	8
4005512a:	bfc1      	lwu	a2,4(a3)
4005512c:	55cc      	slti	a1,204
4005512e:	9fc1      	lw	a2,4(a3)
40055130:	4759      	daddiu	v0,a3,-7
40055132:	4849      	addiu	s0,73

40055134 <change_card_update>:
40055134:	6491      	save	8,s1
}

///修改卡是否已经整理簇链
static inline void change_card_update(bool update)
{
40055136:	673d      	move	s1,sp
40055138:	6744      	move	v0,a0
4005513a:	c148      	sb	v0,8(s1)
4005513c:	b303      	lw	v1,40055148 <change_card_update+0x14>
    g_app_info_state.card_update = update; 
4005513e:	a148      	lbu	v0,8(s1)
40055140:	c352      	sb	v0,18(v1)
40055142:	65b9      	move	sp,s1
}
40055144:	6411      	restore	8,s1
40055146:	e8a0      	jrc	ra
40055148:	a1b8      	lbu	a1,24(s1)
4005514a:	9fc1      	lw	a2,4(a3)
Disassembly of section BANK_UI_1_16:

48414600 <applib_init>:
48414600:	64f6      	save	48,ra,s0-s1
 * \note
 * \li  在应用 main 函数入口处调用，在此之前，不许调用其他 applib 接口。
*******************************************************************************/
bool applib_init(uint8 app_id, app_type_e type)
{
48414602:	ec11      	zeb	a0
48414604:	ed11      	zeb	a1
48414606:	5c12      	sltiu	a0,18
    app_info_t *cur_app_info;

    if(app_id >= APP_ID_MAX)
48414608:	d404      	sw	a0,16(sp)
4841460a:	d505      	sw	a1,20(sp)
4841460c:	6a00      	li	v0,0
    {
        return FALSE;
4841460e:	6062      	bteqz	484146d4 <applib_init+0xd4>
48414610:	4281      	addiu	a0,v0,1
    }

    //调节频率
    if (type == APP_TYPE_GUI)
48414612:	6765      	move	v1,a1
48414614:	eb8e      	xor	v1,a0
48414616:	eb83      	sltu	v1,a0
48414618:	6758      	move	v0,t8
4841461a:	d206      	sw	v0,24(sp)
4841461c:	2203      	beqz	v0,48414624 <applib_init+0x24>
4841461e:	6c0a      	li	a0,10
    {
        adjust_freq_set_level(AP_FRONT_LOW_PRIO, FREQ_LEVEL7, FREQ_NULL);
48414620:	6d07      	li	a1,7
48414622:	1005      	b	4841462e <applib_init+0x2e>
48414624:	9505      	lw	a1,20(sp)
    }
    else if (type == APP_TYPE_CONSOLE)
48414626:	7502      	cmpi	a1,2
48414628:	6106      	btnez	48414636 <applib_init+0x36>
4841462a:	6c06      	li	a0,6
    {
        adjust_freq_set_level(AP_BACK_LOW_PRIO, FREQ_LEVEL2, FREQ_NULL);
4841462c:	6d02      	li	a1,2
4841462e:	b02b      	lw	s0,484146d8 <applib_init+0xd8>
48414630:	6e00      	li	a2,0
48414632:	e840      	jalr	s0
48414634:	6f05      	li	a3,5
48414636:	9605      	lw	a2,20(sp)
    }
    else
    {
        //nothing
    }

    //获取 app_info 结构体指针
    cur_app_info = &g_app_info_vector[type];
48414638:	690c      	li	s1,12
4841463a:	ee38      	mult	a2,s1
4841463c:	b528      	lw	a1,484146dc <applib_init+0xdc>
4841463e:	eb12      	mflo	v1
48414640:	6c00      	li	a0,0

    //上锁，禁止任务调度
    sys_os_sched_lock();
48414642:	b228      	lw	v0,484146e0 <applib_init+0xe0>
48414644:	e3a5      	addu	s1,v1,a1
48414646:	67c4      	move	a2,a0
48414648:	67a4      	move	a1,a0
4841464a:	ea40      	jalr	v0
4841464c:	6f33      	li	a3,51
4841464e:	b026      	lw	s0,484146e4 <applib_init+0xe4>

    //初始化应用信息
    libc_memset(cur_app_info, 0x0, sizeof(app_info_t));
48414650:	6791      	move	a0,s1
48414652:	6e0c      	li	a2,12
48414654:	6f01      	li	a3,1
48414656:	e840      	jalr	s0
48414658:	6d00      	li	a1,0
4841465a:	6b01      	li	v1,1
    cur_app_info->used = 1;//标志已被分配使用
4841465c:	c160      	sb	v1,0(s1)
4841465e:	679d      	move	a0,sp
    cur_app_info->app_id = app_id;
48414660:	a450      	lbu	v0,16(a0)
48414662:	67fd      	move	a3,sp
    cur_app_info->app_type = (uint8) type;
48414664:	c141      	sb	v0,1(s1)
48414666:	a7d4      	lbu	a2,20(a3)
48414668:	c1c2      	sb	a2,2(s1)
4841466a:	9205      	lw	v0,20(sp)
    //cur_app_info->soft_watchdog_timeout_expires = 0;
    if (type == APP_TYPE_PMNG)
4841466c:	2a02      	bnez	v0,48414672 <applib_init+0x72>
4841466e:	c143      	sb	v0,3(s1)
    {
        cur_app_info->mq_id = (uint8)MQ_ID_MNG;
48414670:	1015      	b	4841469c <applib_init+0x9c>
48414672:	9706      	lw	a3,24(sp)
    }
    else if(type == APP_TYPE_GUI)
48414674:	2705      	beqz	a3,48414680 <applib_init+0x80>
48414676:	b41d      	lw	a0,484146e8 <applib_init+0xe8>
    {
        cur_app_info->mq_id = (uint8)MQ_ID_DESK;
        g_app_info_state.app_state = APP_STATE_NO_PLAY;//前台AP注册，初始化为 NO_PLAY 状态
48414678:	6800      	li	s0,0
4841467a:	c163      	sb	v1,3(s1)
4841467c:	c402      	sb	s0,2(a0)
4841467e:	100e      	b	4841469c <applib_init+0x9c>
48414680:	6c02      	li	a0,2
    }
    else
    {
        cur_app_info->mq_id = (uint8)MQ_ID_EGN;
48414682:	c183      	sb	a0,3(s1)
48414684:	9204      	lw	v0,16(sp)

        if(app_id == APP_ID_MENGINE)
48414686:	720d      	cmpi	v0,13
48414688:	b218      	lw	v0,484146e8 <applib_init+0xe8>
4841468a:	6007      	bteqz	4841469a <applib_init+0x9a>
4841468c:	9504      	lw	a1,16(sp)
        {
            g_app_info_state.type = ENGINE_MUSIC;
        }
        else if(app_id == APP_ID_FMENGINE)
4841468e:	750e      	cmpi	a1,14
48414690:	6102      	btnez	48414696 <applib_init+0x96>
48414692:	c280      	sb	a0,0(v0)
        {
            g_app_info_state.type = ENGINE_RADIO;
48414694:	1003      	b	4841469c <applib_init+0x9c>
48414696:	677d      	move	v1,sp
        }
        else//不可能到达这里
        {
            g_app_info_state.type = ENGINE_NULL;
48414698:	a378      	lbu	v1,24(v1)
4841469a:	c260      	sb	v1,0(v0)
4841469c:	b314      	lw	v1,484146ec <applib_init+0xec>
        }
    }

    g_app_info_state.aout_mode = (aout_type_e) com_get_config_default(SETTING_AUDIO_OUTPUT_CHANNAL);
4841469e:	b013      	lw	s0,484146e8 <applib_init+0xe8>
484146a0:	eb40      	jalr	v1
484146a2:	6c01      	li	a0,1
484146a4:	b312      	lw	v1,484146ec <applib_init+0xec>
    g_app_info_state.pa_mode =  (uint8)com_get_config_default(SETTING_AUDIO_INNER_PA_SET_MODE);
484146a6:	6c02      	li	a0,2
484146a8:	eb40      	jalr	v1
484146aa:	c048      	sb	v0,8(s0)
484146ac:	b310      	lw	v1,484146ec <applib_init+0xec>
    g_app_info_state.keytone_mode = (uint8)com_get_config_default(SETTING_AUDIO_KEYTONE_MODE);
484146ae:	6c06      	li	a0,6
484146b0:	eb40      	jalr	v1
484146b2:	c047      	sb	v0,7(s0)
484146b4:	c053      	sb	v0,19(s0)
484146b6:	6c00      	li	a0,0
    
    //解锁，允许任务调度
    sys_os_sched_unlock();
484146b8:	b20a      	lw	v0,484146e0 <applib_init+0xe0>
484146ba:	67a4      	move	a1,a0
484146bc:	67c4      	move	a2,a0
484146be:	ea40      	jalr	v0
484146c0:	6f34      	li	a3,52
484146c2:	b60c      	lw	a2,484146f0 <applib_init+0xf0>

    g_this_app_info = cur_app_info;
484146c4:	b40c      	lw	a0,484146f4 <applib_init+0xf4>


    //初始化线程互斥信号量
    libc_sem_init(&thread_mutex, 1);
484146c6:	b208      	lw	v0,484146e4 <applib_init+0xe4>
484146c8:	de20      	sw	s1,0(a2)
484146ca:	6d01      	li	a1,1
484146cc:	6e00      	li	a2,0
484146ce:	ea40      	jalr	v0
484146d0:	6f12      	li	a3,18
484146d2:	6a01      	li	v0,1



    PRINT_INFO_INT("app init:", app_id);

    return TRUE;
484146d4:	6476      	restore	48,ra,s0-s1
}
484146d6:	e8a0      	jrc	ra
484146d8:	640d      	restore	104
484146da:	bfc1      	lwu	a2,4(a3)
484146dc:	a194      	lbu	a0,20(s1)
484146de:	9fc1      	lw	a2,4(a3)
484146e0:	6401      	restore	8
484146e2:	bfc1      	lwu	a2,4(a3)
484146e4:	6405      	restore	40
484146e6:	bfc1      	lwu	a2,4(a3)
484146e8:	a1b8      	lbu	a1,24(s1)
484146ea:	9fc1      	lw	a2,4(a3)
484146ec:	46bd      	daddiu	a1,a2,-3
484146ee:	4851      	addiu	s0,81
484146f0:	5404      	slti	a0,4
484146f2:	9fc1      	lw	a2,4(a3)
484146f4:	5408      	slti	a0,8
484146f6:	9fc1      	lw	a2,4(a3)

484146f8 <applib_quit>:
484146f8:	64f6      	save	48,ra,s0-s1

/******************************************************************************/
/*!
 * \par  Description:
 *    应用在 applib 模块上的注销处理。
 * \param[in]    none
 * \param[out]   none
 * \return       bool
 * \retval           TRUE 表示注销成功。
 * \retval           FALSE 表示注销失败。
 * \ingroup      app_manager
 * \par          exmaple code
 * \code
    例子1：应用进行 applib 模块注销
    applib_quit();
 * \endcode
 * \note
 * \li  在应用 main 函数退出处调用，在此之后，不许调用其他 applib 接口。
*******************************************************************************/
bool applib_quit(void)
{
484146fa:	6d00      	li	a1,0
    app_info_t cur_app_info;

    PRINT_INFO_INT("app quit:", g_this_app_info->app_id);

    //销毁线程互斥信号量
    libc_sem_destroy(&thread_mutex);
484146fc:	b42a      	lw	a0,484147a4 <.LBE4+0x22>
484146fe:	b02b      	lw	s0,484147a8 <.LBE4+0x26>
48414700:	67c5      	move	a2,a1
48414702:	e840      	jalr	s0
48414704:	6f13      	li	a3,19
48414706:	b12a      	lw	s1,484147ac <.LBE4+0x2a>

    //记录上一次退出的前台AP，以便返回
    if(g_this_app_info->app_type == APP_TYPE_GUI)
48414708:	99a0      	lw	a1,0(s1)
4841470a:	a542      	lbu	v0,2(a1)
4841470c:	7201      	cmpi	v0,1
4841470e:	6103      	btnez	48414716 <applib_quit+0x1e>
48414710:	a561      	lbu	v1,1(a1)
    {
        g_app_last_state.last_app = g_this_app_info->app_id;
48414712:	b428      	lw	a0,484147b0 <.LBE4+0x2e>
48414714:	c460      	sb	v1,0(a0)
48414716:	a5c2      	lbu	a2,2(a1)
    }

    //修改后台引擎类型为 NONE
    if(g_this_app_info->app_type == APP_TYPE_CONSOLE)
48414718:	7602      	cmpi	a2,2
4841471a:	6104      	btnez	48414724 <applib_quit+0x2c>
4841471c:	b726      	lw	a3,484147b4 <.LBE4+0x32>
    {
        g_app_info_state.type = ENGINE_NULL;
4841471e:	6a00      	li	v0,0
48414720:	c740      	sb	v0,0(a3)
48414722:	c741      	sb	v0,1(a3)
        g_app_info_state.state = ENGINE_STATE_NULL;
48414724:	0404      	addiu	a0,sp,16
    }

    //修改 app_info 结构体为未被使用
    libc_memcpy(&cur_app_info, g_this_app_info, sizeof(app_info_t));
48414726:	6e0c      	li	a2,12
48414728:	e840      	jalr	s0
4841472a:	6f00      	li	a3,0
4841472c:	679d      	move	a0,sp
    cur_app_info.used = 0;
4841472e:	6b12      	li	v1,18

48414730 <.LBB2>:
    cur_app_info.app_id = APP_ID_MAX;
48414730:	99a0      	lw	a1,0(s1)

48414732 <.LBE2>:
    //cur_app_info.soft_watchdog_timeout_expires = 0;
    __app_running_set_app_info(g_this_app_info->app_id, &cur_app_info);

    //调节频率
    if (g_this_app_info->app_type == APP_TYPE_GUI)
    {
        adjust_freq_set_level(AP_FRONT_LOW_PRIO, FREQ_NULL, FREQ_NULL);
    }
    else if (g_this_app_info->app_type == APP_TYPE_CONSOLE)
    {
        adjust_freq_set_level(AP_BACK_LOW_PRIO, FREQ_NULL, FREQ_NULL);
    }
    else
    {
        //nothing
    }

    return TRUE;
}

/*! \endcond */

/*! \cond */

//根据应用ID设置应用信息
static bool __app_running_set_app_info(uint8 app_id, const app_info_t *app_info)
{
48414732:	6e00      	li	a2,0
48414734:	c471      	sb	v1,17(a0)
48414736:	c4d0      	sb	a2,16(a0)
48414738:	a581      	lbu	a0,1(a1)

4841473a <.LBB4>:
4841473a:	5c12      	sltiu	a0,18
    app_info_t *app;
    uint8 i;

    if(app_id >= APP_ID_MAX)
4841473c:	6022      	bteqz	48414782 <.LBE4>
4841473e:	b51f      	lw	a1,484147b8 <.LBE4+0x36>
48414740:	6b00      	li	v1,0
    {
        return FALSE;
    }

    //搜索 app_id 对应 app_info_t
    app = NULL;
    for(i = 0; i < MAX_APP_COUNT; i++)
48414742:	690c      	li	s1,12
    {
        app = &g_app_info_vector[i];
48414744:	eb38      	mult	v1,s1
48414746:	ef12      	mflo	a3
48414748:	e7a5      	addu	s1,a3,a1
4841474a:	a100      	lbu	s0,0(s1)
        if((app->used == 1) && (app->app_id == app_id))
4841474c:	7001      	cmpi	s0,1
4841474e:	6103      	btnez	48414756 <.LBB4+0x1c>
48414750:	a141      	lbu	v0,1(s1)
48414752:	ea8e      	xor	v0,a0
48414754:	2205      	beqz	v0,48414760 <.LBB4+0x26>
48414756:	43c1      	addiu	a2,v1,1
48414758:	6766      	move	v1,a2
4841475a:	eb11      	zeb	v1
4841475c:	5b03      	sltiu	v1,3
4841475e:	61f1      	btnez	48414742 <.LBB4+0x8>
48414760:	6c00      	li	a0,0
        {
            break;
        }
    }

    if(NULL == app)
    {
        return FALSE;
    }

    sys_os_sched_lock();
48414762:	b017      	lw	s0,484147bc <.LBE4+0x3a>
48414764:	67a4      	move	a1,a0
48414766:	67c4      	move	a2,a0
48414768:	e840      	jalr	s0
4841476a:	6f33      	li	a3,51
4841476c:	b20f      	lw	v0,484147a8 <.LBE4+0x26>
    libc_memcpy(app, app_info, sizeof(app_info_t));
4841476e:	6791      	move	a0,s1
48414770:	0504      	addiu	a1,sp,16
48414772:	6e0c      	li	a2,12
48414774:	ea40      	jalr	v0
48414776:	6f00      	li	a3,0
48414778:	6c00      	li	a0,0
    sys_os_sched_unlock();
4841477a:	67a4      	move	a1,a0
4841477c:	67c4      	move	a2,a0
4841477e:	e840      	jalr	s0
48414780:	6f34      	li	a3,52

48414782 <.LBE4>:
48414782:	b40b      	lw	a0,484147ac <.LBE4+0x2a>
48414784:	9ca0      	lw	a1,0(a0)
48414786:	6c0a      	li	a0,10
48414788:	a542      	lbu	v0,2(a1)
4841478a:	7201      	cmpi	v0,1
4841478c:	6003      	bteqz	48414794 <.LBE4+0x12>
4841478e:	7202      	cmpi	v0,2
48414790:	6106      	btnez	4841479e <.LBE4+0x1c>
48414792:	6c06      	li	a0,6
48414794:	6d00      	li	a1,0
48414796:	b20b      	lw	v0,484147c0 <.LBE4+0x3e>
48414798:	67c5      	move	a2,a1
4841479a:	ea40      	jalr	v0
4841479c:	6f05      	li	a3,5
4841479e:	6a01      	li	v0,1
484147a0:	6476      	restore	48,ra,s0-s1
484147a2:	e8a0      	jrc	ra
484147a4:	5408      	slti	a0,8
484147a6:	9fc1      	lw	a2,4(a3)
484147a8:	6405      	restore	40
484147aa:	bfc1      	lwu	a2,4(a3)
484147ac:	5404      	slti	a0,4
484147ae:	9fc1      	lw	a2,4(a3)
484147b0:	a1d0      	lbu	a2,16(s1)
484147b2:	9fc1      	lw	a2,4(a3)
484147b4:	a1b8      	lbu	a1,24(s1)
484147b6:	9fc1      	lw	a2,4(a3)
484147b8:	a194      	lbu	a0,20(s1)
484147ba:	9fc1      	lw	a2,4(a3)
484147bc:	6401      	restore	8
484147be:	bfc1      	lwu	a2,4(a3)
484147c0:	640d      	restore	104
484147c2:	bfc1      	lwu	a2,4(a3)
	...
Disassembly of section BANK_UI_1_17:

48454600 <set_app_timer>:
48454600:	f00c 64f5 	save	a0-a2,40,ra,s0-s1

48454604 <.LBB2>:
 * \li  调用 set_app_timer 创建定时器后，必须在不再使用时调用 kill_app_timer 删除之，以免造成内存泄漏。
 * \li  timeout不能为0，func_proc不能为空，否则返回失败。
*******************************************************************************/
int8 set_app_timer(timer_attrb_e attrb, uint16 timeout, timer_proc func_proc)
{
48454604:	6a01      	li	v0,1

48454606 <.LBE2>:
    return __set_timer(attrb, TIMER_TYPE_NORMAL, timeout, func_proc);
}

/******************************************************************************/
/*!                    
 * \par  Description:
 *    创建单发应用级定时器。
 * \param[in]    attrb 定时器属性，属于另一种分类，分 control 和 ui 类
 * \param[in]    timeout 定时器周期，以 1ms 为单位
 * \param[in]    func_proc 定时器服务例程
 * \param[out]   none
 * \return       int8
 * \retval           id 申请成功，返回定时器ID，范围为 0 ~ g_app_timer_count - 1。
 * \retval           -1 申请失败，或定时器资源用完，或 timeout 为0，或 proc 为NULL。
 * \ingroup      app_timer
 * \par          exmaple code
 * \code
    例子1：创建 5s 超时定时器，用于启动某个事件
    //5s 超时定时器 ISR，置标志 g_timeout_flagd
    static void __timeout_handle(void)
    {
        g_timeout_flagd = TRUE;
    }
    
    bool g_timeout_flagd = FALSE;//全局变量
    int8 timeout_timer = -1;
    //创建 control类 应用级定时器
    timeout_timer = set_single_shot_app_timer(APP_TIMER_ATTRB_UI, 5000, __timeout_handle);
    if(timeout_timer == -1)
    {
        创建失败，原因为定时器已被申请完
    }
    
    //删除有效应用级定时器，如果能够确保单发定时器会执行到，那么就不需要执行删除动作了
    if(timeout_timer != -1)
    {
        kill_app_timer(timeout_timer);//如果在此之前单发定时器已自行删除，会返回错误，但是不会崩溃
        timeout_timer = -1;
    }
 * \endcode
 * \note
 * \li  单发应用级定时器在唯一一次 ISR 执行时就被自动销毁，用户可以不用自己销毁。
 * \li  但是这种定时器也有问题，就是用户不能完全把握定时器的生命周期，不能确定定时器
 *      是否被销毁了，这样就有可能重复创建相同的定时器。
 * \li  timeout不能为0，func_proc不能为空，否则返回失败。
*******************************************************************************/
/*int8 set_single_shot_app_timer(timer_attrb_e attrb, uint16 timeout, timer_proc func_proc)
{
    return __set_timer(attrb, TIMER_TYPE_SINGLE_SHOT, timeout, func_proc);
}*/

/******************************************************************************/
/*!                    
 * \par  Description:
 *    修改应用级定时器的定时周期。
 * \param[in]    timer_id 定时器ID
 * \param[in]    timeout 更新的定时器周期，以 1ms 为单位
 * \param[out]   none
 * \return       bool
 * \retval           TRUE 修改定时周期成功。
 * \retval           FALSE 修改定时周期失败，或找不到指定ID的定时器，或 timeout 非法。
 * \ingroup      app_timer
 * \par          exmaple code
 * \code
    例子1：修改定时器超时时间为 5s，之后重新计时
    if(modify_app_timer(timer_id, 5000) == FALSE)
    {
        修改失败
    }
 * \endcode
 * \note
 * \li  修改软定时器的定时周期后，会重新开始计时。
 * \li  timerout不能为0，否则返回失败。
 * \li  timer_id 不在0 ~ g_app_timer_count - 1区域中返回FALSE。
*******************************************************************************/
bool modify_app_timer(int8 timer_id, uint16 timeout)
{
    app_timer_t *tm;
    
    if((timer_id == -1) || ((uint8)timer_id >= g_app_timer_count))//访问越界
    {
        return FALSE;
    }
    
    tm = &g_app_timer_vector[timer_id];

    if(0 == timeout)
    {
        return FALSE;
    }

    tm->timeout = timeout;
    tm->timeout_expires = sys_get_ab_timer() + timeout;
    return TRUE;
}

/******************************************************************************/
/*!                    
 * \par  Description:
 *    停止应用级定时器计时，将定时器状态改为 TIMER_STATE_STOPED。
 * \param[in]    timer_id 定时器ID
 * \param[out]   none
 * \return       bool
 * \retval           TRUE 停止计时成功。
 * \retval           FALSE 停止计时失败，原因为找不到指定ID的定时器。
 * \ingroup      app_timer
 * \par          exmaple code
 * \code
    例子1：停止定时器计时，之后可通过 restart_app_timer 恢复
    if(stop_app_timer(timer_id) == FALSE)
    {
        停止失败
    }
 * \endcode
 * \note 
 * \li  停止计时后不能再恢复到停止时间点继续计时，只能调用 restart_app_timer 重新计时。
 * \li  timer_id 不在0 ~ g_app_timer_count - 1区域中返回FALSE。
*******************************************************************************/
bool stop_app_timer(int8 timer_id)
{
    app_timer_t *tm;
    
    if((timer_id == -1) || ((uint8)timer_id >= g_app_timer_count))//访问越界
    {
        return FALSE;
    }
    
    tm = &g_app_timer_vector[timer_id];

    tm->state = TIMER_STATE_STOPED;
    return TRUE;
}

/******************************************************************************/
/*!                    
 * \par  Description:
 *    重启应用级定时器计时，并将状态改为 TIMER_STATE_RUNNING。
 * \param[in]    timer_id 定时器ID
 * \param[out]   none
 * \return       bool
 * \retval           TRUE 重启计时成功。
 * \retval           FALSE 重启计时失败，原因为找不到指定ID的定时器。
 * \ingroup      app_timer
 * \par          exmaple code
 * \code
    例子1：恢复定时器计时，定时器将从头开始计时
    if(restart_app_timer(timer_id) == FALSE)
    {
        恢复计时失败
    }
 * \endcode
 * \note 
 * \li  重启计时就是重新开始一个计时周期。
 * \li  timer_id 不在0 ~ g_app_timer_count - 1区域中返回FALSE。
*******************************************************************************/
bool restart_app_timer(int8 timer_id)
{
    app_timer_t *tm;
    
    if((timer_id == -1) || ((uint8)timer_id >= g_app_timer_count))//访问越界
    {
        return FALSE;
    }
    
    tm = &g_app_timer_vector[timer_id];

    tm->state = TIMER_STATE_RUNNING;
    tm->timeout_expires = sys_get_ab_timer() + tm->timeout; 
    return TRUE;
}

/******************************************************************************/
/*!                    
 * \par  Description:
 *    删除应用级定时器，将定时器状态改为 TIMER_STATE_NOUSED。
 * \param[in]    timer_id 定时器ID
 * \param[out]   none
 * \return       bool
 * \retval           TRUE 删除定时器成功。
 * \retval           FALSE 删除定时器失败，原因为找不到指定ID的定时器。
 * \ingroup      app_timer
 * \par          exmaple code
 * \code
    例子1：删除定时器
    if(kill_app_timer(timer_id) == FALSE)
    {
        删除定时器失败
    }
 * \endcode
 * \note 
 * \li  timer_id 不在0 ~ g_app_timer_count - 1区域中返回FALSE。
*******************************************************************************/
bool kill_app_timer(int8 timer_id)
{
    app_timer_t *tm;
    
    if((timer_id == -1) || ((uint8)timer_id >= g_app_timer_count))//访问越界
    {
        return FALSE;
    }
    
    tm = &g_app_timer_vector[timer_id];

    tm->state = TIMER_STATE_NOUSED;
    return TRUE;
}

/******************************************************************************/
/*!                    
 * \par  Description:
 *    初始化应用级定时器管理模块，将所有定时器状态改为 TIMER_STATE_NOUSED。
 * \param[in]    timers 应用层定义的软定时器数组
 * \param[in]    count 应用层定义的软定时器数组的软定时器数目
 * \param[out]   none
 * \return       bool
 * \retval           TRUE 初始化成功。
 * \retval           FALSE 初始化失败，原因为参数非法。
 * \ingroup      app_timer
 * \par          exmaple code
 * \code
    例子1：初始化定时器管理模块
    #define APP_TIMER_COUNT     2
    app_timer_t app_timer_vector[COMMON_TIMER_COUNT + APP_TIMER_COUNT];
    
    if(init_app_timers(app_timer_vector, COMMON_TIMER_COUNT + APP_TIMER_COUNT) == FALSE)
    {
        初始化定时器管理模块失败，参数错误
    }
 * \endcode
 * \note 
 * \li  在应用 main 函数入口处调用，在此之前，不许调用其他 app_timer 接口。
 * \li  该接口在进入AP后，调用完 applib_init 接口后调用。
*******************************************************************************/
bool init_app_timers(app_timer_t *timers, uint8 count)
{
    app_timer_t *tm;
    uint8 i;
    
    if(count == 0)//定时器数目不能为0
    {
        return FALSE;
    }
    
    g_app_timer_vector = timers;
    g_app_timer_count = count;

    for(i = 0; i < g_app_timer_count; i++) 
    {
        tm = &g_app_timer_vector[i];
        tm->state = TIMER_STATE_NOUSED;
    }
    
    //初始化为 AP 场景
    g_this_app_timer_tag = APP_TIMER_TAG_MAIN;
    
    return TRUE;
}

/*! \endcond */

/*! \cond */

//创建应用级定时器
static inline int8 __set_timer(timer_attrb_e attrb, timer_type_e type, uint16 timeout, timer_proc func_proc)
{
    app_timer_t *tm;
    int8 timer_id = V_U8_INVALID;
48454606:	6725      	move	s1,a1
48454608:	ea4b      	neg	v0
4845460a:	ec11      	zeb	a0
4845460c:	e931      	zeh	s1
4845460e:	d204      	sw	v0,16(sp)
48454610:	2628      	beqz	a2,48454662 <.LBE2+0x5c>
    int8 i;
    
    //服务例程不能为NULL
    if(!func_proc)
48454612:	2127      	beqz	s1,48454662 <.LBE2+0x5c>
    {
        return V_U8_INVALID;
    }
    
    //定时周期不能为0
    if(0 == timeout)
48454614:	1015      	b	48454640 <.LBE2+0x3a>
48454616:	d504      	sw	a1,16(sp)
    {
        return V_U8_INVALID;
    }
    
    //检索符合条件的可用软定时器
    for(i = 0; i < g_app_timer_count; i++)
    {
        if(g_app_timer_vector[i].state == TIMER_STATE_NOUSED)
        {
            timer_id = i;
48454618:	b216      	lw	v0,48454670 <.LBE2+0x6a>
            tm = &g_app_timer_vector[timer_id];
            
            //初始化软定时器
            tm->attrb = attrb;
            tm->timeout = timeout;
            tm->timeout_expires = sys_get_ab_timer() + timeout;
4845461a:	c081      	sb	a0,1(s0)
4845461c:	6c00      	li	a0,0
4845461e:	67a4      	move	a1,a0
48454620:	67c4      	move	a2,a0
48454622:	6f1c      	li	a3,28
48454624:	ea40      	jalr	v0
48454626:	c821      	sh	s1,2(s0)
48454628:	970c      	lw	a3,48(sp)
            tm->func_proc = func_proc;
4845462a:	e229      	addu	v0,s1
4845462c:	6e00      	li	a2,0
            tm->type = type;
4845462e:	b512      	lw	a1,48454674 <.LBE2+0x6e>
            tm->tag = g_this_app_timer_tag;
48454630:	d842      	sw	v0,8(s0)
48454632:	d8e3      	sw	a3,12(s0)
48454634:	c0c4      	sb	a2,4(s0)
48454636:	a580      	lbu	a0,0(a1)
48454638:	6b00      	li	v1,0
            tm->state = TIMER_STATE_RUNNING;
4845463a:	c085      	sb	a0,5(s0)
4845463c:	c060      	sb	v1,0(s0)
4845463e:	1010      	b	48454660 <.LBE2+0x5a>
            break;
48454640:	b60a      	lw	a2,48454668 <.LBE2+0x62>
48454642:	6d00      	li	a1,0
48454644:	a660      	lbu	v1,0(a2)
48454646:	ed62      	slt	a1,v1
48454648:	600b      	bteqz	48454660 <.LBE2+0x5a>
4845464a:	b709      	lw	a3,4845466c <.LBE2+0x66>
4845464c:	9f00      	lw	s0,0(a3)
4845464e:	a040      	lbu	v0,0(s0)
48454650:	7202      	cmpi	v0,2
48454652:	60e1      	bteqz	48454616 <.LBE2+0x10>
48454654:	45c1      	addiu	a2,a1,1
48454656:	67a6      	move	a1,a2
48454658:	ed91      	seb	a1
4845465a:	ed62      	slt	a1,v1
4845465c:	4810      	addiu	s0,16
4845465e:	61f7      	btnez	4845464e <.LBE2+0x48>
48454660:	9204      	lw	v0,16(sp)
        }
    }
48454662:	ea91      	seb	v0
48454664:	6475      	restore	40,ra,s0-s1
48454666:	e8a0      	jrc	ra
48454668:	5400      	slti	a0,0
4845466a:	9fc1      	lw	a2,4(a3)
4845466c:	5410      	slti	a0,16
4845466e:	9fc1      	lw	a2,4(a3)
48454670:	6401      	restore	8
48454672:	bfc1      	lwu	a2,4(a3)
48454674:	5414      	slti	a0,20
48454676:	9fc1      	lw	a2,4(a3)

48454678 <modify_app_timer>:
48454678:	64f4      	save	32,ra,s0-s1
4845467a:	ec91      	seb	a0
4845467c:	6705      	move	s0,a1
4845467e:	ea8f      	not	v0,a0
48454680:	e831      	zeh	s0
48454682:	2206      	beqz	v0,48454690 <modify_app_timer+0x18>
48454684:	b60d      	lw	a2,484546b8 <modify_app_timer+0x40>
48454686:	67a4      	move	a1,a0
48454688:	a660      	lbu	v1,0(a2)
4845468a:	ed11      	zeb	a1
4845468c:	ed63      	sltu	a1,v1
4845468e:	6102      	btnez	48454694 <modify_app_timer+0x1c>
48454690:	6a00      	li	v0,0
48454692:	1010      	b	484546b4 <modify_app_timer+0x3c>
48454694:	b10a      	lw	s1,484546bc <modify_app_timer+0x44>
48454696:	3790      	sll	a3,a0,4
48454698:	9980      	lw	a0,0(s1)
4845469a:	6750      	move	v0,s0
4845469c:	e4e5      	addu	s1,a0,a3
4845469e:	200a      	beqz	s0,484546b4 <modify_app_timer+0x3c>
484546a0:	6c00      	li	a0,0
484546a2:	b208      	lw	v0,484546c0 <modify_app_timer+0x48>
484546a4:	c901      	sh	s0,2(s1)
484546a6:	67a4      	move	a1,a0
484546a8:	67c4      	move	a2,a0
484546aa:	ea40      	jalr	v0
484546ac:	6f1c      	li	a3,28
484546ae:	e209      	addu	v0,s0
484546b0:	d942      	sw	v0,8(s1)
484546b2:	6a01      	li	v0,1
484546b4:	6474      	restore	32,ra,s0-s1
484546b6:	e8a0      	jrc	ra
484546b8:	5400      	slti	a0,0
484546ba:	9fc1      	lw	a2,4(a3)
484546bc:	5410      	slti	a0,16
484546be:	9fc1      	lw	a2,4(a3)
484546c0:	6401      	restore	8
484546c2:	bfc1      	lwu	a2,4(a3)

484546c4 <stop_app_timer>:
484546c4:	ec91      	seb	a0
484546c6:	ea8f      	not	v0,a0
484546c8:	2206      	beqz	v0,484546d6 <stop_app_timer+0x12>
484546ca:	b609      	lw	a2,484546ec <stop_app_timer+0x28>
484546cc:	67a4      	move	a1,a0
484546ce:	a660      	lbu	v1,0(a2)
484546d0:	ed11      	zeb	a1
484546d2:	ed63      	sltu	a1,v1
484546d4:	6102      	btnez	484546da <stop_app_timer+0x16>
484546d6:	e820      	jr	ra
484546d8:	6a00      	li	v0,0
484546da:	b506      	lw	a1,484546f0 <stop_app_timer+0x2c>
484546dc:	3390      	sll	v1,a0,4
484546de:	9d40      	lw	v0,0(a1)
484546e0:	6f01      	li	a3,1
484546e2:	e271      	addu	a0,v0,v1
484546e4:	6a01      	li	v0,1
484546e6:	e820      	jr	ra
484546e8:	c4e0      	sb	a3,0(a0)
484546ea:	0000      	addiu	s0,sp,0
484546ec:	5400      	slti	a0,0
484546ee:	9fc1      	lw	a2,4(a3)
484546f0:	5410      	slti	a0,16
484546f2:	9fc1      	lw	a2,4(a3)

484546f4 <restart_app_timer>:
484546f4:	64e3      	save	24,ra,s0
484546f6:	ec91      	seb	a0
484546f8:	ea8f      	not	v0,a0
484546fa:	2206      	beqz	v0,48454708 <restart_app_timer+0x14>
484546fc:	b60d      	lw	a2,48454730 <restart_app_timer+0x3c>
484546fe:	67a4      	move	a1,a0
48454700:	a660      	lbu	v1,0(a2)
48454702:	ed11      	zeb	a1
48454704:	ed63      	sltu	a1,v1
48454706:	6102      	btnez	4845470c <restart_app_timer+0x18>
48454708:	6a00      	li	v0,0
4845470a:	1010      	b	4845472c <restart_app_timer+0x38>
4845470c:	b60a      	lw	a2,48454734 <restart_app_timer+0x40>
4845470e:	3590      	sll	a1,a0,4
48454710:	9e00      	lw	s0,0(a2)
48454712:	6c00      	li	a0,0
48454714:	e0a1      	addu	s0,a1
48454716:	6b00      	li	v1,0
48454718:	b208      	lw	v0,48454738 <restart_app_timer+0x44>
4845471a:	67a4      	move	a1,a0
4845471c:	67c4      	move	a2,a0
4845471e:	6f1c      	li	a3,28
48454720:	ea40      	jalr	v0
48454722:	c060      	sb	v1,0(s0)
48454724:	a8e1      	lhu	a3,2(s0)
48454726:	e2f1      	addu	a0,v0,a3
48454728:	d882      	sw	a0,8(s0)
4845472a:	6a01      	li	v0,1
4845472c:	6463      	restore	24,ra,s0
4845472e:	e8a0      	jrc	ra
48454730:	5400      	slti	a0,0
48454732:	9fc1      	lw	a2,4(a3)
48454734:	5410      	slti	a0,16
48454736:	9fc1      	lw	a2,4(a3)
48454738:	6401      	restore	8
4845473a:	bfc1      	lwu	a2,4(a3)

4845473c <kill_app_timer>:
4845473c:	ec91      	seb	a0
4845473e:	ea8f      	not	v0,a0
48454740:	2206      	beqz	v0,4845474e <kill_app_timer+0x12>
48454742:	b609      	lw	a2,48454764 <kill_app_timer+0x28>
48454744:	67a4      	move	a1,a0
48454746:	a660      	lbu	v1,0(a2)
48454748:	ed11      	zeb	a1
4845474a:	ed63      	sltu	a1,v1
4845474c:	6102      	btnez	48454752 <kill_app_timer+0x16>
4845474e:	e820      	jr	ra
48454750:	6a00      	li	v0,0
48454752:	b506      	lw	a1,48454768 <kill_app_timer+0x2c>
48454754:	3390      	sll	v1,a0,4
48454756:	9d40      	lw	v0,0(a1)
48454758:	6f02      	li	a3,2
4845475a:	e271      	addu	a0,v0,v1
4845475c:	6a01      	li	v0,1
4845475e:	e820      	jr	ra
48454760:	c4e0      	sb	a3,0(a0)
48454762:	0000      	addiu	s0,sp,0
48454764:	5400      	slti	a0,0
48454766:	9fc1      	lw	a2,4(a3)
48454768:	5410      	slti	a0,16
4845476a:	9fc1      	lw	a2,4(a3)

4845476c <init_app_timers>:
4845476c:	ed11      	zeb	a1
4845476e:	6745      	move	v0,a1
48454770:	2515      	beqz	a1,4845479c <init_app_timers+0x30>
48454772:	b70c      	lw	a3,484547a0 <init_app_timers+0x34>
48454774:	b60c      	lw	a2,484547a4 <init_app_timers+0x38>
48454776:	df80      	sw	a0,0(a3)
48454778:	c6a0      	sb	a1,0(a2)
4845477a:	6c00      	li	a0,0
4845477c:	250b      	beqz	a1,48454794 <init_app_timers+0x28>
4845477e:	6d02      	li	a1,2
48454780:	9f40      	lw	v0,0(a3)
48454782:	3390      	sll	v1,a0,4
48454784:	e269      	addu	v0,v1
48454786:	c2a0      	sb	a1,0(v0)
48454788:	4461      	addiu	v1,a0,1
4845478a:	6783      	move	a0,v1
4845478c:	a640      	lbu	v0,0(a2)
4845478e:	ec11      	zeb	a0
48454790:	ec43      	sltu	a0,v0
48454792:	61f6      	btnez	48454780 <init_app_timers+0x14>
48454794:	b405      	lw	a0,484547a8 <init_app_timers+0x3c>
48454796:	6d00      	li	a1,0
48454798:	c4a0      	sb	a1,0(a0)
4845479a:	6a01      	li	v0,1
4845479c:	e8a0      	jrc	ra
4845479e:	0000      	addiu	s0,sp,0
484547a0:	5410      	slti	a0,16
484547a2:	9fc1      	lw	a2,4(a3)
484547a4:	5400      	slti	a0,0
484547a6:	9fc1      	lw	a2,4(a3)
484547a8:	5414      	slti	a0,20
484547aa:	9fc1      	lw	a2,4(a3)
	...
Disassembly of section BANK_UI_1_18:

48494600 <applib_message_init>:
48494600:	64f4      	save	32,ra,s0-s1
 * \endcode
 * \note 
*******************************************************************************/
bool applib_message_init(app_msg_dispatch msg_dispatch)
{
48494602:	b00d      	lw	s0,48494634 <applib_message_init+0x34>
    if(g_this_app_info->app_type == APP_TYPE_GUI)
48494604:	6724      	move	s1,a0
48494606:	9860      	lw	v1,0(s0)
48494608:	a342      	lbu	v0,2(v1)
4849460a:	7201      	cmpi	v0,1
4849460c:	6108      	btnez	4849461e <applib_message_init+0x1e>
4849460e:	6d00      	li	a1,0
    {
        //清空 gui 消息队列
        sys_mq_flush(MQ_ID_GUI);
48494610:	b20a      	lw	v0,48494638 <applib_message_init+0x38>
48494612:	6c06      	li	a0,6
48494614:	67c5      	move	a2,a1
48494616:	ea40      	jalr	v0
48494618:	6f1a      	li	a3,26
4849461a:	b409      	lw	a0,4849463c <applib_message_init+0x3c>
        
        //注册前台应用消息分发函数，以供 common 模块调用
        g_this_app_msg_dispatch = msg_dispatch;
4849461c:	dc20      	sw	s1,0(a0)
4849461e:	98a0      	lw	a1,0(s0)
    }
    
    //清空 应用消息队列
    sys_mq_flush(g_this_app_info->mq_id);
48494620:	b206      	lw	v0,48494638 <applib_message_init+0x38>
48494622:	a583      	lbu	a0,3(a1)
48494624:	6d00      	li	a1,0
48494626:	67c5      	move	a2,a1
48494628:	ea40      	jalr	v0
4849462a:	6f1a      	li	a3,26
4849462c:	6a01      	li	v0,1
    
    return TRUE;
}
4849462e:	6474      	restore	32,ra,s0-s1
48494630:	e8a0      	jrc	ra
48494632:	0000      	addiu	s0,sp,0
48494634:	5404      	slti	a0,4
48494636:	9fc1      	lw	a2,4(a3)
48494638:	6401      	restore	8
4849463a:	bfc1      	lwu	a2,4(a3)
4849463c:	540c      	slti	a0,12
4849463e:	9fc1      	lw	a2,4(a3)

48494640 <__app_running_get_app_info>:
48494640:	5c12      	sltiu	a0,18
{
    app_info_t *app;
    uint8 i;
    
    if(app_id >= APP_ID_MAX)
48494642:	6a00      	li	v0,0
    {
        return NULL;
48494644:	6015      	bteqz	48494670 <__app_running_get_app_info+0x30>
48494646:	1002      	b	4849464c <__app_running_get_app_info+0xc>
48494648:	e820      	jr	ra
    }

    for(i = 0; i < MAX_APP_COUNT; i++)
    {
        app = &g_app_info_vector[i];
        if((app->used == 1) && (app->app_id == app_id))
        {
            return app;
4849464a:	6743      	move	v0,v1
4849464c:	6d00      	li	a1,0
4849464e:	6b0c      	li	v1,12
48494650:	ed78      	mult	a1,v1
48494652:	b709      	lw	a3,48494674 <__app_running_get_app_info+0x34>
48494654:	ee12      	mflo	a2
48494656:	e6ed      	addu	v1,a2,a3
48494658:	a340      	lbu	v0,0(v1)
4849465a:	7201      	cmpi	v0,1
4849465c:	6103      	btnez	48494664 <__app_running_get_app_info+0x24>
4849465e:	a341      	lbu	v0,1(v1)
48494660:	ea8e      	xor	v0,a0
48494662:	22f2      	beqz	v0,48494648 <__app_running_get_app_info+0x8>
48494664:	45e1      	addiu	a3,a1,1
48494666:	67a7      	move	a1,a3
48494668:	ed11      	zeb	a1
4849466a:	5d03      	sltiu	a1,3
4849466c:	61f0      	btnez	4849464e <__app_running_get_app_info+0xe>
4849466e:	6a00      	li	v0,0
        }
    }

    return NULL;
48494670:	e8a0      	jrc	ra
}
48494672:	0000      	addiu	s0,sp,0
48494674:	a194      	lbu	a0,20(s1)
48494676:	9fc1      	lw	a2,4(a3)

48494678 <send_sync_msg>:
48494678:	f00e 64f8 	save	a0-a3,64,ra,s0-s1
4849467c:	b133      	lw	s1,48494748 <send_sync_msg+0xd0>
4849467e:	6704      	move	s0,a0
48494680:	6d00      	li	a1,0
48494682:	6a01      	li	v0,1
48494684:	9980      	lw	a0,0(s1)
48494686:	b332      	lw	v1,4849474c <send_sync_msg+0xd4>
48494688:	e811      	zeb	s0
4849468a:	67c5      	move	a2,a1
4849468c:	6f14      	li	a3,20
4849468e:	eb40      	jalr	v1
48494690:	d20b      	sw	v0,44(sp)
48494692:	1a50 5190 	jal	48494640 <__app_running_get_app_info>
48494696:	6790      	move	a0,s0
48494698:	6702      	move	s0,v0
4849469a:	2a08      	bnez	v0,484946ac <send_sync_msg+0x34>
4849469c:	9980      	lw	a0,0(s1)
4849469e:	b32c      	lw	v1,4849474c <send_sync_msg+0xd4>
484946a0:	67a2      	move	a1,v0
484946a2:	67c2      	move	a2,v0
484946a4:	eb40      	jalr	v1
484946a6:	6f16      	li	a3,22
484946a8:	6750      	move	v0,s0
484946aa:	104b      	b	48494742 <send_sync_msg+0xca>
484946ac:	b529      	lw	a1,48494750 <send_sync_msg+0xd8>
484946ae:	9d80      	lw	a0,0(a1)
484946b0:	ec4e      	xor	a0,v0
484946b2:	2c07      	bnez	a0,484946c2 <send_sync_msg+0x4a>
484946b4:	6d00      	li	a1,0
484946b6:	9980      	lw	a0,0(s1)
484946b8:	b325      	lw	v1,4849474c <send_sync_msg+0xd4>
484946ba:	67c5      	move	a2,a1
484946bc:	eb40      	jalr	v1
484946be:	6f16      	li	a3,22
484946c0:	1029      	b	48494714 <send_sync_msg+0x9c>
484946c2:	9511      	lw	a1,68(sp)
484946c4:	b322      	lw	v1,4849474c <send_sync_msg+0xd4>
484946c6:	0404      	addiu	a0,sp,16
484946c8:	6e08      	li	a2,8
484946ca:	eb40      	jalr	v1
484946cc:	6f00      	li	a3,0
484946ce:	6d00      	li	a1,0
484946d0:	b31f      	lw	v1,4849474c <send_sync_msg+0xd4>
484946d2:	67c5      	move	a2,a1
484946d4:	6f12      	li	a3,18
484946d6:	eb40      	jalr	v1
484946d8:	040a      	addiu	a0,sp,40
484946da:	970a      	lw	a3,40(sp)
484946dc:	9612      	lw	a2,72(sp)
484946de:	d706      	sw	a3,24(sp)
484946e0:	2e03      	bnez	a2,484946e8 <send_sync_msg+0x70>
484946e2:	0208      	addiu	v0,sp,32
484946e4:	d207      	sw	v0,28(sp)
484946e6:	1002      	b	484946ec <send_sync_msg+0x74>
484946e8:	9412      	lw	a0,72(sp)
484946ea:	d407      	sw	a0,28(sp)
484946ec:	a083      	lbu	a0,3(s0)
484946ee:	b01a      	lw	s0,48494754 <send_sync_msg+0xdc>
484946f0:	0504      	addiu	a1,sp,16
484946f2:	6e00      	li	a2,0
484946f4:	e840      	jalr	s0
484946f6:	6f18      	li	a3,24
484946f8:	ed4f      	not	a1,v0
484946fa:	b015      	lw	s0,4849474c <send_sync_msg+0xd4>
484946fc:	2d0d      	bnez	a1,48494718 <send_sync_msg+0xa0>
484946fe:	6d00      	li	a1,0
48494700:	67c5      	move	a2,a1
48494702:	040a      	addiu	a0,sp,40
48494704:	e840      	jalr	s0
48494706:	6f13      	li	a3,19
48494708:	b610      	lw	a2,48494748 <send_sync_msg+0xd0>
4849470a:	6d00      	li	a1,0
4849470c:	9e80      	lw	a0,0(a2)
4849470e:	6f16      	li	a3,22
48494710:	e840      	jalr	s0
48494712:	67c5      	move	a2,a1
48494714:	6a00      	li	v0,0
48494716:	1015      	b	48494742 <send_sync_msg+0xca>
48494718:	940a      	lw	a0,40(sp)
4849471a:	9513      	lw	a1,76(sp)
4849471c:	6e00      	li	a2,0
4849471e:	e840      	jalr	s0
48494720:	6f14      	li	a3,20
48494722:	5200      	slti	v0,0
48494724:	6002      	bteqz	4849472a <send_sync_msg+0xb2>
48494726:	6f00      	li	a3,0
48494728:	d70b      	sw	a3,44(sp)
4849472a:	6d00      	li	a1,0
4849472c:	67c5      	move	a2,a1
4849472e:	040a      	addiu	a0,sp,40
48494730:	e840      	jalr	s0
48494732:	6f13      	li	a3,19
48494734:	b305      	lw	v1,48494748 <send_sync_msg+0xd0>
48494736:	6d00      	li	a1,0
48494738:	9b80      	lw	a0,0(v1)
4849473a:	67c5      	move	a2,a1
4849473c:	e840      	jalr	s0
4849473e:	6f16      	li	a3,22
48494740:	920b      	lw	v0,44(sp)
48494742:	6478      	restore	64,ra,s0-s1
48494744:	e8a0      	jrc	ra
48494746:	0000      	addiu	s0,sp,0
48494748:	5408      	slti	a0,8
4849474a:	9fc1      	lw	a2,4(a3)
4849474c:	6405      	restore	40
4849474e:	bfc1      	lwu	a2,4(a3)
48494750:	5404      	slti	a0,4
48494752:	9fc1      	lw	a2,4(a3)
48494754:	6401      	restore	8
48494756:	bfc1      	lwu	a2,4(a3)

48494758 <send_async_msg>:
48494758:	64f6      	save	48,ra,s0-s1
4849475a:	ec11      	zeb	a0
4849475c:	1a50 5190 	jal	48494640 <__app_running_get_app_info>
48494760:	6725      	move	s1,a1
48494762:	6702      	move	s0,v0
48494764:	651a      	move	t8,v0
48494766:	2210      	beqz	v0,48494788 <send_async_msg+0x30>
48494768:	b20a      	lw	v0,48494790 <send_async_msg+0x38>
4849476a:	0404      	addiu	a0,sp,16
4849476c:	67b1      	move	a1,s1
4849476e:	6e08      	li	a2,8
48494770:	ea40      	jalr	v0
48494772:	6f00      	li	a3,0
48494774:	a083      	lbu	a0,3(s0)
48494776:	b208      	lw	v0,48494794 <send_async_msg+0x3c>
48494778:	0504      	addiu	a1,sp,16
4849477a:	6e00      	li	a2,0
4849477c:	ea40      	jalr	v0
4849477e:	6f18      	li	a3,24
48494780:	eb4f      	not	v1,v0
48494782:	5b01      	sltiu	v1,1
48494784:	6758      	move	v0,t8
48494786:	5a01      	sltiu	v0,1
48494788:	6758      	move	v0,t8
4849478a:	6476      	restore	48,ra,s0-s1
4849478c:	e8a0      	jrc	ra
4849478e:	0000      	addiu	s0,sp,0
48494790:	6405      	restore	40
48494792:	bfc1      	lwu	a2,4(a3)
48494794:	6401      	restore	8
48494796:	bfc1      	lwu	a2,4(a3)

48494798 <reply_sync_msg>:
48494798:	64c3      	save	24,ra
4849479a:	9c82      	lw	a0,8(a0)
4849479c:	6d00      	li	a1,0
4849479e:	b204      	lw	v0,484947ac <reply_sync_msg+0x14>
484947a0:	67c5      	move	a2,a1
484947a2:	ea40      	jalr	v0
484947a4:	6f16      	li	a3,22
484947a6:	6a01      	li	v0,1
484947a8:	6443      	restore	24,ra
484947aa:	e8a0      	jrc	ra
484947ac:	6405      	restore	40
484947ae:	bfc1      	lwu	a2,4(a3)

484947b0 <broadcast_msg>:
484947b0:	64f4      	save	32,ra,s0-s1
 * \note 
 * \li  广播应用消息最多只能附带4个字节的消息内容（建议采用双方约定code作为消息内容）。
*******************************************************************************/
bool broadcast_msg(msg_apps_t *msg)
{
484947b2:	6724      	move	s1,a0
484947b4:	6800      	li	s0,0
    app_info_t *app;
    uint8 i;

    //广播该消息给所有应用
    for(i = 0; i < MAX_APP_COUNT; i++)
484947b6:	6b0c      	li	v1,12
    {
        app = &g_app_info_vector[i];
484947b8:	e878      	mult	s0,v1
484947ba:	b50a      	lw	a1,484947e0 <broadcast_msg+0x30>
484947bc:	ec12      	mflo	a0
484947be:	e4ad      	addu	v1,a0,a1
484947c0:	a340      	lbu	v0,0(v1)
        if(app->used == 1)
484947c2:	7201      	cmpi	v0,1
484947c4:	6104      	btnez	484947ce <broadcast_msg+0x1e>
484947c6:	a381      	lbu	a0,1(v1)
        {
            send_async_msg(app->app_id, msg);
484947c8:	b207      	lw	v0,484947e4 <broadcast_msg+0x34>
484947ca:	ea40      	jalr	v0
484947cc:	67b1      	move	a1,s1
484947ce:	40c1      	addiu	a2,s0,1
484947d0:	6706      	move	s0,a2
484947d2:	e811      	zeb	s0
484947d4:	5803      	sltiu	s0,3
484947d6:	61ef      	btnez	484947b6 <broadcast_msg+0x6>
484947d8:	6a01      	li	v0,1
        }
    }

    return TRUE;
}
484947da:	6474      	restore	32,ra,s0-s1
484947dc:	e8a0      	jrc	ra
484947de:	0000      	addiu	s0,sp,0
484947e0:	a194      	lbu	a0,20(s1)
484947e2:	9fc1      	lw	a2,4(a3)
484947e4:	4759      	daddiu	v0,a3,-7
484947e6:	4849      	addiu	s0,73

484947e8 <broadcast_msg_sys>:
484947e8:	64f4      	save	32,ra,s0-s1

/******************************************************************************/
/*!                    
 * \par  Description:
 *    以广播方式（也属于异步发送）发送应用私有消息。
 * \param[in]    msg 指向要发送的应用消息结构体
 * \param[out]   none
 * \return       bool
 * \retval           TRUE 广播消息成功。
 * \retval           FALSE 广播消息失败。
 * \ingroup      applib_msg
 * \par          exmaple code
 * \code
    例子1：广播系统消息，见 get_sys_msg 实现
 * \endcode
 * \note 
 * \li  广播应用消息最多只能附带4个字节的消息内容（建议采用双方约定code作为消息内容）。
 * \li  该接口不会把系统消息广播到 manager ap 私有消息队列中。
*******************************************************************************/
bool broadcast_msg_sys(msg_apps_t *msg)
{
484947ea:	6724      	move	s1,a0
484947ec:	6800      	li	s0,0
    app_info_t *app;
    uint8 i;
    
/*    if(msg->type == MSG_RECLAIM)//nandflash reclaim，只发送给 manager AP
    {
        if(g_this_app_info->app_id != APP_ID_UDISK)//U 盘连接下不处理
        {
            send_async_msg(APP_ID_MANAGER, msg);
        }
        return TRUE;
    }*/

    //广播该消息给所有应用
    for(i = 0; i < MAX_APP_COUNT; i++)
484947ee:	6c0c      	li	a0,12
    {
        app = &g_app_info_vector[i];
484947f0:	e898      	mult	s0,a0
484947f2:	b50b      	lw	a1,4849481c <broadcast_msg_sys+0x34>
484947f4:	eb12      	mflo	v1
484947f6:	e3b1      	addu	a0,v1,a1
484947f8:	a440      	lbu	v0,0(a0)
        if((app->used == 1) && (app->app_id != APP_ID_MANAGER))
484947fa:	7201      	cmpi	v0,1
484947fc:	6106      	btnez	4849480a <broadcast_msg_sys+0x22>
484947fe:	a481      	lbu	a0,1(a0)
48494800:	7408      	cmpi	a0,8
48494802:	6003      	bteqz	4849480a <broadcast_msg_sys+0x22>
48494804:	b207      	lw	v0,48494820 <broadcast_msg_sys+0x38>
        {
            send_async_msg(app->app_id, msg);
48494806:	ea40      	jalr	v0
48494808:	67b1      	move	a1,s1
4849480a:	40c1      	addiu	a2,s0,1
4849480c:	6706      	move	s0,a2
4849480e:	e811      	zeb	s0
48494810:	5803      	sltiu	s0,3
48494812:	61ed      	btnez	484947ee <broadcast_msg_sys+0x6>
48494814:	6a01      	li	v0,1
        }
    }

    return TRUE;
}
48494816:	6474      	restore	32,ra,s0-s1
48494818:	e8a0      	jrc	ra
4849481a:	0000      	addiu	s0,sp,0
4849481c:	a194      	lbu	a0,20(s1)
4849481e:	9fc1      	lw	a2,4(a3)
48494820:	4759      	daddiu	v0,a3,-7
48494822:	4849      	addiu	s0,73
	...
Disassembly of section BANK_UI_1_20:

48514600 <com_open_config_file>:
48514600:	64e5      	save	40,ra,s0
 * \li  该接口只在 manager ap的 globe_data_init 中调用一次，也就是说在系统启动时
 *      进行一次打开初始化，之后任何地方读取应用配置项时都无须打开。
 *******************************************************************************/
bool com_open_config_file(const char* config_file)
{
48514602:	6d00      	li	a1,0
    uint8 head[16];

    config_fp = sys_sd_fopen(config_file);
48514604:	b011      	lw	s0,48514648 <com_open_config_file+0x48>
48514606:	67c5      	move	a2,a1
48514608:	e840      	jalr	s0
4851460a:	6f0d      	li	a3,13
4851460c:	6782      	move	a0,v0
4851460e:	b20e      	lw	v0,48514644 <com_open_config_file+0x44>
48514610:	6764      	move	v1,a0
    if (config_fp == NULL)
    {
        return FALSE;
48514612:	da80      	sw	a0,0(v0)
48514614:	2413      	beqz	a0,4851463c <com_open_config_file+0x3c>
48514616:	0504      	addiu	a1,sp,16
    }

    if (sys_sd_fread(config_fp, head, 16) == -1)
48514618:	6e10      	li	a2,16
4851461a:	e840      	jalr	s0
4851461c:	6f11      	li	a3,17
4851461e:	ec4f      	not	a0,v0
48514620:	6b00      	li	v1,0
    {
        return FALSE;
48514622:	240c      	beqz	a0,4851463c <com_open_config_file+0x3c>
48514624:	677d      	move	v1,sp
    }

    if ((head[0] != 'c') || (head[1] != 'f') || (head[2] != 'g'))
48514626:	a3b0      	lbu	a1,16(v1)
48514628:	7563      	cmpi	a1,99
4851462a:	6107      	btnez	4851463a <com_open_config_file+0x3a>
4851462c:	a3d1      	lbu	a2,17(v1)
4851462e:	7666      	cmpi	a2,102
48514630:	6104      	btnez	4851463a <com_open_config_file+0x3a>
48514632:	a3f2      	lbu	a3,18(v1)
48514634:	6b01      	li	v1,1
    {
        return FALSE;
    }

    return TRUE;
48514636:	7767      	cmpi	a3,103
48514638:	6001      	bteqz	4851463c <com_open_config_file+0x3c>
4851463a:	6b00      	li	v1,0
4851463c:	6743      	move	v0,v1
}
4851463e:	6465      	restore	40,ra,s0
48514640:	e8a0      	jrc	ra
48514642:	0000      	addiu	s0,sp,0
48514644:	a190      	lbu	a0,16(s1)
48514646:	9fc1      	lw	a2,4(a3)
48514648:	6401      	restore	8
4851464a:	bfc1      	lwu	a2,4(a3)

4851464c <com_get_config_struct>:
4851464c:	f008 64f6 	save	a0-a1,48,ra,s0-s1

/******************************************************************************/
/*!
 * \par  Description:
 *    关闭应用配置脚本文件。
 * \param[in]    none
 * \param[out]   none
 * \return       bool
 * \retval           TRUE 关闭应用配置脚本成功。
 * \retval           FALSE 关闭应用配置脚本失败。
 * \ingroup      common_func
 * \note
 *******************************************************************************/
#if 0
bool com_close_config_file(void)
{
    if (sys_sd_fclose(config_fp) == -1)
    {
        return FALSE;
    }

    return TRUE;
}
#endif

/******************************************************************************/
/*!
 * \par  Description:
 *    读取应用配置项。
 * \param[in]    config_id 配置参数ID
 * \param[in]    buf_len 参数输出缓冲区大小
 * \param[out]   buf 参数输出缓冲区
 * \return       bool
 * \retval           TRUE 读取配置项成功。
 * \retval           FALSE 读取配置项失败。
 * \ingroup      common_func
 * \ingroup      common_func
 * \par          exmaple code
 * \code
 例子1：获取背光亮度时间参数结构体
 if(com_get_config_struct(CONFIG_ID_LIGHT_TIME, config_buf, CONFIG_BUF_LEN) == TRUE)
 {
 config_nonlinear_t *config_param;

 config_param = (config_nonlinear_t *)config_buf;
 然后就可以对 config_param 按 config_nonlinear_t 结构进行访问
 }
 else
 {
 没有找到该应用配置项
 }
 * \endcode
 * \note
 * \li  取可变长的 config_string_t 和 config_nonlinear_t，必须先根据使用场合申请最大
 *      的config参数的 uint8 缓冲区并读取数据，读取成功后把该缓冲区强制转换为
 *      config_string_t 或 config_nonlinear_t 类型指针，然后就可以按照 config_string_t
 *      和 config_nonlinear_t类型进行访问。
 *******************************************************************************/
bool com_get_config_struct(uint16 config_id, uint8 *buf, uint16 buf_len)
{
48514650:	67a4      	move	a1,a0
48514652:	ed31      	zeh	a1
48514654:	b118      	lw	s1,485146b4 <com_get_config_struct+0x68>
    config_index_t temp_index;

    //读取配置项索引结构体
    if (sys_sd_fseek(config_fp, SEEK_SET, 16 + config_id * sizeof(config_index_t)) == -1)
48514656:	33ac      	sll	v1,a1,3
48514658:	ee31      	zeh	a2
4851465a:	d606      	sw	a2,24(sp)
4851465c:	9980      	lw	a0,0(s1)
4851465e:	67c3      	move	a2,v1
48514660:	b016      	lw	s0,485146b8 <com_get_config_struct+0x6c>
48514662:	6d00      	li	a1,0
48514664:	4e10      	addiu	a2,16
48514666:	e840      	jalr	s0
48514668:	6f0f      	li	a3,15
4851466a:	ea4f      	not	v0
4851466c:	6b00      	li	v1,0
    {
        return FALSE;
4851466e:	221f      	beqz	v0,485146ae <com_get_config_struct+0x62>
48514670:	9980      	lw	a0,0(s1)
    }
    if (sys_sd_fread(config_fp, &temp_index, sizeof(config_index_t)) == -1)
48514672:	0504      	addiu	a1,sp,16
48514674:	6e08      	li	a2,8
48514676:	e840      	jalr	s0
48514678:	6f11      	li	a3,17
4851467a:	ec4f      	not	a0,v0
4851467c:	6b00      	li	v1,0
    {
        return FALSE;
4851467e:	2417      	beqz	a0,485146ae <com_get_config_struct+0x62>
48514680:	9604      	lw	a2,16(sp)
    }

    //读取配置项内容
    if (sys_sd_fseek(config_fp, SEEK_SET, temp_index.offset) == -1)
48514682:	9980      	lw	a0,0(s1)
48514684:	67a3      	move	a1,v1
48514686:	e840      	jalr	s0
48514688:	6f0f      	li	a3,15
4851468a:	ee4f      	not	a2,v0
4851468c:	6b00      	li	v1,0
    {
        return FALSE;
4851468e:	260f      	beqz	a2,485146ae <com_get_config_struct+0x62>
48514690:	9605      	lw	a2,20(sp)
    }
    if (temp_index.length > buf_len)
48514692:	9206      	lw	v0,24(sp)
48514694:	9980      	lw	a0,0(s1)
48514696:	eac3      	sltu	v0,a2
48514698:	6003      	bteqz	485146a0 <com_get_config_struct+0x54>
4851469a:	950d      	lw	a1,52(sp)
    {
        if (sys_sd_fread(config_fp, buf, buf_len) == -1)
4851469c:	67c2      	move	a2,v0
4851469e:	1001      	b	485146a2 <com_get_config_struct+0x56>
485146a0:	950d      	lw	a1,52(sp)
        {
            return FALSE;
        }
    }
    else
    {
        if (sys_sd_fread(config_fp, buf, temp_index.length) == -1)
485146a2:	e840      	jalr	s0
485146a4:	6f11      	li	a3,17
485146a6:	ef4f      	not	a3,v0
485146a8:	6b00      	li	v1,0
        {
            return FALSE;
485146aa:	2701      	beqz	a3,485146ae <com_get_config_struct+0x62>
485146ac:	6b01      	li	v1,1
        }
    }

    return TRUE;
485146ae:	6743      	move	v0,v1
}
485146b0:	6476      	restore	48,ra,s0-s1
485146b2:	e8a0      	jrc	ra
485146b4:	a190      	lbu	a0,16(s1)
485146b6:	9fc1      	lw	a2,4(a3)
485146b8:	6401      	restore	8
485146ba:	bfc1      	lwu	a2,4(a3)

485146bc <com_get_config_default>:
485146bc:	64f6      	save	48,ra,s0-s1

/******************************************************************************/
/*!
 * \par  Description:
 *    读取应用配置项默认值。
 * \param[in]    config_id 配置参数ID
 * \param[out]   none
 * \return       uint16
 * \retval           返回读取到的应用配置项默认值。
 * \ingroup      common_func
 * \ingroup      common_func
 * \par          exmaple code
 * \code
 例子1：获取背光亮度时间默认值
 light_time = com_get_config_default(CONFIG_ID_LIGHT_TIME);
 * \endcode
 * \note
 * \li  仅用于数值型参数，并由用户保证 config_id 正确，若找不到配置项则返回0。
 *******************************************************************************/
uint16 com_get_config_default(uint16 config_id)
{
485146be:	67c4      	move	a2,a0
485146c0:	b115      	lw	s1,48514714 <com_get_config_default+0x58>
    config_index_t temp_index;
    uint16 default_value;

    //读取配置项索引结构体
    if (sys_sd_fseek(config_fp, SEEK_SET, 16 + config_id * sizeof(config_index_t)) == -1)
485146c2:	ee31      	zeh	a2
485146c4:	36cc      	sll	a2,3
485146c6:	9980      	lw	a0,0(s1)
485146c8:	b014      	lw	s0,48514718 <com_get_config_default+0x5c>
485146ca:	6d00      	li	a1,0
485146cc:	4e10      	addiu	a2,16
485146ce:	e840      	jalr	s0
485146d0:	6f0f      	li	a3,15
485146d2:	ea4f      	not	v0
485146d4:	6b00      	li	v1,0
    {
        return 0;
485146d6:	221a      	beqz	v0,4851470c <com_get_config_default+0x50>
485146d8:	9980      	lw	a0,0(s1)
    }
    if (sys_sd_fread(config_fp, &temp_index, sizeof(config_index_t)) == -1)
485146da:	0504      	addiu	a1,sp,16
485146dc:	6e08      	li	a2,8
485146de:	e840      	jalr	s0
485146e0:	6f11      	li	a3,17
485146e2:	ec4f      	not	a0,v0
485146e4:	6b00      	li	v1,0
    {
        return 0;
485146e6:	2412      	beqz	a0,4851470c <com_get_config_default+0x50>
485146e8:	9980      	lw	a0,0(s1)
    }

    //读取配置项内容
    if (sys_sd_fseek(config_fp, SEEK_SET, temp_index.offset) == -1)
485146ea:	9604      	lw	a2,16(sp)
485146ec:	67a3      	move	a1,v1
485146ee:	e840      	jalr	s0
485146f0:	6f0f      	li	a3,15
485146f2:	ed4f      	not	a1,v0
485146f4:	6b00      	li	v1,0
    {
        return 0;
485146f6:	250a      	beqz	a1,4851470c <com_get_config_default+0x50>
485146f8:	9980      	lw	a0,0(s1)
    }
    if (sys_sd_fread(config_fp, &default_value, sizeof(uint16)) == -1)
485146fa:	6f11      	li	a3,17
485146fc:	0506      	addiu	a1,sp,24
485146fe:	e840      	jalr	s0
48514700:	6e02      	li	a2,2
48514702:	ef4f      	not	a3,v0
48514704:	6b00      	li	v1,0
    {
        return 0;
48514706:	2702      	beqz	a3,4851470c <com_get_config_default+0x50>
48514708:	675d      	move	v0,sp
    }

    return default_value;
4851470a:	aa6c      	lhu	v1,24(v0)
4851470c:	6743      	move	v0,v1
}
4851470e:	6476      	restore	48,ra,s0-s1
48514710:	e8a0      	jrc	ra
48514712:	0000      	addiu	s0,sp,0
48514714:	a190      	lbu	a0,16(s1)
48514716:	9fc1      	lw	a2,4(a3)
48514718:	6401      	restore	8
4851471a:	bfc1      	lwu	a2,4(a3)
	...
Disassembly of section BANK_UI_1_21:

48554600 <delete_key_map_list>:
48554600:	0004 0400 2801 007f 3f00 0000 0004 1000     .....(...?......
	...

48554618 <dialog_key_map_list>:
48554618:	0002 3800 2001 0003 3800 2002 0001 0400     ...8. ...8. ....
48554628:	2003 0004 0400 2004 0007 0400 2004 0000     . ..... ..... ..
48554638:	0000 0000                                   ....

4855463c <directory_key_map_list>:
4855463c:	0002 3800 2702 0002 0400 2703 0003 3800     ...8.'.....'...8
4855464c:	2701 0003 0400 2703 0001 0400 2704 0004     .'.....'.....'..
4855465c:	0400 2705 0007 0400 2706 0000 0000 0000     ...'.....'......

4855466c <keylock_list>:
4855466c:	000c 2000 0022 000d 2000 0022 0004 1800     ... ".... ".....
	...

48554684 <menulist_key_map_list>:
48554684:	0002 3800 2602 0003 3800 2601 0001 0400     ...8.&...8.&....
48554694:	2603 0004 0400 2604 0007 0400 2605 0000     .&.....&.....&..
485546a4:	0000 0000                                   ....

485546a8 <parameter_key_map_list>:
485546a8:	0007 0400 2901 0003 3800 2903 0002 3800     .....)...8.)...8
485546b8:	2904 0001 0400 2905 0004 0400 2906 0000     .).....).....)..
485546c8:	0000 0000                                   ....

485546cc <shutoff_key_map_list>:
485546cc:	0001 0400 2b01 0000 0000 0000               .....+......

485546d8 <textread_key_map_list>:
485546d8:	0002 3800 2a02 0003 3800 2a01 0004 0400     ...8.*...8.*....
485546e8:	2a07 0001 0400 2a07 0000 0000 0000 0000     .*.....*........

485546f8 <usbconnect_key_map_list>:
485546f8:	0002 3800 2001 0003 3800 2002 0001 0400     ...8. ...8. ....
48554708:	2003 0004 0400 2004 0007 0400 2004 0001     . ..... ..... ..
48554718:	1000 0000 007f 3f00 0000 0004 1800 0000     .......?........
	...

48554730 <volume_key_map_list>:
48554730:	0003 3800 2501 0002 3800 2502 0001 0400     ...8.%...8.%....
48554740:	2504 0004 0400 2504 0007 0400 2504 0004     .%.....%.....%..
48554750:	1800 0000 0000 0000 0000 0000               ............

4855475c <limit_key_map_list>:
4855475c:	0003 3800 2501 0002 3800 2502 0001 0400     ...8.%...8.%....
4855476c:	2503 0004 0400 2504 0007 0400 2504 0004     .%.....%.....%..
4855477c:	1800 0000 0000 0000 0000 0000               ............

48554788 <key_shortcut_list>:
48554788:	0001 1000 0025 000c 2000 0022 000d 2000     ....%.... ".... 
48554798:	0023 007f 3f00 0024 0004 1800 0021 0000     #....?$.....!...
485547a8:	0000 0000                                   ....

485547ac <com_key_mapping>:
485547ac:	6492      	save	16,s1
 * \li  如果用户不想响应某个快捷键，或者想把某个快捷键另作别用，那么可以在自定义
 *      的按键映射表中添加该按键的映射项。
*******************************************************************************/
bool com_key_mapping(input_gui_msg_t *input_msg, msg_apps_type_e *gui_event, const key_map_t *key_map_list)
{
485547ae:	673d      	move	s1,sp
485547b0:	d984      	sw	a0,16(s1)
485547b2:	d9a5      	sw	a1,20(s1)
485547b4:	d9c6      	sw	a2,24(s1)
485547b6:	9944      	lw	v0,16(s1)
    const key_map_t *this_key_map;
    
    //按键（机械和触摸）
    if(INPUT_MSG_KEY == input_msg->type)
485547b8:	a240      	lbu	v0,0(v0)
485547ba:	2a4a      	bnez	v0,48554850 <com_key_mapping+0xa4>
485547bc:	9946      	lw	v0,24(s1)
    {
        if(key_map_list != NULL)
485547be:	2227      	beqz	v0,4855480e <com_key_mapping+0x62>
485547c0:	9946      	lw	v0,24(s1)
        {
            this_key_map = key_map_list;
485547c2:	d940      	sw	v0,0(s1)
485547c4:	9940      	lw	v0,0(s1)
            for(;;this_key_map++)
            {
                /* 达到用户最后一个映射，结束按键映射 */
                if ( KEY_NULL == this_key_map->key_event.val )
485547c6:	a240      	lbu	v0,0(v0)
485547c8:	2a01      	bnez	v0,485547cc <com_key_mapping+0x20>
485547ca:	1021      	b	4855480e <com_key_mapping+0x62>
                {
                    break;
485547cc:	9944      	lw	v0,16(s1)
                }
    
                /* 找到需要映射的按键, 进行映射 */
                if( (input_msg->data.kmsg.val == this_key_map->key_event.val)
485547ce:	9960      	lw	v1,0(s1)
485547d0:	a282      	lbu	a0,2(v0)
485547d2:	a340      	lbu	v0,0(v1)
485547d4:	ea8e      	xor	v0,a0
485547d6:	5a01      	sltiu	v0,1
485547d8:	6016      	bteqz	48554806 <com_key_mapping+0x5a>
485547da:	9944      	lw	v0,16(s1)
485547dc:	9960      	lw	v1,0(s1)
485547de:	aa42      	lhu	v0,4(v0)
485547e0:	ab61      	lhu	v1,2(v1)
485547e2:	6782      	move	a0,v0
485547e4:	6743      	move	v0,v1
485547e6:	ea8c      	and	v0,a0
485547e8:	ea31      	zeh	v0
485547ea:	220d      	beqz	v0,48554806 <com_key_mapping+0x5a>
485547ec:	9965      	lw	v1,20(s1)
                  &&(input_msg->data.kmsg.type & this_key_map->key_event.type) )
                {
                    *gui_event = this_key_map->event;
485547ee:	9940      	lw	v0,0(s1)
485547f0:	aa42      	lhu	v0,4(v0)
485547f2:	cb40      	sh	v0,0(v1)
485547f4:	9945      	lw	v0,20(s1)
                    if(*gui_event == MSG_NULL)
485547f6:	aa40      	lhu	v0,0(v0)
485547f8:	2a03      	bnez	v0,48554800 <com_key_mapping+0x54>
485547fa:	6a00      	li	v0,0
                    {
                        return FALSE;
485547fc:	d941      	sw	v0,4(s1)
485547fe:	102a      	b	48554854 <com_key_mapping+0xa8>
48554800:	6a01      	li	v0,1
                    }
                    else
                    {
                        return TRUE;
48554802:	d941      	sw	v0,4(s1)
48554804:	1027      	b	48554854 <com_key_mapping+0xa8>
48554806:	9940      	lw	v0,0(s1)
48554808:	4246      	addiu	v0,v0,6
4855480a:	d940      	sw	v0,0(s1)
4855480c:	17db      	b	485547c4 <com_key_mapping+0x18>
4855480e:	b214      	lw	v0,4855485c <com_key_mapping+0xb0>
                    }
                }
            }
        }
        
        //快捷键映射
        this_key_map = key_shortcut_list;
48554810:	d940      	sw	v0,0(s1)
48554812:	9940      	lw	v0,0(s1)
        for (;;this_key_map++)
        {
            /* 达到用户最后一个快捷键, 或者达到最大快捷键个数, 退出*/
            if ( 0 == this_key_map->key_event.val )
48554814:	a240      	lbu	v0,0(v0)
48554816:	2a01      	bnez	v0,4855481a <com_key_mapping+0x6e>
48554818:	101b      	b	48554850 <com_key_mapping+0xa4>
            {
                break;
4855481a:	9944      	lw	v0,16(s1)
            }

            /* 找到快捷键, 发送快捷键对应消息 */
            if ( (input_msg->data.kmsg.val == this_key_map->key_event.val) 
4855481c:	9960      	lw	v1,0(s1)
4855481e:	a282      	lbu	a0,2(v0)
48554820:	a340      	lbu	v0,0(v1)
48554822:	ea8e      	xor	v0,a0
48554824:	5a01      	sltiu	v0,1
48554826:	6010      	bteqz	48554848 <com_key_mapping+0x9c>
48554828:	9944      	lw	v0,16(s1)
4855482a:	9960      	lw	v1,0(s1)
4855482c:	aa42      	lhu	v0,4(v0)
4855482e:	ab61      	lhu	v1,2(v1)
48554830:	6782      	move	a0,v0
48554832:	6743      	move	v0,v1
48554834:	ea8c      	and	v0,a0
48554836:	ea31      	zeh	v0
48554838:	2207      	beqz	v0,48554848 <com_key_mapping+0x9c>
4855483a:	9945      	lw	v0,20(s1)
              && (input_msg->data.kmsg.type & this_key_map->key_event.type) )
            {
                *gui_event = this_key_map->event;
4855483c:	9960      	lw	v1,0(s1)
4855483e:	ab62      	lhu	v1,4(v1)
48554840:	ca60      	sh	v1,0(v0)
48554842:	6a01      	li	v0,1
                return TRUE;
48554844:	d941      	sw	v0,4(s1)
48554846:	1006      	b	48554854 <com_key_mapping+0xa8>
48554848:	9940      	lw	v0,0(s1)
4855484a:	4246      	addiu	v0,v0,6
4855484c:	d940      	sw	v0,0(s1)
4855484e:	17e1      	b	48554812 <com_key_mapping+0x66>
48554850:	6a00      	li	v0,0
            }
        }
    }
    ////触摸屏
    //else if(INPUT_MSG_TOUCH == input_msg->type)
    //{}
    ////g-sensor
    //else
    //{}

    return FALSE;
48554852:	d941      	sw	v0,4(s1)
48554854:	9941      	lw	v0,4(s1)
}
48554856:	65b9      	move	sp,s1
48554858:	6412      	restore	16,s1
4855485a:	e8a0      	jrc	ra
4855485c:	4788      	addiu	a0,a3,-8
4855485e:	4855      	addiu	s0,85
	...
Disassembly of section BANK_UI_1_22:

48594600 <com_gui_msg_hook>:
48594600:	64f7      	save	56,ra,s0-s1
 * \ingroup      common_func
 * \note
*******************************************************************************/
bool com_gui_msg_hook(input_gui_msg_t *input_msg)
{
48594602:	0104      	addiu	s1,sp,16
48594604:	d98a      	sw	a0,40(s1)
48594606:	1ad0 5219 	jal	48594864 <get_filter_key>
    bool ret;

    //0.长按按键后过滤掉后续按键
    if(get_filter_key() != KEY_NULL)
4859460a:	6500      	nop
4859460c:	651a      	move	t8,v0
4859460e:	601e      	bteqz	4859464c <com_gui_msg_hook+0x4c>
48594610:	990a      	lw	s0,40(s1)
    {
        //直到检测到按键抬起（或者其他按键按下）才算过滤完成
        if(input_msg->data.kmsg.val == get_filter_key())
48594612:	1ad0 5219 	jal	48594864 <get_filter_key>
48594616:	6500      	nop
48594618:	6762      	move	v1,v0
4859461a:	a042      	lbu	v0,2(s0)
4859461c:	ea6e      	xor	v0,v1
4859461e:	5a01      	sltiu	v0,1
48594620:	6011      	bteqz	48594644 <com_gui_msg_hook+0x44>
48594622:	994a      	lw	v0,40(s1)
        {
            //过滤LONG和HOLD按键
            if(input_msg->data.kmsg.type != KEY_TYPE_SHORT_UP)
48594624:	aa42      	lhu	v0,4(v0)
48594626:	f400 7200 	cmpi	v0,1024
4859462a:	6758      	move	v0,t8
4859462c:	5a01      	sltiu	v0,1
4859462e:	6103      	btnez	48594636 <com_gui_msg_hook+0x36>
48594630:	6a00      	li	v0,0
            {
                return FALSE;
48594632:	d945      	sw	v0,20(s1)
48594634:	109e      	b	48594772 <.LBE3+0x6e>
48594636:	6c00      	li	a0,0
            }
            else//过滤完成，但还是不响应SHORT_UP按键
            {
                change_filter_key(KEY_NULL);
48594638:	1ad0 5213 	jal	4859484c <change_filter_key>
4859463c:	6500      	nop
4859463e:	6a00      	li	v0,0
                return FALSE;
48594640:	d945      	sw	v0,20(s1)
48594642:	1097      	b	48594772 <.LBE3+0x6e>
48594644:	6c00      	li	a0,0
            }
        }
        else//其他按键，过滤完成，继续处理
        {
            change_filter_key(KEY_NULL);
48594646:	1ad0 5213 	jal	4859484c <change_filter_key>
4859464a:	6500      	nop
4859464c:	b34c      	lw	v1,4859477c <.LBE3+0x78>
        }
    }

    //更新当前按键值
    this_filter_key_value = input_msg->data.kmsg.val;
4859464e:	994a      	lw	v0,40(s1)
48594650:	a242      	lbu	v0,2(v0)
48594652:	c340      	sb	v0,0(v1)
48594654:	1ad0 520d 	jal	48594834 <get_backlight_state>

    //1.1若背光处于调暗状态，恢复背光亮度，并修改背光状态
    if(get_backlight_state() == BACKLIGHT_STATE_DARK)
48594658:	6500      	nop
4859465a:	7201      	cmpi	v0,1
4859465c:	6758      	move	v0,t8
4859465e:	5a01      	sltiu	v0,1
48594660:	600a      	bteqz	48594676 <com_gui_msg_hook+0x76>
48594662:	b248      	lw	v0,48594780 <.LBE3+0x7c>
    {
        com_set_contrast(sys_comval->lightness);
48594664:	9a40      	lw	v0,0(v0)
48594666:	a242      	lbu	v0,2(v0)
48594668:	6782      	move	a0,v0
4859466a:	b247      	lw	v0,48594784 <.LBE3+0x80>
4859466c:	eac0      	jalrc	v0
4859466e:	6c00      	li	a0,0
        change_backlight_state(BACKLIGHT_STATE_NORMAL);
48594670:	1ad0 5207 	jal	4859481c <change_backlight_state>
48594674:	6500      	nop
48594676:	1ad0 5201 	jal	48594804 <get_screensave_state>
    }

    //1.2若处于屏幕保护模式，退出屏幕保护模式
    if(get_screensave_state() == TRUE)
4859467a:	6500      	nop
4859467c:	7201      	cmpi	v0,1
4859467e:	6758      	move	v0,t8
48594680:	5a01      	sltiu	v0,1
48594682:	600f      	bteqz	485946a2 <.LBE2+0x2>

48594684 <.LBB2>:
48594684:	6aff      	li	v0,255
    {
        msg_apps_t msg;

        //给当前AP发送 exit_screen_save 异步消息，在 com_message_box 中退出屏保
        msg.type = MSG_APP_EXIT_SCREEN_SAVE;
48594686:	4247      	addiu	v0,v0,7
48594688:	d942      	sw	v0,8(s1)
4859468a:	b240      	lw	v0,48594788 <.LBE3+0x84>
        send_async_msg(g_this_app_info->app_id, &msg);
4859468c:	9a40      	lw	v0,0(v0)
4859468e:	a241      	lbu	v0,1(v0)
48594690:	4167      	addiu	v1,s1,7
48594692:	4361      	addiu	v1,v1,1
48594694:	6782      	move	a0,v0
48594696:	67a3      	move	a1,v1
48594698:	b23d      	lw	v0,4859478c <.LBE3+0x88>
4859469a:	eac0      	jalrc	v0
4859469c:	6a00      	li	v0,0

        ret = FALSE;
4859469e:	c140      	sb	v0,0(s1)

485946a0 <.LBE2>:
485946a0:	105a      	b	48594756 <.LBE3+0x52>
485946a2:	994a      	lw	v0,40(s1)
    }
    //1.3正常状态下，处理按键音，按键锁
    else
    {
        //2.按键音处理，仅在按键按下时发出按键音
        if(input_msg->data.kmsg.type == KEY_TYPE_DOWN)
485946a4:	aa42      	lhu	v0,4(v0)
485946a6:	f004 7200 	cmpi	v0,8192
485946aa:	6758      	move	v0,t8
485946ac:	5a01      	sltiu	v0,1
485946ae:	602a      	bteqz	48594704 <.LBE3>

485946b0 <.LBB3>:
485946b0:	1ad0 51fa 	jal	485947e8 <get_soundout_state>
        {
            soundout_state_e state = (soundout_state_e)get_soundout_state();
485946b4:	6500      	nop
485946b6:	c150      	sb	v0,16(s1)
485946b8:	1ad0 51f4 	jal	485947d0 <get_keytone_mode>
            uint8 keytone_mode = get_keytone_mode();
485946bc:	6500      	nop
485946be:	c151      	sb	v0,17(s1)
485946c0:	a151      	lbu	v0,17(s1)
            if(keytone_mode == 0)
485946c2:	2a16      	bnez	v0,485946f0 <.LBB3+0x40>
485946c4:	a150      	lbu	v0,16(s1)
            {
                if(((state == SOUND_OUT_STOP) || (state == SOUND_OUT_PAUSE))
485946c6:	7201      	cmpi	v0,1
485946c8:	6758      	move	v0,t8
485946ca:	5a01      	sltiu	v0,1
485946cc:	6106      	btnez	485946da <.LBB3+0x2a>
485946ce:	a150      	lbu	v0,16(s1)
485946d0:	7202      	cmpi	v0,2
485946d2:	6758      	move	v0,t8
485946d4:	5a01      	sltiu	v0,1
485946d6:	6101      	btnez	485946da <.LBB3+0x2a>
485946d8:	1015      	b	48594704 <.LBE3>
485946da:	1ad0 51ed 	jal	485947b4 <get_keytone_enable>
485946de:	6500      	nop
485946e0:	7201      	cmpi	v0,1
485946e2:	6758      	move	v0,t8
485946e4:	5a01      	sltiu	v0,1
485946e6:	600e      	bteqz	48594704 <.LBE3>
485946e8:	6c00      	li	a0,0
                && (get_keytone_enable() == TRUE))
                {
                    //没音频输出且按键音使能，发出按键音
                    com_start_key_tone(0); //双击按键音
485946ea:	b22a      	lw	v0,48594790 <.LBE3+0x8c>
485946ec:	eac0      	jalrc	v0
485946ee:	100a      	b	48594704 <.LBE3>
485946f0:	1ad0 51ed 	jal	485947b4 <get_keytone_enable>
                }
            }
            else
            {
                if(get_keytone_enable() == TRUE)
485946f4:	6500      	nop
485946f6:	7201      	cmpi	v0,1
485946f8:	6758      	move	v0,t8
485946fa:	5a01      	sltiu	v0,1
485946fc:	6003      	bteqz	48594704 <.LBE3>
485946fe:	6c00      	li	a0,0
                {
                   com_start_key_tone(0); 
48594700:	b224      	lw	v0,48594790 <.LBE3+0x8c>
48594702:	eac0      	jalrc	v0

48594704 <.LBE3>:
48594704:	b221      	lw	v0,48594784 <.LBE3+0x80>
                }
            }
        }

        //3.按键锁处理，只处理按键锁住状态下按下普通按键
        //例外：config, playlist, udisk, 等应用不检测按键锁
        if((g_this_app_info->app_id != APP_ID_CONFIG)
48594706:	9a40      	lw	v0,0(v0)
48594708:	a241      	lbu	v0,1(v0)
4859470a:	720b      	cmpi	v0,11
4859470c:	6758      	move	v0,t8
4859470e:	5a01      	sltiu	v0,1
48594710:	6120      	btnez	48594752 <.LBE3+0x4e>
48594712:	b21e      	lw	v0,48594788 <.LBE3+0x84>
48594714:	9a40      	lw	v0,0(v0)
48594716:	a241      	lbu	v0,1(v0)
48594718:	720a      	cmpi	v0,10
4859471a:	6758      	move	v0,t8
4859471c:	5a01      	sltiu	v0,1
4859471e:	6119      	btnez	48594752 <.LBE3+0x4e>
48594720:	b21a      	lw	v0,48594788 <.LBE3+0x84>
48594722:	9a40      	lw	v0,0(v0)
48594724:	a241      	lbu	v0,1(v0)
48594726:	720c      	cmpi	v0,12
48594728:	6758      	move	v0,t8
4859472a:	5a01      	sltiu	v0,1
4859472c:	6112      	btnez	48594752 <.LBE3+0x4e>
4859472e:	1ad0 51e7 	jal	4859479c <get_keylock_state>
        && (g_this_app_info->app_id != APP_ID_PLAYLIST)
        && (g_this_app_info->app_id != APP_ID_UDISK))
        {
            if( (get_keylock_state() == TRUE )
48594732:	6500      	nop
48594734:	7201      	cmpi	v0,1
48594736:	6758      	move	v0,t8
48594738:	5a01      	sltiu	v0,1
4859473a:	600b      	bteqz	48594752 <.LBE3+0x4e>
4859473c:	994a      	lw	v0,40(s1)
4859473e:	a242      	lbu	v0,2(v0)
48594740:	720d      	cmpi	v0,13
48594742:	6758      	move	v0,t8
48594744:	5a01      	sltiu	v0,1
48594746:	6105      	btnez	48594752 <.LBE3+0x4e>
48594748:	994a      	lw	v0,40(s1)
              &&(input_msg->data.kmsg.val != KEY_UNLOCK) )
            {
                //按键锁住状态下，按键普通按键后，转换为该按键，以供应用层选择性处理
                input_msg->data.kmsg.val = KEY_LOCKHOLD;
4859474a:	6b7f      	li	v1,127
4859474c:	c262      	sb	v1,2(v0)
4859474e:	b212      	lw	v0,48594794 <.LBE3+0x90>
                //过滤掉当前按键后续动作，保证只响应一次“按键锁住”提示
                com_filter_key_hold();
48594750:	eac0      	jalrc	v0
48594752:	6a01      	li	v0,1
            }
        }

        ret = TRUE;
48594754:	c140      	sb	v0,0(s1)
48594756:	b311      	lw	v1,48594798 <.LBE3+0x94>
    }

    //4.背光关闭计时，屏幕保护计时，省电关机计时，返回正在播放计时清0
    g_sys_counter.light_counter = 0;
48594758:	6a00      	li	v0,0
4859475a:	cb40      	sh	v0,0(v1)
4859475c:	b30f      	lw	v1,48594798 <.LBE3+0x94>
    g_sys_counter.screen_saver_counter = 0;
4859475e:	6a00      	li	v0,0
48594760:	cb41      	sh	v0,2(v1)
48594762:	b30e      	lw	v1,48594798 <.LBE3+0x94>
    g_sys_counter.poweroff_counter = 0;
48594764:	6a00      	li	v0,0
48594766:	cb44      	sh	v0,8(v1)
48594768:	b30c      	lw	v1,48594798 <.LBE3+0x94>
    g_sys_counter.playing_counter = 0;
4859476a:	6a00      	li	v0,0
4859476c:	cb42      	sh	v0,4(v1)
4859476e:	a140      	lbu	v0,0(s1)

    return ret;
48594770:	d945      	sw	v0,20(s1)
48594772:	9945      	lw	v0,20(s1)
}
48594774:	65b9      	move	sp,s1
48594776:	6475      	restore	40,ra,s0-s1
48594778:	e8a0      	jrc	ra
4859477a:	0000      	addiu	s0,sp,0
4859477c:	55b8      	slti	a1,184
4859477e:	9fc1      	lw	a2,4(a3)
48594780:	5418      	slti	a0,24
48594782:	9fc1      	lw	a2,4(a3)
48594784:	4601      	addiu	s0,a2,1
48594786:	4861      	addiu	s0,97
48594788:	5404      	slti	a0,4
4859478a:	9fc1      	lw	a2,4(a3)
4859478c:	4759      	daddiu	v0,a3,-7
4859478e:	4849      	addiu	s0,73
48594790:	47ad      	addiu	a1,a3,-3
48594792:	486d      	addiu	s0,109
48594794:	487d      	addiu	s0,125
48594796:	4859      	addiu	s0,89
48594798:	a180      	lbu	a0,0(s1)
4859479a:	9fc1      	lw	a2,4(a3)

4859479c <get_keylock_state>:
4859479c:	6491      	save	8,s1
4859479e:	673d      	move	s1,sp
485947a0:	b204      	lw	v0,485947b0 <get_keylock_state+0x14>
485947a2:	a244      	lbu	v0,4(v0)
485947a4:	651a      	move	t8,v0
485947a6:	6758      	move	v0,t8
485947a8:	65b9      	move	sp,s1
485947aa:	6411      	restore	8,s1
485947ac:	e8a0      	jrc	ra
485947ae:	0000      	addiu	s0,sp,0
485947b0:	a1b8      	lbu	a1,24(s1)
485947b2:	9fc1      	lw	a2,4(a3)

485947b4 <get_keytone_enable>:
485947b4:	6491      	save	8,s1
485947b6:	673d      	move	s1,sp
485947b8:	b205      	lw	v0,485947cc <get_keytone_enable+0x18>
485947ba:	8245      	lb	v0,5(v0)
485947bc:	f7c0 3242 	srl	v0,31
485947c0:	651a      	move	t8,v0
485947c2:	6758      	move	v0,t8
485947c4:	65b9      	move	sp,s1
485947c6:	6411      	restore	8,s1
485947c8:	e8a0      	jrc	ra
485947ca:	0000      	addiu	s0,sp,0
485947cc:	a1b8      	lbu	a1,24(s1)
485947ce:	9fc1      	lw	a2,4(a3)

485947d0 <get_keytone_mode>:
485947d0:	6491      	save	8,s1
485947d2:	673d      	move	s1,sp
485947d4:	b204      	lw	v0,485947e4 <get_keytone_mode+0x14>
485947d6:	a253      	lbu	v0,19(v0)
485947d8:	651a      	move	t8,v0
485947da:	6758      	move	v0,t8
485947dc:	65b9      	move	sp,s1
485947de:	6411      	restore	8,s1
485947e0:	e8a0      	jrc	ra
485947e2:	0000      	addiu	s0,sp,0
485947e4:	a1b8      	lbu	a1,24(s1)
485947e6:	9fc1      	lw	a2,4(a3)

485947e8 <get_soundout_state>:
485947e8:	6491      	save	8,s1
485947ea:	673d      	move	s1,sp
485947ec:	b205      	lw	v0,48594800 <get_soundout_state+0x18>
485947ee:	a245      	lbu	v0,5(v0)
485947f0:	6b0f      	li	v1,15
485947f2:	ea6c      	and	v0,v1
485947f4:	651a      	move	t8,v0
485947f6:	6758      	move	v0,t8
485947f8:	65b9      	move	sp,s1
485947fa:	6411      	restore	8,s1
485947fc:	e8a0      	jrc	ra
485947fe:	0000      	addiu	s0,sp,0
48594800:	a1b8      	lbu	a1,24(s1)
48594802:	9fc1      	lw	a2,4(a3)

48594804 <get_screensave_state>:
48594804:	6491      	save	8,s1
48594806:	673d      	move	s1,sp
48594808:	b204      	lw	v0,48594818 <get_screensave_state+0x14>
4859480a:	a24a      	lbu	v0,10(v0)
4859480c:	651a      	move	t8,v0
4859480e:	6758      	move	v0,t8
48594810:	65b9      	move	sp,s1
48594812:	6411      	restore	8,s1
48594814:	e8a0      	jrc	ra
48594816:	0000      	addiu	s0,sp,0
48594818:	a1b8      	lbu	a1,24(s1)
4859481a:	9fc1      	lw	a2,4(a3)

4859481c <change_backlight_state>:
4859481c:	6491      	save	8,s1
4859481e:	673d      	move	s1,sp
48594820:	6744      	move	v0,a0
48594822:	c148      	sb	v0,8(s1)
48594824:	b303      	lw	v1,48594830 <change_backlight_state+0x14>
48594826:	a148      	lbu	v0,8(s1)
48594828:	c349      	sb	v0,9(v1)
4859482a:	65b9      	move	sp,s1
4859482c:	6411      	restore	8,s1
4859482e:	e8a0      	jrc	ra
48594830:	a1b8      	lbu	a1,24(s1)
48594832:	9fc1      	lw	a2,4(a3)

48594834 <get_backlight_state>:
48594834:	6491      	save	8,s1
48594836:	673d      	move	s1,sp
48594838:	b204      	lw	v0,48594848 <get_backlight_state+0x14>
4859483a:	a249      	lbu	v0,9(v0)
4859483c:	651a      	move	t8,v0
4859483e:	6758      	move	v0,t8
48594840:	65b9      	move	sp,s1
48594842:	6411      	restore	8,s1
48594844:	e8a0      	jrc	ra
48594846:	0000      	addiu	s0,sp,0
48594848:	a1b8      	lbu	a1,24(s1)
4859484a:	9fc1      	lw	a2,4(a3)

4859484c <change_filter_key>:
4859484c:	6491      	save	8,s1
4859484e:	673d      	move	s1,sp
48594850:	6744      	move	v0,a0
48594852:	c148      	sb	v0,8(s1)
48594854:	b303      	lw	v1,48594860 <change_filter_key+0x14>
48594856:	a148      	lbu	v0,8(s1)
48594858:	c343      	sb	v0,3(v1)
4859485a:	65b9      	move	sp,s1
4859485c:	6411      	restore	8,s1
4859485e:	e8a0      	jrc	ra
48594860:	a1b8      	lbu	a1,24(s1)
48594862:	9fc1      	lw	a2,4(a3)

48594864 <get_filter_key>:
48594864:	6491      	save	8,s1
48594866:	673d      	move	s1,sp
48594868:	b204      	lw	v0,48594878 <get_filter_key+0x14>
4859486a:	a243      	lbu	v0,3(v0)
4859486c:	651a      	move	t8,v0
4859486e:	6758      	move	v0,t8
48594870:	65b9      	move	sp,s1
48594872:	6411      	restore	8,s1
48594874:	e8a0      	jrc	ra
48594876:	0000      	addiu	s0,sp,0
48594878:	a1b8      	lbu	a1,24(s1)
4859487a:	9fc1      	lw	a2,4(a3)

4859487c <com_filter_key_hold>:
4859487c:	64d3      	save	24,ra,s1

/******************************************************************************/
/*!
 * \par  Description:
 *    过滤掉当前按键后续动作，即相同值按键消息。
 * \param[in]    none
 * \param[out]   none
 * \return       none
 * \ingroup      common_func
 * \note
 * \li  该接口用于过滤当前按键值的后续动作，如需过滤掉任意指定按键，需直接调用
 *      change_filter_key 设置。
 * \li  在检测到当前按键抬起消息或者其他按键消息后，由 com_gui_msg_hook 自动调用解除。
 * \li  如果此时没有按键按下，该接口调用不会产生真正的按键过滤效果。
*******************************************************************************/
void com_filter_key_hold(void)
{
4859487e:	0104      	addiu	s1,sp,16
48594880:	b205      	lw	v0,48594894 <com_filter_key_hold+0x18>
    change_filter_key(this_filter_key_value);
48594882:	a240      	lbu	v0,0(v0)
48594884:	6782      	move	a0,v0
48594886:	1ad0 5213 	jal	4859484c <change_filter_key>
4859488a:	6500      	nop
4859488c:	65b9      	move	sp,s1
}
4859488e:	6451      	restore	8,ra,s1
48594890:	e8a0      	jrc	ra
48594892:	0000      	addiu	s0,sp,0
48594894:	55b8      	slti	a1,184
48594896:	9fc1      	lw	a2,4(a3)

48594898 <com_app_msg_hook>:
48594898:	64d6      	save	48,ra,s1
 * \ingroup      misc_func
 * \note 
*******************************************************************************/
void com_app_msg_hook(private_msg_t *private_msg)
{
4859489a:	0104      	addiu	s1,sp,16
4859489c:	d988      	sw	a0,32(s1)
4859489e:	9948      	lw	v0,32(s1)
    msg_apps_type_e msg_type = private_msg->msg.type;
485948a0:	9a40      	lw	v0,0(v0)
485948a2:	c940      	sh	v0,0(s1)
485948a4:	a940      	lhu	v0,0(s1)
    
    switch(msg_type)
485948a6:	4a80      	addiu	v0,-128
485948a8:	424e      	addiu	v0,v0,-2
485948aa:	d944      	sw	v0,16(s1)
485948ac:	9944      	lw	v0,16(s1)
485948ae:	5a40      	sltiu	v0,64
485948b0:	f0a0 6005 	bteqz	485949fe <com_app_msg_hook+0x166>
485948b4:	9944      	lw	v0,16(s1)
485948b6:	3344      	sll	v1,v0,1
485948b8:	0a04      	la	v0,485948c8 <com_app_msg_hook+0x30>
485948ba:	e349      	addu	v0,v1,v0
485948bc:	aa40      	lhu	v0,0(v0)
485948be:	6762      	move	v1,v0
485948c0:	ebb1      	seh	v1
485948c2:	b273      	lw	v0,48594a8c <.LBE2+0x34>
485948c4:	e349      	addu	v0,v1,v0
485948c6:	ea80      	jrc	v0
485948c8:	0131      	addiu	s1,sp,196
485948ca:	0137      	addiu	s1,sp,220
485948cc:	0131      	addiu	s1,sp,196
485948ce:	0137      	addiu	s1,sp,220
485948d0:	0137      	addiu	s1,sp,220
485948d2:	0137      	addiu	s1,sp,220
485948d4:	0137      	addiu	s1,sp,220
485948d6:	0137      	addiu	s1,sp,220
485948d8:	0137      	addiu	s1,sp,220
485948da:	0137      	addiu	s1,sp,220
485948dc:	0137      	addiu	s1,sp,220
485948de:	0137      	addiu	s1,sp,220
485948e0:	0137      	addiu	s1,sp,220
485948e2:	0137      	addiu	s1,sp,220
485948e4:	00d3      	addiu	s0,sp,844
485948e6:	010d      	addiu	s1,sp,52
485948e8:	0137      	addiu	s1,sp,220
485948ea:	0137      	addiu	s1,sp,220
485948ec:	0137      	addiu	s1,sp,220
485948ee:	0137      	addiu	s1,sp,220
485948f0:	0137      	addiu	s1,sp,220
485948f2:	0137      	addiu	s1,sp,220
485948f4:	0137      	addiu	s1,sp,220
485948f6:	0137      	addiu	s1,sp,220
485948f8:	0137      	addiu	s1,sp,220
485948fa:	0137      	addiu	s1,sp,220
485948fc:	0137      	addiu	s1,sp,220
485948fe:	0137      	addiu	s1,sp,220
48594900:	0137      	addiu	s1,sp,220
48594902:	0137      	addiu	s1,sp,220
48594904:	0137      	addiu	s1,sp,220
48594906:	0137      	addiu	s1,sp,220
48594908:	0137      	addiu	s1,sp,220
4859490a:	0137      	addiu	s1,sp,220
4859490c:	0137      	addiu	s1,sp,220
4859490e:	0137      	addiu	s1,sp,220
48594910:	0137      	addiu	s1,sp,220
48594912:	0137      	addiu	s1,sp,220
48594914:	0137      	addiu	s1,sp,220
48594916:	0137      	addiu	s1,sp,220
48594918:	0137      	addiu	s1,sp,220
4859491a:	0137      	addiu	s1,sp,220
4859491c:	0137      	addiu	s1,sp,220
4859491e:	0137      	addiu	s1,sp,220
48594920:	0137      	addiu	s1,sp,220
48594922:	0137      	addiu	s1,sp,220
48594924:	0081      	addiu	s0,sp,516
48594926:	00ab      	addiu	s0,sp,684
48594928:	0137      	addiu	s1,sp,220
4859492a:	0137      	addiu	s1,sp,220
4859492c:	0137      	addiu	s1,sp,220
4859492e:	0137      	addiu	s1,sp,220
48594930:	0137      	addiu	s1,sp,220
48594932:	0137      	addiu	s1,sp,220
48594934:	0137      	addiu	s1,sp,220
48594936:	0137      	addiu	s1,sp,220
48594938:	0137      	addiu	s1,sp,220
4859493a:	0137      	addiu	s1,sp,220
4859493c:	0137      	addiu	s1,sp,220
4859493e:	0137      	addiu	s1,sp,220
48594940:	0137      	addiu	s1,sp,220
48594942:	0137      	addiu	s1,sp,220
48594944:	00cb      	addiu	s0,sp,812
48594946:	00cb      	addiu	s0,sp,812
48594948:	1ad0 52d9 	jal	48594b64 <get_card_state>
    {
    case MSG_SD_IN:

        if(get_card_state() == CARD_STATE_CARD_NULL)//只有在CARD_NULL状态下才需要设置
4859494c:	6500      	nop
4859494e:	651a      	move	t8,v0
48594950:	6104      	btnez	4859495a <com_app_msg_hook+0xc2>
48594952:	6c01      	li	a0,1
        {
            change_card_state(CARD_STATE_CARD_IN);
48594954:	1ad0 52d3 	jal	48594b4c <change_card_state>
48594958:	6500      	nop
4859495a:	6c00      	li	a0,0
        }
        change_card_plist(FALSE);
4859495c:	1ad0 52cd 	jal	48594b34 <change_card_plist>
48594960:	6500      	nop
48594962:	6c00      	li	a0,0
        change_card_update(FALSE);
48594964:	1ad0 52c7 	jal	48594b1c <change_card_update>
48594968:	6500      	nop
4859496a:	b346      	lw	v1,48594a80 <.LBE2+0x28>
        g_ss_vip_event = TRUE;
4859496c:	6a01      	li	v0,1
4859496e:	c340      	sb	v0,0(v1)
48594970:	1046      	b	485949fe <com_app_msg_hook+0x166>
        break;
48594972:	6c00      	li	a0,0
    case MSG_SD_OUT:
                
        change_card_state(CARD_STATE_CARD_NULL);
48594974:	1ad0 52d3 	jal	48594b4c <change_card_state>
48594978:	6500      	nop
4859497a:	6c00      	li	a0,0
        change_card_plist(FALSE);
4859497c:	1ad0 52cd 	jal	48594b34 <change_card_plist>
48594980:	6500      	nop
48594982:	6c00      	li	a0,0
        change_card_update(FALSE);
48594984:	1ad0 52c7 	jal	48594b1c <change_card_update>
48594988:	6500      	nop
4859498a:	b33e      	lw	v1,48594a80 <.LBE2+0x28>
        g_ss_vip_event = TRUE;
4859498c:	6a01      	li	v0,1
4859498e:	c340      	sb	v0,0(v1)
48594990:	1036      	b	485949fe <com_app_msg_hook+0x166>
        break;
48594992:	b33c      	lw	v1,48594a80 <.LBE2+0x28>
        
    case MSG_UH_IN:
    case MSG_UH_OUT:
        g_ss_vip_event = TRUE;
48594994:	6a01      	li	v0,1
48594996:	c340      	sb	v0,0(v1)
48594998:	1032      	b	485949fe <com_app_msg_hook+0x166>
        break;
4859499a:	6c14      	li	a0,20
        
    case MSG_USB_STICK:
        /* wait 50ms for USB-connect stably. */
        sys_os_time_dly(20);
4859499c:	6d00      	li	a1,0
4859499e:	6e00      	li	a2,0
485949a0:	6f31      	li	a3,49
485949a2:	b239      	lw	v0,48594a84 <.LBE2+0x2c>
485949a4:	eac0      	jalrc	v0
485949a6:	b239      	lw	v0,48594a88 <.LBE2+0x30>
        
        if((act_readb(DPDMCTRL)&PLUGINSTATUS) == 0)//ADAPTOR适配线插入
485949a8:	a240      	lbu	v0,0(v0)
485949aa:	6762      	move	v1,v0
485949ac:	eb11      	zeb	v1
485949ae:	6a40      	li	v0,64
485949b0:	ea6c      	and	v0,v1
485949b2:	2a08      	bnez	v0,485949c4 <com_app_msg_hook+0x12c>
485949b4:	9968      	lw	v1,32(s1)
        {
            private_msg->msg.type = MSG_ADAPTOR_IN;//改为MSG_ADAPTOR_IN消息
485949b6:	6aa0      	li	v0,160
485949b8:	db40      	sw	v0,0(v1)
485949ba:	6c02      	li	a0,2
            change_cable_state(CABLE_STATE_ADAPTOR_IN);
485949bc:	1ad0 52c1 	jal	48594b04 <change_cable_state>
485949c0:	6500      	nop
485949c2:	1004      	b	485949cc <com_app_msg_hook+0x134>
485949c4:	6c01      	li	a0,1
        }
        else
        {
            change_cable_state(CABLE_STATE_CABLE_IN);
485949c6:	1ad0 52c1 	jal	48594b04 <change_cable_state>
485949ca:	6500      	nop
485949cc:	b32d      	lw	v1,48594a80 <.LBE2+0x28>
        }
    
        g_ss_vip_event = TRUE;
485949ce:	6a01      	li	v0,1
485949d0:	c340      	sb	v0,0(v1)
485949d2:	1015      	b	485949fe <com_app_msg_hook+0x166>
        break;
485949d4:	1ad0 52bb 	jal	48594aec <get_cable_state>
    case MSG_USB_UNSTICK:
        if(get_cable_state() == CABLE_STATE_ADAPTOR_IN)//ADAPTOR适配线拔出
485949d8:	6500      	nop
485949da:	7202      	cmpi	v0,2
485949dc:	6758      	move	v0,t8
485949de:	5a01      	sltiu	v0,1
485949e0:	6003      	bteqz	485949e8 <com_app_msg_hook+0x150>
485949e2:	9968      	lw	v1,32(s1)
        {
            private_msg->msg.type = MSG_ADAPTOR_OUT;//改为MSG_ADAPTOR_OUT消息
485949e4:	6aa1      	li	v0,161
485949e6:	db40      	sw	v0,0(v1)
485949e8:	6c00      	li	a0,0
        }
        change_cable_state(CABLE_STATE_CABLE_NULL);
485949ea:	1ad0 52c1 	jal	48594b04 <change_cable_state>
485949ee:	6500      	nop
485949f0:	b324      	lw	v1,48594a80 <.LBE2+0x28>
        g_ss_vip_event = TRUE;
485949f2:	6a01      	li	v0,1
485949f4:	c340      	sb	v0,0(v1)
485949f6:	1003      	b	485949fe <com_app_msg_hook+0x166>
        break;
485949f8:	b322      	lw	v1,48594a80 <.LBE2+0x28>
        
    case MSG_POWER_OFF:
    case MSG_LOW_POWER:
    //case MSG_RTCALARM:
        g_ss_vip_event = TRUE;
485949fa:	6a01      	li	v0,1
485949fc:	c340      	sb	v0,0(v1)
485949fe:	b221      	lw	v0,48594a80 <.LBE2+0x28>
        break;
    default:
        break;
    }
    
    if(g_ss_vip_event == TRUE)
48594a00:	a240      	lbu	v0,0(v0)
48594a02:	7201      	cmpi	v0,1
48594a04:	6758      	move	v0,t8
48594a06:	5a01      	sltiu	v0,1
48594a08:	6037      	bteqz	48594a78 <.LBE2+0x20>
48594a0a:	1ad0 52b5 	jal	48594ad4 <get_backlight_state>
    {
        //若背光处于调暗状态，恢复背光亮度，并修改背光状态
        if(get_backlight_state() == BACKLIGHT_STATE_DARK)
48594a0e:	6500      	nop
48594a10:	7201      	cmpi	v0,1
48594a12:	6758      	move	v0,t8
48594a14:	5a01      	sltiu	v0,1
48594a16:	600a      	bteqz	48594a2c <com_app_msg_hook+0x194>
48594a18:	b21e      	lw	v0,48594a90 <.LBE2+0x38>
        {
            com_set_contrast(sys_comval->lightness);
48594a1a:	9a40      	lw	v0,0(v0)
48594a1c:	a242      	lbu	v0,2(v0)
48594a1e:	6782      	move	a0,v0
48594a20:	b21d      	lw	v0,48594a94 <.LBE2+0x3c>
48594a22:	eac0      	jalrc	v0
48594a24:	6c00      	li	a0,0
            change_backlight_state(BACKLIGHT_STATE_NORMAL);
48594a26:	1ad0 52af 	jal	48594abc <change_backlight_state>
48594a2a:	6500      	nop
48594a2c:	1ad0 52a9 	jal	48594aa4 <get_screensave_state>
        }
        
        //若处于屏幕保护模式，退出屏幕保护模式
        if(get_screensave_state() == TRUE)
48594a30:	6500      	nop
48594a32:	7201      	cmpi	v0,1
48594a34:	6758      	move	v0,t8
48594a36:	5a01      	sltiu	v0,1
48594a38:	6010      	bteqz	48594a5a <.LBE2+0x2>

48594a3a <.LBB2>:
48594a3a:	9968      	lw	v1,32(s1)
        {
            msg_apps_t msg;
            
            //先响应退出屏幕保护模式，再响应当前消息，即偷梁换柱为退出屏幕保护模式消息，然后重发一次当前消息
            //1.返回 exit_screen_save 异步消息，在 com_message_box 中退出屏保
            private_msg->msg.type = MSG_APP_EXIT_SCREEN_SAVE;
48594a3c:	6aff      	li	v0,255
48594a3e:	4247      	addiu	v0,v0,7
48594a40:	db40      	sw	v0,0(v1)
48594a42:	a940      	lhu	v0,0(s1)
            
            //2.重发一次当前消息
            msg.type = msg_type;
48594a44:	d942      	sw	v0,8(s1)
48594a46:	b215      	lw	v0,48594a98 <.LBE2+0x40>
            send_async_msg(g_this_app_info->app_id, &msg);
48594a48:	9a40      	lw	v0,0(v0)
48594a4a:	a241      	lbu	v0,1(v0)
48594a4c:	4167      	addiu	v1,s1,7
48594a4e:	4361      	addiu	v1,v1,1
48594a50:	6782      	move	a0,v0
48594a52:	67a3      	move	a1,v1
48594a54:	b212      	lw	v0,48594a9c <.LBE2+0x44>
48594a56:	eac0      	jalrc	v0

48594a58 <.LBE2>:
48594a58:	1003      	b	48594a60 <.LBE2+0x8>
48594a5a:	b30a      	lw	v1,48594a80 <.LBE2+0x28>
        }
        else
        {
            g_ss_vip_event = FALSE;
48594a5c:	6a00      	li	v0,0
48594a5e:	c340      	sb	v0,0(v1)
48594a60:	b310      	lw	v1,48594aa0 <.LBE2+0x48>
        }
        
        //背光关闭计时，屏幕保护计时，省电关机计时，返回正在播放计时 清0
        g_sys_counter.light_counter = 0;
48594a62:	6a00      	li	v0,0
48594a64:	cb40      	sh	v0,0(v1)
48594a66:	b30f      	lw	v1,48594aa0 <.LBE2+0x48>
        g_sys_counter.screen_saver_counter = 0;
48594a68:	6a00      	li	v0,0
48594a6a:	cb41      	sh	v0,2(v1)
48594a6c:	b30d      	lw	v1,48594aa0 <.LBE2+0x48>
        g_sys_counter.poweroff_counter = 0;
48594a6e:	6a00      	li	v0,0
48594a70:	cb44      	sh	v0,8(v1)
48594a72:	b30c      	lw	v1,48594aa0 <.LBE2+0x48>
        g_sys_counter.playing_counter = 0;
48594a74:	6a00      	li	v0,0
48594a76:	cb42      	sh	v0,4(v1)
48594a78:	65b9      	move	sp,s1
    }
}
48594a7a:	6454      	restore	32,ra,s1
48594a7c:	e8a0      	jrc	ra
48594a7e:	0000      	addiu	s0,sp,0
48594a80:	558c      	slti	a1,140
48594a82:	9fc1      	lw	a2,4(a3)
48594a84:	6401      	restore	8
48594a86:	bfc1      	lwu	a2,4(a3)
48594a88:	041a      	addiu	a0,sp,104
48594a8a:	c008      	sb	s0,8(s0)
48594a8c:	48c8      	addiu	s0,-56
48594a8e:	4859      	addiu	s0,89
48594a90:	5418      	slti	a0,24
48594a92:	9fc1      	lw	a2,4(a3)
48594a94:	4601      	addiu	s0,a2,1
48594a96:	4861      	addiu	s0,97
48594a98:	5404      	slti	a0,4
48594a9a:	9fc1      	lw	a2,4(a3)
48594a9c:	4759      	daddiu	v0,a3,-7
48594a9e:	4849      	addiu	s0,73
48594aa0:	a180      	lbu	a0,0(s1)
48594aa2:	9fc1      	lw	a2,4(a3)

48594aa4 <get_screensave_state>:
48594aa4:	6491      	save	8,s1
48594aa6:	673d      	move	s1,sp
48594aa8:	b204      	lw	v0,48594ab8 <get_screensave_state+0x14>
48594aaa:	a24a      	lbu	v0,10(v0)
48594aac:	651a      	move	t8,v0
48594aae:	6758      	move	v0,t8
48594ab0:	65b9      	move	sp,s1
48594ab2:	6411      	restore	8,s1
48594ab4:	e8a0      	jrc	ra
48594ab6:	0000      	addiu	s0,sp,0
48594ab8:	a1b8      	lbu	a1,24(s1)
48594aba:	9fc1      	lw	a2,4(a3)

48594abc <change_backlight_state>:
48594abc:	6491      	save	8,s1
48594abe:	673d      	move	s1,sp
48594ac0:	6744      	move	v0,a0
48594ac2:	c148      	sb	v0,8(s1)
48594ac4:	b303      	lw	v1,48594ad0 <change_backlight_state+0x14>
48594ac6:	a148      	lbu	v0,8(s1)
48594ac8:	c349      	sb	v0,9(v1)
48594aca:	65b9      	move	sp,s1
48594acc:	6411      	restore	8,s1
48594ace:	e8a0      	jrc	ra
48594ad0:	a1b8      	lbu	a1,24(s1)
48594ad2:	9fc1      	lw	a2,4(a3)

48594ad4 <get_backlight_state>:
48594ad4:	6491      	save	8,s1
48594ad6:	673d      	move	s1,sp
48594ad8:	b204      	lw	v0,48594ae8 <get_backlight_state+0x14>
48594ada:	a249      	lbu	v0,9(v0)
48594adc:	651a      	move	t8,v0
48594ade:	6758      	move	v0,t8
48594ae0:	65b9      	move	sp,s1
48594ae2:	6411      	restore	8,s1
48594ae4:	e8a0      	jrc	ra
48594ae6:	0000      	addiu	s0,sp,0
48594ae8:	a1b8      	lbu	a1,24(s1)
48594aea:	9fc1      	lw	a2,4(a3)

48594aec <get_cable_state>:
48594aec:	6491      	save	8,s1
48594aee:	673d      	move	s1,sp
48594af0:	b204      	lw	v0,48594b00 <get_cable_state+0x14>
48594af2:	a24d      	lbu	v0,13(v0)
48594af4:	651a      	move	t8,v0
48594af6:	6758      	move	v0,t8
48594af8:	65b9      	move	sp,s1
48594afa:	6411      	restore	8,s1
48594afc:	e8a0      	jrc	ra
48594afe:	0000      	addiu	s0,sp,0
48594b00:	a1b8      	lbu	a1,24(s1)
48594b02:	9fc1      	lw	a2,4(a3)

48594b04 <change_cable_state>:
48594b04:	6491      	save	8,s1
48594b06:	673d      	move	s1,sp
48594b08:	6744      	move	v0,a0
48594b0a:	c148      	sb	v0,8(s1)
48594b0c:	b303      	lw	v1,48594b18 <change_cable_state+0x14>
48594b0e:	a148      	lbu	v0,8(s1)
48594b10:	c34d      	sb	v0,13(v1)
48594b12:	65b9      	move	sp,s1
48594b14:	6411      	restore	8,s1
48594b16:	e8a0      	jrc	ra
48594b18:	a1b8      	lbu	a1,24(s1)
48594b1a:	9fc1      	lw	a2,4(a3)

48594b1c <change_card_update>:
48594b1c:	6491      	save	8,s1
48594b1e:	673d      	move	s1,sp
48594b20:	6744      	move	v0,a0
48594b22:	c148      	sb	v0,8(s1)
48594b24:	b303      	lw	v1,48594b30 <change_card_update+0x14>
48594b26:	a148      	lbu	v0,8(s1)
48594b28:	c352      	sb	v0,18(v1)
48594b2a:	65b9      	move	sp,s1
48594b2c:	6411      	restore	8,s1
48594b2e:	e8a0      	jrc	ra
48594b30:	a1b8      	lbu	a1,24(s1)
48594b32:	9fc1      	lw	a2,4(a3)

48594b34 <change_card_plist>:
48594b34:	6491      	save	8,s1
48594b36:	673d      	move	s1,sp
48594b38:	6744      	move	v0,a0
48594b3a:	c148      	sb	v0,8(s1)
48594b3c:	b303      	lw	v1,48594b48 <change_card_plist+0x14>
48594b3e:	a148      	lbu	v0,8(s1)
48594b40:	c351      	sb	v0,17(v1)
48594b42:	65b9      	move	sp,s1
48594b44:	6411      	restore	8,s1
48594b46:	e8a0      	jrc	ra
48594b48:	a1b8      	lbu	a1,24(s1)
48594b4a:	9fc1      	lw	a2,4(a3)

48594b4c <change_card_state>:
48594b4c:	6491      	save	8,s1
48594b4e:	673d      	move	s1,sp
48594b50:	6744      	move	v0,a0
48594b52:	c148      	sb	v0,8(s1)
48594b54:	b303      	lw	v1,48594b60 <change_card_state+0x14>
48594b56:	a148      	lbu	v0,8(s1)
48594b58:	c34b      	sb	v0,11(v1)
48594b5a:	65b9      	move	sp,s1
48594b5c:	6411      	restore	8,s1
48594b5e:	e8a0      	jrc	ra
48594b60:	a1b8      	lbu	a1,24(s1)
48594b62:	9fc1      	lw	a2,4(a3)

48594b64 <get_card_state>:
48594b64:	6491      	save	8,s1
48594b66:	673d      	move	s1,sp
48594b68:	b204      	lw	v0,48594b78 <get_card_state+0x14>
48594b6a:	a24b      	lbu	v0,11(v0)
48594b6c:	651a      	move	t8,v0
48594b6e:	6758      	move	v0,t8
48594b70:	65b9      	move	sp,s1
48594b72:	6411      	restore	8,s1
48594b74:	e8a0      	jrc	ra
48594b76:	0000      	addiu	s0,sp,0
48594b78:	a1b8      	lbu	a1,24(s1)
48594b7a:	9fc1      	lw	a2,4(a3)
	...
Disassembly of section BANK_UI_1_24:

48614600 <com_set_contrast>:
48614600:	64d4      	save	32,ra,s1
 * \ingroup      misc_func
 * \note 
*******************************************************************************/
void com_set_contrast(uint8 lightness)
{
48614602:	0104      	addiu	s1,sp,16
48614604:	6744      	move	v0,a0
48614606:	c150      	sb	v0,16(s1)
48614608:	a150      	lbu	v0,16(s1)
    uint8 map_value;
    
    if(lightness > VALUE_LIGHTNESS_MAX)
4861460a:	5a0c      	sltiu	v0,12
4861460c:	6103      	btnez	48614614 <com_set_contrast+0x14>
4861460e:	6a00      	li	v0,0
    {
        map_value = 0;
48614610:	c140      	sb	v0,0(s1)
48614612:	1005      	b	4861461e <com_set_contrast+0x1e>
48614614:	b308      	lw	v1,48614634 <com_set_contrast+0x34>
    }
    else
    {
        map_value = lightness_map_data[lightness];
48614616:	a150      	lbu	v0,16(s1)
48614618:	e349      	addu	v0,v1,v0
4861461a:	a240      	lbu	v0,0(v0)
4861461c:	c140      	sb	v0,0(s1)
4861461e:	a140      	lbu	v0,0(s1)
    }
    
    lcd_set_contrast(map_value);
48614620:	6782      	move	a0,v0
48614622:	6d00      	li	a1,0
48614624:	6e00      	li	a2,0
48614626:	6f01      	li	a3,1
48614628:	b204      	lw	v0,48614638 <com_set_contrast+0x38>
4861462a:	eac0      	jalrc	v0
4861462c:	65b9      	move	sp,s1
}
4861462e:	6452      	restore	16,ra,s1
48614630:	e8a0      	jrc	ra
48614632:	0000      	addiu	s0,sp,0
48614634:	46a8      	addiu	a1,a2,-8
48614636:	4861      	addiu	s0,97
48614638:	6411      	restore	8,s1
4861463a:	bfc1      	lwu	a2,4(a3)

4861463c <com_set_gui_direction>:
4861463c:	64d3      	save	24,ra,s1

/******************************************************************************/
/*!                    
 * \par  Description:
 *    设置 GUI 显示方向（小机正向竖向或旋转方向横向）。
 * \param[in]    direct UI 显示方向，见 gui_direct_e 定义
 * \param[out]   none 
 * \return       none
 * \ingroup      misc_func
 * \note 
*******************************************************************************/
void com_set_gui_direction(gui_direct_e direct)
{
4861463e:	0104      	addiu	s1,sp,16
48614640:	6744      	move	v0,a0
48614642:	c148      	sb	v0,8(s1)
48614644:	b30b      	lw	v1,48614670 <com_set_gui_direction+0x34>
    g_gui_direct = direct;
48614646:	a148      	lbu	v0,8(s1)
48614648:	c340      	sb	v0,0(v1)
4861464a:	b20a      	lw	v0,48614670 <com_set_gui_direction+0x34>
    if(g_gui_direct == GUI_DIRECT_NORMAL)
4861464c:	a240      	lbu	v0,0(v0)
4861464e:	2a07      	bnez	v0,4861465e <com_set_gui_direction+0x22>
48614650:	6c00      	li	a0,0
    {
        ui_set_screen_direction(0);
48614652:	6d00      	li	a1,0
48614654:	6e00      	li	a2,0
48614656:	6f1e      	li	a3,30
48614658:	b207      	lw	v0,48614674 <com_set_gui_direction+0x38>
4861465a:	eac0      	jalrc	v0
4861465c:	1006      	b	4861466a <com_set_gui_direction+0x2e>
4861465e:	6c01      	li	a0,1
    }
    else
    {
        ui_set_screen_direction(1);
48614660:	6d00      	li	a1,0
48614662:	6e00      	li	a2,0
48614664:	6f1e      	li	a3,30
48614666:	b204      	lw	v0,48614674 <com_set_gui_direction+0x38>
48614668:	eac0      	jalrc	v0
4861466a:	65b9      	move	sp,s1
    }
}
4861466c:	6451      	restore	8,ra,s1
4861466e:	e8a0      	jrc	ra
48614670:	541e      	slti	a0,30
48614672:	9fc1      	lw	a2,4(a3)
48614674:	6bdd      	li	v1,221
48614676:	bfc1      	lwu	a2,4(a3)

48614678 <com_get_gui_direction>:
48614678:	6491      	save	8,s1

/******************************************************************************/
/*!                    
 * \par  Description:
 *    获取 GUI 显示方向（小机正向竖向或旋转方向横向）。
 * \param[in]    none
 * \param[out]   none 
 * \return       gui_direct_e
 * \retval           返回 GUI 显示方向，见 gui_direct_e 定义。
 * \ingroup      misc_func
 * \note 
*******************************************************************************/
gui_direct_e com_get_gui_direction(void)
{
4861467a:	673d      	move	s1,sp
4861467c:	b204      	lw	v0,4861468c <com_get_gui_direction+0x14>
    return g_gui_direct;
4861467e:	a240      	lbu	v0,0(v0)
48614680:	651a      	move	t8,v0
48614682:	6758      	move	v0,t8
}
48614684:	65b9      	move	sp,s1
48614686:	6411      	restore	8,s1
48614688:	e8a0      	jrc	ra
4861468a:	0000      	addiu	s0,sp,0
4861468c:	541e      	slti	a0,30
4861468e:	9fc1      	lw	a2,4(a3)

48614690 <com_set_sys_comval>:
48614690:	6491      	save	8,s1

/******************************************************************************/
/*!                    
 * \par  Description:
 *    设置 sys_comval 指针，以便 common 访问系统配置项。
 * \param[in]    comval 全局系统公共变量指针
 * \param[out]   none 
 * \return       none
 * \ingroup      misc_func
 * \note 
 * \li  前台应用在进入时必须调用该接口，否则 common 模块将无法正常运行。
*******************************************************************************/
void com_set_sys_comval(comval_t *comval)
{
48614692:	673d      	move	s1,sp
48614694:	d982      	sw	a0,8(s1)
48614696:	b304      	lw	v1,486146a4 <com_set_sys_comval+0x14>
    sys_comval = comval;
48614698:	9942      	lw	v0,8(s1)
4861469a:	db40      	sw	v0,0(v1)
4861469c:	65b9      	move	sp,s1
}
4861469e:	6411      	restore	8,s1
486146a0:	e8a0      	jrc	ra
486146a2:	0000      	addiu	s0,sp,0
486146a4:	5418      	slti	a0,24
486146a6:	9fc1      	lw	a2,4(a3)

486146a8 <lightness_map_data>:
486146a8:	0201 0403 0605 0807 0b09 0f0d               ............

486146b4 <sys_timer_init>:
486146b4:	64d4      	save	32,ra,s1
 * \li  除了 config.app，前台应用在进入时必须调用该接口，否则背光，屏保，省电关机，
 *      定时关机，状态栏更新，等等功能将无法使用。
 *******************************************************************************/
void sys_timer_init(void)
{
486146b6:	0104      	addiu	s1,sp,16
486146b8:	1b10 51dd 	jal	48614774 <get_app_timer_tag>
    uint8 tag_backup;

    //电池及其充电检测处理 
    tag_backup = get_app_timer_tag();
486146bc:	6500      	nop
486146be:	c140      	sb	v0,0(s1)
486146c0:	6cff      	li	a0,255
    change_app_timer_tag(APP_TIMER_TAG_SYS);
486146c2:	1b10 51d7 	jal	4861475c <change_app_timer_tag>
486146c6:	6500      	nop
486146c8:	f1e0 6a14 	li	v0,500
    sys_counter_timer_id = set_app_timer(APP_TIMER_ATTRB_CONTROL, 500, sys_counter_handle);
486146cc:	b31b      	lw	v1,48614738 <sys_timer_init+0x84>
486146ce:	6c01      	li	a0,1
486146d0:	67a2      	move	a1,v0
486146d2:	67c3      	move	a2,v1
486146d4:	b21a      	lw	v0,4861473c <sys_timer_init+0x88>
486146d6:	eac0      	jalrc	v0
486146d8:	6762      	move	v1,v0
486146da:	b21a      	lw	v0,48614740 <sys_timer_init+0x8c>
486146dc:	c260      	sb	v1,0(v0)
486146de:	a140      	lbu	v0,0(s1)
    change_app_timer_tag(tag_backup);
486146e0:	6782      	move	a0,v0
486146e2:	1b10 51d7 	jal	4861475c <change_app_timer_tag>
486146e6:	6500      	nop
486146e8:	1b10 51dd 	jal	48614774 <get_app_timer_tag>
    
    tag_backup = get_app_timer_tag();
486146ec:	6500      	nop
486146ee:	c140      	sb	v0,0(s1)
486146f0:	6cff      	li	a0,255
    change_app_timer_tag(APP_TIMER_TAG_SYS);
486146f2:	1b10 51d7 	jal	4861475c <change_app_timer_tag>
486146f6:	6500      	nop
486146f8:	f1e0 6a14 	li	v0,500
    sys_status_timer_id = set_app_timer(APP_TIMER_ATTRB_UI , 500, sys_status_handle);
486146fc:	b312      	lw	v1,48614744 <sys_timer_init+0x90>
486146fe:	6c00      	li	a0,0
48614700:	67a2      	move	a1,v0
48614702:	67c3      	move	a2,v1
48614704:	b20e      	lw	v0,4861473c <sys_timer_init+0x88>
48614706:	eac0      	jalrc	v0
48614708:	6762      	move	v1,v0
4861470a:	b210      	lw	v0,48614748 <sys_timer_init+0x94>
4861470c:	c260      	sb	v1,0(v0)
4861470e:	a140      	lbu	v0,0(s1)
    change_app_timer_tag(tag_backup);
48614710:	6782      	move	a0,v0
48614712:	1b10 51d7 	jal	4861475c <change_app_timer_tag>
48614716:	6500      	nop
48614718:	b20d      	lw	v0,4861474c <sys_timer_init+0x98>

    /*tag_backup = get_app_timer_tag();
    change_app_timer_tag(APP_TIMER_TAG_SYS);
    peripheral_detect_timer_id = set_app_timer(APP_TIMER_ATTRB_CONTROL, PER_DETECT_PERIOD, peripheral_detect_handle);
     change_app_timer_tag(tag_backup);*/

    com_battery_charge_deal();
4861471a:	eac0      	jalrc	v0
4861471c:	b20d      	lw	v0,4861474c <sys_timer_init+0x98>
    peripheral_detect_handle();
4861471e:	eac0      	jalrc	v0
48614720:	b20a      	lw	v0,48614744 <sys_timer_init+0x90>
    
    stop_app_timer(sys_status_timer_id);//默认不显示 status，通过 gui_set_headbar_mode 开关
48614722:	8240      	lb	v0,0(v0)
48614724:	6782      	move	a0,v0
48614726:	b20c      	lw	v0,48614754 <sys_timer_init+0xa0>
48614728:	eac0      	jalrc	v0
4861472a:	b30c      	lw	v1,48614758 <sys_timer_init+0xa4>
    g_sys_counter.battery_counter = 100;//强制读取充电状态和电池电量
4861472c:	6a64      	li	v0,100
4861472e:	cb43      	sh	v0,6(v1)
48614730:	65b9      	move	sp,s1
    
    
}
48614732:	6452      	restore	16,ra,s1
48614734:	e8a0      	jrc	ra
48614736:	0000      	addiu	s0,sp,0
48614738:	4601      	addiu	s0,a2,1
4861473a:	4865      	addiu	s0,101
4861473c:	4601      	addiu	s0,a2,1
4861473e:	4845      	addiu	s0,69
48614740:	541c      	slti	a0,28
48614742:	9fc1      	lw	a2,4(a3)
48614744:	4881      	addiu	s0,-127
48614746:	4865      	addiu	s0,101
48614748:	541d      	slti	a0,29
4861474a:	9fc1      	lw	a2,4(a3)
4861474c:	4a0d      	addiu	v0,13
4861474e:	4865      	addiu	s0,101
48614750:	48d1      	addiu	s0,-47
48614752:	4865      	addiu	s0,101
48614754:	46c5      	addiu	a2,a2,5
48614756:	4845      	addiu	s0,69
48614758:	a180      	lbu	a0,0(s1)
4861475a:	9fc1      	lw	a2,4(a3)

4861475c <change_app_timer_tag>:
4861475c:	6491      	save	8,s1
4861475e:	673d      	move	s1,sp
48614760:	6744      	move	v0,a0
48614762:	c148      	sb	v0,8(s1)
48614764:	b303      	lw	v1,48614770 <change_app_timer_tag+0x14>
48614766:	a148      	lbu	v0,8(s1)
48614768:	c340      	sb	v0,0(v1)
4861476a:	65b9      	move	sp,s1
4861476c:	6411      	restore	8,s1
4861476e:	e8a0      	jrc	ra
48614770:	5414      	slti	a0,20
48614772:	9fc1      	lw	a2,4(a3)

48614774 <get_app_timer_tag>:
48614774:	6491      	save	8,s1
48614776:	673d      	move	s1,sp
48614778:	b204      	lw	v0,48614788 <get_app_timer_tag+0x14>
4861477a:	a240      	lbu	v0,0(v0)
4861477c:	651a      	move	t8,v0
4861477e:	6758      	move	v0,t8
48614780:	65b9      	move	sp,s1
48614782:	6411      	restore	8,s1
48614784:	e8a0      	jrc	ra
48614786:	0000      	addiu	s0,sp,0
48614788:	5414      	slti	a0,20
4861478a:	9fc1      	lw	a2,4(a3)

4861478c <sys_timer_exit>:
4861478c:	64d3      	save	24,ra,s1

/******************************************************************************/
/*!
 * \par  Description:
 *    删除系统计时软定时器和 headbar 周期更新软定时器，由前台应用退出应用时调用。
 * \param[in]    none
 * \param[out]   none
 * \return       none
 * \ingroup      misc_func
 * \note
 * \li  退出应用时，需要调用 sys_counter_exit，以删除 sys_counter_init 创建的软定时器。
 *******************************************************************************/
void sys_timer_exit(void)
{
4861478e:	0104      	addiu	s1,sp,16
48614790:	b207      	lw	v0,486147ac <sys_timer_exit+0x20>

    kill_app_timer(sys_counter_timer_id);
48614792:	8240      	lb	v0,0(v0)
48614794:	6782      	move	a0,v0
48614796:	b207      	lw	v0,486147b0 <sys_timer_exit+0x24>
48614798:	eac0      	jalrc	v0
4861479a:	b207      	lw	v0,486147b4 <sys_timer_exit+0x28>

    //kill_app_timer(peripheral_detect_timer_id);

    kill_app_timer(sys_status_timer_id);    
4861479c:	8240      	lb	v0,0(v0)
4861479e:	6782      	move	a0,v0
486147a0:	b204      	lw	v0,486147b0 <sys_timer_exit+0x24>
486147a2:	eac0      	jalrc	v0
486147a4:	65b9      	move	sp,s1
}
486147a6:	6451      	restore	8,ra,s1
486147a8:	e8a0      	jrc	ra
486147aa:	0000      	addiu	s0,sp,0
486147ac:	541c      	slti	a0,28
486147ae:	9fc1      	lw	a2,4(a3)
486147b0:	473d      	daddiu	s1,a3,-3
486147b2:	4845      	addiu	s0,69
486147b4:	541d      	slti	a0,29
486147b6:	9fc1      	lw	a2,4(a3)
	...
Disassembly of section BANK_UI_1_25:

48654600 <sys_counter_handle>:
48654600:	64fa      	save	80,ra,s0-s1
48654602:	b094      	lw	s0,48654850 <sys_counter_handle+0x250>
48654604:	98a0      	lw	a1,0(s0)
48654606:	a566      	lbu	v1,6(a1)
48654608:	a505      	lbu	s0,5(a1)
4865460a:	d308      	sw	v1,32(sp)
4865460c:	a587      	lbu	a0,7(a1)
4865460e:	d409      	sw	a0,36(sp)
48654610:	a5e9      	lbu	a3,9(a1)
48654612:	d70a      	sw	a3,40(sp)
48654614:	a5c8      	lbu	a2,8(a1)
48654616:	d60b      	sw	a2,44(sp)
48654618:	a564      	lbu	v1,4(a1)
4865461a:	d30c      	sw	v1,48(sp)
4865461c:	a592      	lbu	a0,18(a1)
4865461e:	d40d      	sw	a0,52(sp)
48654620:	a553      	lbu	v0,19(a1)
48654622:	d20e      	sw	v0,56(sp)
48654624:	2004      	beqz	s0,4865462e <sys_counter_handle+0x2e>
48654626:	b18c      	lw	s1,48654854 <sys_counter_handle+0x254>
48654628:	a189      	lbu	a0,9(s1)
4865462a:	f0a0 2412 	beqz	a0,48654792 <sys_counter_handle+0x192>
4865462e:	9208      	lw	v0,32(sp)
48654630:	2203      	beqz	v0,48654638 <sys_counter_handle+0x38>
48654632:	950c      	lw	a1,48(sp)
48654634:	f080 2d12 	bnez	a1,4865475c <sys_counter_handle+0x15c>
48654638:	950d      	lw	a1,52(sp)
4865463a:	2504      	beqz	a1,48654644 <sys_counter_handle+0x44>
4865463c:	b686      	lw	a2,48654854 <sys_counter_handle+0x254>
4865463e:	a649      	lbu	v0,9(a2)
48654640:	7201      	cmpi	v0,1
48654642:	6076      	bteqz	48654730 <sys_counter_handle+0x130>
48654644:	960e      	lw	a2,56(sp)
48654646:	2604      	beqz	a2,48654650 <sys_counter_handle+0x50>
48654648:	b383      	lw	v1,48654854 <sys_counter_handle+0x254>
4865464a:	a34a      	lbu	v0,10(v1)
4865464c:	7201      	cmpi	v0,1
4865464e:	6052      	bteqz	486546f4 <sys_counter_handle+0xf4>
48654650:	b487      	lw	a0,4865486c <sys_counter_handle+0x26c>
48654652:	a462      	lbu	v1,2(a0)
48654654:	7301      	cmpi	v1,1
48654656:	6045      	bteqz	486546e2 <sys_counter_handle+0xe2>
48654658:	a443      	lbu	v0,3(a0)
4865465a:	7201      	cmpi	v0,1
4865465c:	6042      	bteqz	486546e2 <sys_counter_handle+0xe2>
4865465e:	9609      	lw	a2,36(sp)
48654660:	2607      	beqz	a2,48654670 <sys_counter_handle+0x70>
48654662:	b37d      	lw	v1,48654854 <sys_counter_handle+0x254>
48654664:	a34d      	lbu	v0,13(v1)
48654666:	2a04      	bnez	v0,48654670 <sys_counter_handle+0x70>
48654668:	a3e1      	lbu	a3,1(v1)
4865466a:	7701      	cmpi	a3,1
4865466c:	f0c0 6102 	btnez	486547f4 <sys_counter_handle+0x1f4>
48654670:	930a      	lw	v1,40(sp)
48654672:	2309      	beqz	v1,48654686 <sys_counter_handle+0x86>
48654674:	a4a8      	lbu	a1,8(a0)
48654676:	ed6e      	xor	a1,v1
48654678:	f0c0 2d0f 	bnez	a1,4865481a <sys_counter_handle+0x21a>
4865467c:	b776      	lw	a3,48654854 <sys_counter_handle+0x254>
4865467e:	a7cd      	lbu	a2,13(a3)
48654680:	f080 261b 	beqz	a2,486547ba <sys_counter_handle+0x1ba>
48654684:	b47a      	lw	a0,4865486c <sys_counter_handle+0x26c>
48654686:	a4e2      	lbu	a3,2(a0)
48654688:	7701      	cmpi	a3,1
4865468a:	6003      	bteqz	48654692 <sys_counter_handle+0x92>
4865468c:	a4c3      	lbu	a2,3(a0)
4865468e:	7601      	cmpi	a2,1
48654690:	6107      	btnez	486546a0 <sys_counter_handle+0xa0>
48654692:	b371      	lw	v1,48654854 <sys_counter_handle+0x254>
48654694:	a381      	lbu	a0,1(v1)
48654696:	7401      	cmpi	a0,1
48654698:	6003      	bteqz	486546a0 <sys_counter_handle+0xa0>
4865469a:	a362      	lbu	v1,2(v1)
4865469c:	f080 230a 	beqz	v1,486547b4 <sys_counter_handle+0x1b4>
486546a0:	930b      	lw	v1,44(sp)
486546a2:	2311      	beqz	v1,486546c6 <sys_counter_handle+0xc6>
486546a4:	b36c      	lw	v1,48654854 <sys_counter_handle+0x254>
486546a6:	a3aa      	lbu	a1,10(v1)
486546a8:	2d0e      	bnez	a1,486546c6 <sys_counter_handle+0xc6>
486546aa:	a3e1      	lbu	a3,1(v1)
486546ac:	7701      	cmpi	a3,1
486546ae:	610b      	btnez	486546c6 <sys_counter_handle+0xc6>
486546b0:	a3c2      	lbu	a2,2(v1)
486546b2:	2e09      	bnez	a2,486546c6 <sys_counter_handle+0xc6>
486546b4:	b269      	lw	v0,48654858 <sys_counter_handle+0x258>
486546b6:	940b      	lw	a0,44(sp)
486546b8:	aaa2      	lhu	a1,4(v0)
486546ba:	4561      	addiu	v1,a1,1
486546bc:	ca62      	sh	v1,4(v0)
486546be:	eb31      	zeh	v1
486546c0:	eb83      	sltu	v1,a0
486546c2:	f0a0 601b 	bteqz	4865483c <sys_counter_handle+0x23c>
486546c6:	b26e      	lw	v0,4865487c <sys_counter_handle+0x27c>
486546c8:	eac0      	jalrc	v0
486546ca:	b463      	lw	a0,48654854 <sys_counter_handle+0x254>
486546cc:	67fd      	move	a3,sp
486546ce:	b568      	lw	a1,4865486c <sys_counter_handle+0x26c>
486546d0:	a461      	lbu	v1,1(a0)
486546d2:	a4c2      	lbu	a2,2(a0)
486546d4:	f020 a748 	lbu	v0,40(a3)
486546d8:	c562      	sb	v1,2(a1)
486546da:	c5c3      	sb	a2,3(a1)
486546dc:	c548      	sb	v0,8(a1)
486546de:	647a      	restore	80,ra,s0-s1
486546e0:	e8a0      	jrc	ra
486546e2:	b35d      	lw	v1,48654854 <sys_counter_handle+0x254>
486546e4:	a3e1      	lbu	a3,1(v1)
486546e6:	7701      	cmpi	a3,1
486546e8:	60ba      	bteqz	4865465e <sys_counter_handle+0x5e>
486546ea:	a362      	lbu	v1,2(v1)
486546ec:	2bb8      	bnez	v1,4865465e <sys_counter_handle+0x5e>
486546ee:	b55b      	lw	a1,48654858 <sys_counter_handle+0x258>
486546f0:	cd64      	sh	v1,8(a1)
486546f2:	17b5      	b	4865465e <sys_counter_handle+0x5e>
486546f4:	b55d      	lw	a1,48654868 <sys_counter_handle+0x268>
486546f6:	a5e0      	lbu	a3,0(a1)
486546f8:	7703      	cmpi	a3,3
486546fa:	60aa      	bteqz	48654650 <sys_counter_handle+0x50>
486546fc:	a389      	lbu	a0,9(v1)
486546fe:	7402      	cmpi	a0,2
48654700:	60a7      	bteqz	48654650 <sys_counter_handle+0x50>
48654702:	b256      	lw	v0,48654858 <sys_counter_handle+0x258>
48654704:	940e      	lw	a0,56(sp)
48654706:	aa61      	lhu	v1,2(v0)
48654708:	3690      	sll	a2,a0,4
4865470a:	4361      	addiu	v1,v1,1
4865470c:	e697      	subu	a1,a2,a0
4865470e:	9708      	lw	a3,32(sp)
48654710:	ca61      	sh	v1,2(v0)
48654712:	32ac      	sll	v0,a1,3
48654714:	eb31      	zeh	v1
48654716:	e759      	addu	a2,a3,v0
48654718:	ebc2      	slt	v1,a2
4865471a:	619a      	btnez	48654650 <sys_counter_handle+0x50>
4865471c:	b551      	lw	a1,48654860 <sys_counter_handle+0x260>
4865471e:	6cff      	li	a0,255
48654720:	44c6      	addiu	a2,a0,6
48654722:	9de0      	lw	a3,0(a1)
48654724:	d604      	sw	a2,16(sp)
48654726:	a781      	lbu	a0,1(a3)
48654728:	b24f      	lw	v0,48654864 <sys_counter_handle+0x264>
4865472a:	ea40      	jalr	v0
4865472c:	0504      	addiu	a1,sp,16
4865472e:	1790      	b	48654650 <sys_counter_handle+0x50>
48654730:	970c      	lw	a3,48(sp)
48654732:	2f88      	bnez	a3,48654644 <sys_counter_handle+0x44>
48654734:	b649      	lw	a2,48654858 <sys_counter_handle+0x258>
48654736:	940d      	lw	a0,52(sp)
48654738:	ae40      	lhu	v0,0(a2)
4865473a:	e08d      	addu	v1,s0,a0
4865473c:	42a1      	addiu	a1,v0,1
4865473e:	cea0      	sh	a1,0(a2)
48654740:	ed31      	zeh	a1
48654742:	ed62      	slt	a1,v1
48654744:	f77f 611e 	btnez	48654644 <sys_counter_handle+0x44>
48654748:	b346      	lw	v1,48654860 <sys_counter_handle+0x260>
4865474a:	6cff      	li	a0,255
4865474c:	44a6      	addiu	a1,a0,6
4865474e:	9be0      	lw	a3,0(v1)
48654750:	d504      	sw	a1,16(sp)
48654752:	a781      	lbu	a0,1(a3)
48654754:	b244      	lw	v0,48654864 <sys_counter_handle+0x264>
48654756:	ea40      	jalr	v0
48654758:	0504      	addiu	a1,sp,16
4865475a:	1774      	b	48654644 <sys_counter_handle+0x44>
4865475c:	b33e      	lw	v1,48654854 <sys_counter_handle+0x254>
4865475e:	a3ca      	lbu	a2,10(v1)
48654760:	f77f 2e0a 	bnez	a2,48654638 <sys_counter_handle+0x38>
48654764:	a3e2      	lbu	a3,2(v1)
48654766:	7702      	cmpi	a3,2
48654768:	f77f 6006 	bteqz	48654638 <sys_counter_handle+0x38>
4865476c:	b23b      	lw	v0,48654858 <sys_counter_handle+0x258>
4865476e:	9408      	lw	a0,32(sp)
48654770:	aaa1      	lhu	a1,2(v0)
48654772:	4561      	addiu	v1,a1,1
48654774:	ca61      	sh	v1,2(v0)
48654776:	eb31      	zeh	v1
48654778:	eb83      	sltu	v1,a0
4865477a:	f75f 611d 	btnez	48654638 <sys_counter_handle+0x38>
4865477e:	b739      	lw	a3,48654860 <sys_counter_handle+0x260>
48654780:	6bff      	li	v1,255
48654782:	4385      	addiu	a0,v1,5
48654784:	9fc0      	lw	a2,0(a3)
48654786:	d404      	sw	a0,16(sp)
48654788:	a681      	lbu	a0,1(a2)
4865478a:	b237      	lw	v0,48654864 <sys_counter_handle+0x264>
4865478c:	ea40      	jalr	v0
4865478e:	0504      	addiu	a1,sp,16
48654790:	1753      	b	48654638 <sys_counter_handle+0x38>
48654792:	a142      	lbu	v0,2(s1)
48654794:	7202      	cmpi	v0,2
48654796:	f75f 600a 	bteqz	4865462e <sys_counter_handle+0x2e>
4865479a:	b630      	lw	a2,48654858 <sys_counter_handle+0x258>
4865479c:	aee0      	lhu	a3,0(a2)
4865479e:	47a1      	addiu	a1,a3,1
486547a0:	cea0      	sh	a1,0(a2)
486547a2:	ed31      	zeh	a1
486547a4:	ed03      	sltu	a1,s0
486547a6:	f75f 6102 	btnez	4865462e <sys_counter_handle+0x2e>
486547aa:	b32d      	lw	v1,4865485c <sys_counter_handle+0x25c>
486547ac:	ebc0      	jalrc	v1
486547ae:	6c01      	li	a0,1
486547b0:	c189      	sb	a0,9(s1)
486547b2:	173d      	b	4865462e <sys_counter_handle+0x2e>
486547b4:	b229      	lw	v0,48654858 <sys_counter_handle+0x258>
486547b6:	ca62      	sh	v1,4(v0)
486547b8:	1773      	b	486546a0 <sys_counter_handle+0xa0>
486547ba:	b22f      	lw	v0,48654874 <sys_counter_handle+0x274>
486547bc:	67a6      	move	a1,a2
486547be:	0406      	addiu	a0,sp,24
486547c0:	ea40      	jalr	v0
486547c2:	6f24      	li	a3,36
486547c4:	675d      	move	v0,sp
486547c6:	b52d      	lw	a1,48654878 <sys_counter_handle+0x278>
486547c8:	a29a      	lbu	a0,26(v0)
486547ca:	a560      	lbu	v1,0(a1)
486547cc:	67c4      	move	a2,a0
486547ce:	ee11      	zeb	a2
486547d0:	ee6e      	xor	a2,v1
486547d2:	f75f 2617 	beqz	a2,48654684 <sys_counter_handle+0x84>
486547d6:	b321      	lw	v1,48654858 <sys_counter_handle+0x258>
486547d8:	c580      	sb	a0,0(a1)
486547da:	ab45      	lhu	v0,10(v1)
486547dc:	2205      	beqz	v0,486547e8 <sys_counter_handle+0x1e8>
486547de:	428f      	addiu	a0,v0,-1
486547e0:	cb85      	sh	a0,10(v1)
486547e2:	ec31      	zeh	a0
486547e4:	f75f 2c0e 	bnez	a0,48654684 <sys_counter_handle+0x84>
486547e8:	6d84      	li	a1,132
486547ea:	b222      	lw	v0,48654870 <sys_counter_handle+0x270>
486547ec:	d504      	sw	a1,16(sp)
486547ee:	ea40      	jalr	v0
486547f0:	0404      	addiu	a0,sp,16
486547f2:	1748      	b	48654684 <sys_counter_handle+0x84>
486547f4:	a3a2      	lbu	a1,2(v1)
486547f6:	f73f 2d1b 	bnez	a1,48654670 <sys_counter_handle+0x70>
486547fa:	b218      	lw	v0,48654858 <sys_counter_handle+0x258>
486547fc:	9609      	lw	a2,36(sp)
486547fe:	aae4      	lhu	a3,8(v0)
48654800:	4761      	addiu	v1,a3,1
48654802:	ca64      	sh	v1,8(v0)
48654804:	eb31      	zeh	v1
48654806:	ebc3      	sltu	v1,a2
48654808:	f73f 6112 	btnez	48654670 <sys_counter_handle+0x70>
4865480c:	6c84      	li	a0,132
4865480e:	b219      	lw	v0,48654870 <sys_counter_handle+0x270>
48654810:	d404      	sw	a0,16(sp)
48654812:	ea40      	jalr	v0
48654814:	0404      	addiu	a0,sp,16
48654816:	b416      	lw	a0,4865486c <sys_counter_handle+0x26c>
48654818:	172b      	b	48654670 <sys_counter_handle+0x70>
4865481a:	6d00      	li	a1,0
4865481c:	b216      	lw	v0,48654874 <sys_counter_handle+0x274>
4865481e:	67c5      	move	a2,a1
48654820:	0406      	addiu	a0,sp,24
48654822:	ea40      	jalr	v0
48654824:	6f24      	li	a3,36
48654826:	677d      	move	v1,sp
48654828:	940a      	lw	a0,40(sp)
4865482a:	a3da      	lbu	a2,26(v1)
4865482c:	b513      	lw	a1,48654878 <sys_counter_handle+0x278>
4865482e:	3290      	sll	v0,a0,4
48654830:	c5c0      	sb	a2,0(a1)
48654832:	e29f      	subu	a3,v0,a0
48654834:	b609      	lw	a2,48654858 <sys_counter_handle+0x258>
48654836:	33e8      	sll	v1,a3,2
48654838:	ce65      	sh	v1,10(a2)
4865483a:	1720      	b	4865467c <sys_counter_handle+0x7c>
4865483c:	b609      	lw	a2,48654860 <sys_counter_handle+0x260>
4865483e:	6bff      	li	v1,255
48654840:	4384      	addiu	a0,v1,4
48654842:	9ee0      	lw	a3,0(a2)
48654844:	d404      	sw	a0,16(sp)
48654846:	a781      	lbu	a0,1(a3)
48654848:	b207      	lw	v0,48654864 <sys_counter_handle+0x264>
4865484a:	ea40      	jalr	v0
4865484c:	0504      	addiu	a1,sp,16
4865484e:	173b      	b	486546c6 <sys_counter_handle+0xc6>
48654850:	5418      	slti	a0,24
48654852:	9fc1      	lw	a2,4(a3)
48654854:	a1b8      	lbu	a1,24(s1)
48654856:	9fc1      	lw	a2,4(a3)
48654858:	a180      	lbu	a0,0(s1)
4865485a:	9fc1      	lw	a2,4(a3)
4865485c:	4601      	addiu	s0,a2,1
4865485e:	4861      	addiu	s0,97
48654860:	5404      	slti	a0,4
48654862:	9fc1      	lw	a2,4(a3)
48654864:	4759      	daddiu	v0,a3,-7
48654866:	4849      	addiu	s0,73
48654868:	5588      	slti	a1,136
4865486a:	9fc1      	lw	a2,4(a3)
4865486c:	a1d0      	lbu	a2,16(s1)
4865486e:	9fc1      	lw	a2,4(a3)
48654870:	47b1      	daddiu	a1,a3,1
48654872:	4849      	addiu	s0,73
48654874:	6401      	restore	8
48654876:	bfc1      	lwu	a2,4(a3)
48654878:	a1e5      	lbu	a3,5(s1)
4865487a:	9fc1      	lw	a2,4(a3)
4865487c:	4a0d      	addiu	v0,13
4865487e:	4865      	addiu	s0,101

48654880 <sys_status_handle>:
48654880:	64e3      	save	24,ra,s0
48654882:	b20f      	lw	v0,486548bc <sys_status_handle+0x3c>
48654884:	6b01      	li	v1,1
48654886:	a24f      	lbu	v0,15(v0)
48654888:	7203      	cmpi	v0,3
4865488a:	6003      	bteqz	48654892 <sys_status_handle+0x12>
4865488c:	7202      	cmpi	v0,2
4865488e:	6110      	btnez	486548b0 <sys_status_handle+0x30>
48654890:	6b05      	li	v1,5
48654892:	b40c      	lw	a0,486548c0 <sys_status_handle+0x40>
48654894:	c460      	sb	v1,0(a0)
48654896:	b00c      	lw	s0,486548c4 <sys_status_handle+0x44>
48654898:	a080      	lbu	a0,0(s0)
4865489a:	2c06      	bnez	a0,486548a8 <sys_status_handle+0x28>
4865489c:	b20b      	lw	v0,486548c8 <sys_status_handle+0x48>
4865489e:	eac0      	jalrc	v0
486548a0:	6f02      	li	a3,2
486548a2:	c0e0      	sb	a3,0(s0)
486548a4:	6463      	restore	24,ra,s0
486548a6:	e8a0      	jrc	ra
486548a8:	b309      	lw	v1,486548c8 <sys_status_handle+0x48>
486548aa:	ebc0      	jalrc	v1
486548ac:	6463      	restore	24,ra,s0
486548ae:	e8a0      	jrc	ra
486548b0:	b304      	lw	v1,486548bc <sys_status_handle+0x3c>
486548b2:	a3c0      	lbu	a2,0(v1)
486548b4:	46a1      	addiu	a1,a2,1
486548b6:	c3a0      	sb	a1,0(v1)
486548b8:	17ee      	b	48654896 <sys_status_handle+0x16>
486548ba:	0000      	addiu	s0,sp,0
486548bc:	a1b8      	lbu	a1,24(s1)
486548be:	9fc1      	lw	a2,4(a3)
486548c0:	5568      	slti	a1,104
486548c2:	9fc1      	lw	a2,4(a3)
486548c4:	556c      	slti	a1,108
486548c6:	9fc1      	lw	a2,4(a3)
486548c8:	46bd      	daddiu	a1,a2,-3
486548ca:	4869      	addiu	s0,105
486548cc:	48d5      	addiu	s0,-43
486548ce:	4865      	addiu	s0,101

486548d0 <peripheral_detect_handle>:
486548d0:	e8a0      	jrc	ra
486548d2:	6500      	nop

486548d4 <gui_headbar_handle>:
486548d4:	64e4      	save	32,ra,s0
486548d6:	b42c      	lw	a0,48654984 <.LBE4+0x56>
486548d8:	6800      	li	s0,0
486548da:	ac43      	lhu	v0,6(a0)
486548dc:	f7ff 721f 	cmpi	v0,65535
486548e0:	600f      	bteqz	48654900 <gui_headbar_handle+0x2c>
486548e2:	b32a      	lw	v1,48654988 <.LBE4+0x5a>
486548e4:	a3cf      	lbu	a2,15(v1)
486548e6:	46af      	addiu	a1,a2,-1
486548e8:	ed11      	zeb	a1
486548ea:	5d02      	sltiu	a1,2
486548ec:	6105      	btnez	486548f8 <gui_headbar_handle+0x24>
486548ee:	b228      	lw	v0,4865498c <.LBE4+0x5e>
486548f0:	a3f0      	lbu	a3,16(v1)
486548f2:	a260      	lbu	v1,0(v0)
486548f4:	ef6e      	xor	a3,v1
486548f6:	2704      	beqz	a3,48654900 <gui_headbar_handle+0x2c>
486548f8:	6801      	li	s0,1
486548fa:	282d      	bnez	s0,48654956 <.LBE4+0x28>
486548fc:	6464      	restore	32,ra,s0
486548fe:	e8a0      	jrc	ra
48654900:	aca1      	lhu	a1,2(a0)
48654902:	f7ff 751f 	cmpi	a1,65535
48654906:	611a      	btnez	4865493c <.LBE4+0xe>
48654908:	ac62      	lhu	v1,4(a0)
4865490a:	f7ff 731f 	cmpi	v1,65535
4865490e:	612b      	btnez	48654966 <.LBE4+0x38>
48654910:	acc4      	lhu	a2,8(a0)
48654912:	f7ff 761f 	cmpi	a2,65535
48654916:	6006      	bteqz	48654924 <.LBE2+0xa>

48654918 <.LBB2>:
48654918:	b21c      	lw	v0,48654988 <.LBE4+0x5a>

4865491a <.LBE2>:
4865491a:	b522      	lw	a1,486549a0 <.LBE4+0x72>
4865491c:	a26d      	lbu	v1,13(v0)
4865491e:	a5e5      	lbu	a3,5(a1)
48654920:	ef6e      	xor	a3,v1
48654922:	2fea      	bnez	a3,486548f8 <gui_headbar_handle+0x24>
48654924:	acc5      	lhu	a2,10(a0)
48654926:	f7ff 761f 	cmpi	a2,65535
4865492a:	60e7      	bteqz	486548fa <gui_headbar_handle+0x26>

4865492c <.LBB4>:
4865492c:	b517      	lw	a1,48654988 <.LBE4+0x5a>

4865492e <.LBE4>:
4865492e:	b31d      	lw	v1,486549a0 <.LBE4+0x72>
48654930:	a5eb      	lbu	a3,11(a1)
48654932:	a384      	lbu	a0,4(v1)
48654934:	ecee      	xor	a0,a3
48654936:	24e1      	beqz	a0,486548fa <gui_headbar_handle+0x26>
48654938:	6801      	li	s0,1
4865493a:	17df      	b	486548fa <gui_headbar_handle+0x26>
4865493c:	b713      	lw	a3,48654988 <.LBE4+0x5a>
4865493e:	6b07      	li	v1,7
48654940:	a7c4      	lbu	a2,4(a3)
48654942:	7601      	cmpi	a2,1
48654944:	610d      	btnez	48654960 <.LBE4+0x32>
48654946:	730b      	cmpi	v1,11
48654948:	60df      	bteqz	48654908 <gui_headbar_handle+0x34>
4865494a:	b613      	lw	a2,48654994 <.LBE4+0x66>
4865494c:	a6a0      	lbu	a1,0(a2)
4865494e:	ed6e      	xor	a1,v1
48654950:	25db      	beqz	a1,48654908 <gui_headbar_handle+0x34>
48654952:	6801      	li	s0,1
48654954:	17d2      	b	486548fa <gui_headbar_handle+0x26>
48654956:	b214      	lw	v0,486549a4 <.LBE4+0x76>
48654958:	ea40      	jalr	v0
4865495a:	6c02      	li	a0,2
4865495c:	6464      	restore	32,ra,s0
4865495e:	e8a0      	jrc	ra
48654960:	b20c      	lw	v0,4865498c <.LBE4+0x5e>
48654962:	a260      	lbu	v1,0(v0)
48654964:	17f0      	b	48654946 <.LBE4+0x18>
48654966:	6d00      	li	a1,0
48654968:	b20c      	lw	v0,48654998 <.LBE4+0x6a>
4865496a:	0404      	addiu	a0,sp,16
4865496c:	67c5      	move	a2,a1
4865496e:	ea40      	jalr	v0
48654970:	6f24      	li	a3,36
48654972:	b20b      	lw	v0,4865499c <.LBE4+0x6e>
48654974:	67bd      	move	a1,sp
48654976:	a591      	lbu	a0,17(a1)
48654978:	a2e0      	lbu	a3,0(v0)
4865497a:	ecee      	xor	a0,a3
4865497c:	2cbd      	bnez	a0,486548f8 <gui_headbar_handle+0x24>
4865497e:	b402      	lw	a0,48654984 <.LBE4+0x56>
48654980:	17c7      	b	48654910 <gui_headbar_handle+0x3c>
48654982:	0000      	addiu	s0,sp,0
48654984:	5570      	slti	a1,112
48654986:	9fc1      	lw	a2,4(a3)
48654988:	a1b8      	lbu	a1,24(s1)
4865498a:	9fc1      	lw	a2,4(a3)
4865498c:	556b      	slti	a1,107
4865498e:	9fc1      	lw	a2,4(a3)
48654990:	557c      	slti	a1,124
48654992:	9fc1      	lw	a2,4(a3)
48654994:	5569      	slti	a1,105
48654996:	9fc1      	lw	a2,4(a3)
48654998:	6401      	restore	8
4865499a:	bfc1      	lwu	a2,4(a3)
4865499c:	556a      	slti	a1,106
4865499e:	9fc1      	lw	a2,4(a3)
486549a0:	a1d0      	lbu	a2,16(s1)
486549a2:	9fc1      	lw	a2,4(a3)
486549a4:	46bd      	daddiu	a1,a2,-3
486549a6:	4869      	addiu	s0,105

486549a8 <com_battery_charge_change_deal>:
486549a8:	6492      	save	16,s1

//充电与电量发生改变时需要处理
//返回TRUE表示处理完毕，本次检测处理已OK；返回FALSE表示继续后续计时处理
void com_battery_charge_change_deal(uint8 cur_charge_state, uint8 cur_bat_val)
{
486549aa:	673d      	move	s1,sp
486549ac:	6744      	move	v0,a0
486549ae:	6765      	move	v1,a1
486549b0:	c150      	sb	v0,16(s1)
486549b2:	c174      	sb	v1,20(s1)
486549b4:	a150      	lbu	v0,16(s1)
    uint16 msg;

    if (cur_charge_state == BAT_NORMAL)
486549b6:	2a0f      	bnez	v0,486549d6 <com_battery_charge_change_deal+0x2e>
486549b8:	a154      	lbu	v0,20(s1)
    {
        if (cur_bat_val <= 0)
486549ba:	2a1b      	bnez	v0,486549f2 <com_battery_charge_change_deal+0x4a>
486549bc:	b212      	lw	v0,48654a04 <com_battery_charge_change_deal+0x5c>
        {
            if ((g_app_info_state.charge_state != BAT_NORMAL)
486549be:	a24f      	lbu	v0,15(v0)
486549c0:	2a06      	bnez	v0,486549ce <com_battery_charge_change_deal+0x26>
486549c2:	b211      	lw	v0,48654a04 <com_battery_charge_change_deal+0x5c>
486549c4:	a270      	lbu	v1,16(v0)
486549c6:	a154      	lbu	v0,20(s1)
486549c8:	ea63      	sltu	v0,v1
486549ca:	6101      	btnez	486549ce <com_battery_charge_change_deal+0x26>
486549cc:	1012      	b	486549f2 <com_battery_charge_change_deal+0x4a>
486549ce:	b30f      	lw	v1,48654a08 <com_battery_charge_change_deal+0x60>
                    || (g_app_info_state.bat_value > cur_bat_val))
            {
                g_sys_counter.bat_low_cnt = 0;
486549d0:	6a00      	li	v0,0
486549d2:	cb47      	sh	v0,14(v1)
486549d4:	100e      	b	486549f2 <com_battery_charge_change_deal+0x4a>
486549d6:	a150      	lbu	v0,16(s1)

       /*          _BAT_PRINTD_INFO_INT("bat lower0:",g_sys_counter.bat_low_cnt);
                //检测到低电，广播低电消息
                msg = MSG_LOW_POWER;
                sys_mq_send(MQ_ID_SYS, &msg);
*/
            }
        }
    }
    else if (cur_charge_state == BAT_FULL)
486549d8:	7202      	cmpi	v0,2
486549da:	6758      	move	v0,t8
486549dc:	5a01      	sltiu	v0,1
486549de:	6009      	bteqz	486549f2 <com_battery_charge_change_deal+0x4a>
486549e0:	b209      	lw	v0,48654a04 <com_battery_charge_change_deal+0x5c>
    {
        if (g_app_info_state.charge_state != BAT_FULL)
486549e2:	a24f      	lbu	v0,15(v0)
486549e4:	7202      	cmpi	v0,2
486549e6:	6758      	move	v0,t8
486549e8:	5a01      	sltiu	v0,1
486549ea:	6103      	btnez	486549f2 <com_battery_charge_change_deal+0x4a>
486549ec:	b307      	lw	v1,48654a08 <com_battery_charge_change_deal+0x60>
        {
            g_sys_counter.charge_full_cnt = 0;
486549ee:	6a00      	li	v0,0
486549f0:	cb46      	sh	v0,12(v1)
486549f2:	b305      	lw	v1,48654a04 <com_battery_charge_change_deal+0x5c>
        }
    }
    else
    {
        ; //nothing for QAC
    }

    g_app_info_state.charge_state = cur_charge_state;
486549f4:	a150      	lbu	v0,16(s1)
486549f6:	c34f      	sb	v0,15(v1)
486549f8:	b303      	lw	v1,48654a04 <com_battery_charge_change_deal+0x5c>
    g_app_info_state.bat_value = cur_bat_val;
486549fa:	a154      	lbu	v0,20(s1)
486549fc:	c350      	sb	v0,16(v1)
486549fe:	65b9      	move	sp,s1
}
48654a00:	6412      	restore	16,s1
48654a02:	e8a0      	jrc	ra
48654a04:	a1b8      	lbu	a1,24(s1)
48654a06:	9fc1      	lw	a2,4(a3)
48654a08:	a180      	lbu	a0,0(s1)
48654a0a:	9fc1      	lw	a2,4(a3)

48654a0c <com_battery_charge_deal>:
48654a0c:	64d4      	save	32,ra,s1

/******************************************************************************/
/*!
 * \par  Description:
 *  处理跟电量有关功能，显显示充电标志，检测低压(<3.6V为低压)等
 * \param[in]    none
 * \param[out]   none
 * \return       none
 * \ingroup
 * \note
 *******************************************************************************/
void com_battery_charge_deal(void)
{
48654a0e:	0104      	addiu	s1,sp,16
48654a10:	4144      	addiu	v0,s1,4
    uint16 msg;
    uint8 tmp_battery_value; //当前电池电量
    battery_status_e tmp_charge_state; //当前充电状态，分无充电，正在充电，充电已满，无电池
    uint8 real_charge_value;
    int8 volume_limit;

    tmp_charge_state = key_chargeget(&real_charge_value);
48654a12:	6782      	move	a0,v0
48654a14:	6d00      	li	a1,0
48654a16:	6e00      	li	a2,0
48654a18:	6f00      	li	a3,0
48654a1a:	b243      	lw	v0,48654b24 <com_battery_charge_deal+0x118>
48654a1c:	eac0      	jalrc	v0
48654a1e:	c143      	sb	v0,3(s1)
48654a20:	a144      	lbu	v0,4(s1)
//    _BAT_PRINTD_INFO_INT("charge state:",tmp_charge_state);
//    _BAT_PRINTD_INFO_INT("charge value:",real_charge_value);
    if (real_charge_value < BATTERY_GRADE_MAX)
48654a22:	5a05      	sltiu	v0,5
48654a24:	6003      	bteqz	48654a2c <com_battery_charge_deal+0x20>
48654a26:	a144      	lbu	v0,4(s1)
    {
        tmp_battery_value = real_charge_value;
48654a28:	c142      	sb	v0,2(s1)
48654a2a:	1002      	b	48654a30 <com_battery_charge_deal+0x24>
48654a2c:	6a05      	li	v0,5
    }
    else
    {
        tmp_battery_value = BATTERY_GRADE_MAX;
48654a2e:	c142      	sb	v0,2(s1)
48654a30:	a143      	lbu	v0,3(s1)
    }

    if (tmp_charge_state == BAT_CHECKING)
48654a32:	7204      	cmpi	v0,4
48654a34:	6758      	move	v0,t8
48654a36:	5a01      	sltiu	v0,1
48654a38:	6004      	bteqz	48654a42 <com_battery_charge_deal+0x36>
48654a3a:	6a00      	li	v0,0
//    if ((tmp_charge_state == BAT_CHECKING) || (tmp_charge_state == BAT_NO_EXIST))
    {
        tmp_charge_state = BAT_NORMAL;
48654a3c:	c143      	sb	v0,3(s1)
48654a3e:	6a05      	li	v0,5
        tmp_battery_value = BATTERY_GRADE_MAX;
48654a40:	c142      	sb	v0,2(s1)
48654a42:	b23a      	lw	v0,48654b28 <com_battery_charge_deal+0x11c>
    }

    //需要过滤电池供电时电池电量不稳定的情况，只允许电池电量往下跌，不允许往上涨
    if ((g_app_info_state.charge_state == BAT_NORMAL) && (tmp_charge_state == BAT_NORMAL) && (tmp_battery_value
48654a44:	a24f      	lbu	v0,15(v0)
48654a46:	2a0a      	bnez	v0,48654a5c <com_battery_charge_deal+0x50>
48654a48:	a143      	lbu	v0,3(s1)
48654a4a:	2a08      	bnez	v0,48654a5c <com_battery_charge_deal+0x50>
48654a4c:	b237      	lw	v0,48654b28 <com_battery_charge_deal+0x11c>
48654a4e:	a270      	lbu	v1,16(v0)
48654a50:	a142      	lbu	v0,2(s1)
48654a52:	eb43      	sltu	v1,v0
48654a54:	6003      	bteqz	48654a5c <com_battery_charge_deal+0x50>
48654a56:	b235      	lw	v0,48654b28 <com_battery_charge_deal+0x11c>
            > g_app_info_state.bat_value))
    {
        tmp_battery_value = g_app_info_state.bat_value;
48654a58:	a250      	lbu	v0,16(v0)
48654a5a:	c142      	sb	v0,2(s1)
48654a5c:	b233      	lw	v0,48654b28 <com_battery_charge_deal+0x11c>

    }

    if ((g_app_info_state.charge_state != tmp_charge_state) || (g_app_info_state.bat_value != tmp_battery_value))
48654a5e:	a26f      	lbu	v1,15(v0)
48654a60:	a143      	lbu	v0,3(s1)
48654a62:	ea6e      	xor	v0,v1
48654a64:	5a01      	sltiu	v0,1
48654a66:	6007      	bteqz	48654a76 <com_battery_charge_deal+0x6a>
48654a68:	b230      	lw	v0,48654b28 <com_battery_charge_deal+0x11c>
48654a6a:	a270      	lbu	v1,16(v0)
48654a6c:	a142      	lbu	v0,2(s1)
48654a6e:	ea6e      	xor	v0,v1
48654a70:	5a01      	sltiu	v0,1
48654a72:	6001      	bteqz	48654a76 <com_battery_charge_deal+0x6a>
48654a74:	1008      	b	48654a86 <com_battery_charge_deal+0x7a>
48654a76:	a143      	lbu	v0,3(s1)
    {
        com_battery_charge_change_deal(tmp_charge_state, tmp_battery_value);
48654a78:	a162      	lbu	v1,2(s1)
48654a7a:	6782      	move	a0,v0
48654a7c:	67a3      	move	a1,v1
48654a7e:	1b30 526a 	jal	486549a8 <com_battery_charge_change_deal>
48654a82:	6500      	nop
48654a84:	104b      	b	48654b1c <com_battery_charge_deal+0x110>
        return;
48654a86:	b229      	lw	v0,48654b28 <com_battery_charge_deal+0x11c>
    }

    if ((g_app_info_state.charge_state == BAT_NORMAL) && (g_app_info_state.bat_value == 0))
48654a88:	a24f      	lbu	v0,15(v0)
48654a8a:	2a18      	bnez	v0,48654abc <com_battery_charge_deal+0xb0>
48654a8c:	b227      	lw	v0,48654b28 <com_battery_charge_deal+0x11c>
48654a8e:	a250      	lbu	v0,16(v0)
48654a90:	2a15      	bnez	v0,48654abc <com_battery_charge_deal+0xb0>
48654a92:	b327      	lw	v1,48654b2c <com_battery_charge_deal+0x120>
    {
        g_sys_counter.bat_low_cnt++;
48654a94:	b226      	lw	v0,48654b2c <com_battery_charge_deal+0x120>
48654a96:	aa47      	lhu	v0,14(v0)
48654a98:	4241      	addiu	v0,v0,1
48654a9a:	cb47      	sh	v0,14(v1)
48654a9c:	b224      	lw	v0,48654b2c <com_battery_charge_deal+0x120>
        if (g_sys_counter.bat_low_cnt >= 120)
48654a9e:	aa47      	lhu	v0,14(v0)
48654aa0:	5a78      	sltiu	v0,120
48654aa2:	613c      	btnez	48654b1c <com_battery_charge_deal+0x110>
48654aa4:	b322      	lw	v1,48654b2c <com_battery_charge_deal+0x120>
        {
            g_sys_counter.bat_low_cnt = 0;
48654aa6:	6a00      	li	v0,0
48654aa8:	cb47      	sh	v0,14(v1)
48654aaa:	6a82      	li	v0,130

    //        _BAT_PRINTD_INFO_INT("bat lower1:",g_app_info_state.bat_value );
            //检测到低电，广播低电消息
            msg = MSG_LOW_POWER;
48654aac:	c940      	sh	v0,0(s1)
48654aae:	6c05      	li	a0,5
            sys_mq_send(MQ_ID_SYS, &msg);
48654ab0:	67b1      	move	a1,s1
48654ab2:	6e00      	li	a2,0
48654ab4:	6f18      	li	a3,24
48654ab6:	b21f      	lw	v0,48654b30 <com_battery_charge_deal+0x124>
48654ab8:	eac0      	jalrc	v0
48654aba:	1030      	b	48654b1c <com_battery_charge_deal+0x110>
48654abc:	b21b      	lw	v0,48654b28 <com_battery_charge_deal+0x11c>
        }
    }
    else if (g_app_info_state.charge_state == BAT_FULL)
48654abe:	a24f      	lbu	v0,15(v0)
48654ac0:	7202      	cmpi	v0,2
48654ac2:	6758      	move	v0,t8
48654ac4:	5a01      	sltiu	v0,1
48654ac6:	6027      	bteqz	48654b16 <com_battery_charge_deal+0x10a>
48654ac8:	b319      	lw	v1,48654b2c <com_battery_charge_deal+0x120>
    {
        g_sys_counter.charge_full_cnt++;
48654aca:	b219      	lw	v0,48654b2c <com_battery_charge_deal+0x120>
48654acc:	aa46      	lhu	v0,12(v0)
48654ace:	4241      	addiu	v0,v0,1
48654ad0:	cb46      	sh	v0,12(v1)
48654ad2:	b217      	lw	v0,48654b2c <com_battery_charge_deal+0x120>
        if (g_sys_counter.charge_full_cnt == 8)//充满约4秒，检测电压是否满
48654ad4:	aa46      	lhu	v0,12(v0)
48654ad6:	7208      	cmpi	v0,8
48654ad8:	6758      	move	v0,t8
48654ada:	5a01      	sltiu	v0,1
48654adc:	600c      	bteqz	48654af6 <com_battery_charge_deal+0xea>
48654ade:	a144      	lbu	v0,4(s1)
        {
            if (real_charge_value < (BATTERY_GRADE_MAX ))
48654ae0:	5a05      	sltiu	v0,5
48654ae2:	6009      	bteqz	48654af6 <com_battery_charge_deal+0xea>
48654ae4:	b212      	lw	v0,48654b2c <com_battery_charge_deal+0x120>
            {
                g_sys_counter.charge_full_cnt = 0;
48654ae6:	6b00      	li	v1,0
48654ae8:	ca66      	sh	v1,12(v0)
48654aea:	6c00      	li	a0,0
                key_chargeset(0, 0, 0);//打开充电，用上一次参数
48654aec:	6d00      	li	a1,0
48654aee:	6e00      	li	a2,0
48654af0:	6f01      	li	a3,1
48654af2:	b20d      	lw	v0,48654b24 <com_battery_charge_deal+0x118>
48654af4:	eac0      	jalrc	v0
48654af6:	b20e      	lw	v0,48654b2c <com_battery_charge_deal+0x120>
            }
        }
        if (g_sys_counter.charge_full_cnt >= 120)
48654af8:	aa46      	lhu	v0,12(v0)
48654afa:	5a78      	sltiu	v0,120
48654afc:	610f      	btnez	48654b1c <com_battery_charge_deal+0x110>
48654afe:	b30c      	lw	v1,48654b2c <com_battery_charge_deal+0x120>
        {
            g_sys_counter.charge_full_cnt = 0;
48654b00:	6a00      	li	v0,0
48654b02:	cb46      	sh	v0,12(v1)
48654b04:	6af2      	li	v0,242

            //充电已满
            msg = MSG_FULL_CHARGE;
48654b06:	c940      	sh	v0,0(s1)
48654b08:	6c05      	li	a0,5
            sys_mq_send(MQ_ID_SYS, &msg);
48654b0a:	67b1      	move	a1,s1
48654b0c:	6e00      	li	a2,0
48654b0e:	6f18      	li	a3,24
48654b10:	b208      	lw	v0,48654b30 <com_battery_charge_deal+0x124>
48654b12:	eac0      	jalrc	v0
48654b14:	1003      	b	48654b1c <com_battery_charge_deal+0x110>
48654b16:	b306      	lw	v1,48654b2c <com_battery_charge_deal+0x120>
        }
    }
    else
    {
        g_sys_counter.bat_low_cnt= 0;
48654b18:	6a00      	li	v0,0
48654b1a:	cb47      	sh	v0,14(v1)
48654b1c:	65b9      	move	sp,s1
        ; //nothing for QAC
    }
}
48654b1e:	6452      	restore	16,ra,s1
48654b20:	e8a0      	jrc	ra
48654b22:	0000      	addiu	s0,sp,0
48654b24:	640d      	restore	104
48654b26:	bfc1      	lwu	a2,4(a3)
48654b28:	a1b8      	lbu	a1,24(s1)
48654b2a:	9fc1      	lw	a2,4(a3)
48654b2c:	a180      	lbu	a0,0(s1)
48654b2e:	9fc1      	lw	a2,4(a3)
48654b30:	6401      	restore	8
48654b32:	bfc1      	lwu	a2,4(a3)
	...
Disassembly of section BANK_UI_1_26:

48694600 <gui_set_headbar_mode>:
48694600:	64d3      	save	24,ra,s1
 * \note
 * \li  一般情况下，应用只需在初始化时中调用该接口设置模式。
 *******************************************************************************/
void gui_set_headbar_mode(headbar_mode_e mode, headbar_icon_e icon_id)
{
48694602:	0104      	addiu	s1,sp,16
48694604:	6744      	move	v0,a0
48694606:	6765      	move	v1,a1
48694608:	c148      	sb	v0,8(s1)
4869460a:	c16c      	sb	v1,12(s1)
4869460c:	b31b      	lw	v1,48694678 <gui_set_headbar_mode+0x78>
    this_headbar_mode = mode;
4869460e:	a148      	lbu	v0,8(s1)
48694610:	c340      	sb	v0,0(v1)
48694612:	b31b      	lw	v1,4869467c <gui_set_headbar_mode+0x7c>
    this_headbar_icon_id = icon_id;
48694614:	a14c      	lbu	v0,12(s1)
48694616:	c340      	sb	v0,0(v1)
48694618:	a148      	lbu	v0,8(s1)

    switch (mode)
4869461a:	7201      	cmpi	v0,1
4869461c:	6758      	move	v0,t8
4869461e:	5a01      	sltiu	v0,1
48694620:	6101      	btnez	48694624 <gui_set_headbar_mode+0x24>
48694622:	1021      	b	48694666 <gui_set_headbar_mode+0x66>
48694624:	b317      	lw	v1,48694680 <gui_set_headbar_mode+0x80>
    {
        /* 
           默认模式，显示应用图标和电池图标
           CARDBASE不支持把插卡,故不显示card图标
        */
        case HEADBAR_MODE_NORMAL:
        this_headbar_style.icon_sty = HEADBAR_ICON; //2015-11-03
48694626:	f002 6a00 	li	v0,4096
4869462a:	cb41      	sh	v0,2(v1)
4869462c:	b315      	lw	v1,48694680 <gui_set_headbar_mode+0x80>
        //this_headbar_style.icon_sty = V_U16_INVALID;
        this_headbar_style.battery_sty = HEADBAR_BATTERY;
4869462e:	f002 6a01 	li	v0,4097
48694632:	cb43      	sh	v0,6(v1)
48694634:	b313      	lw	v1,48694680 <gui_set_headbar_mode+0x80>
        this_headbar_style.bg_sty = V_U16_INVALID;
48694636:	6a01      	li	v0,1
48694638:	ea4b      	neg	v0
4869463a:	cb40      	sh	v0,0(v1)
4869463c:	b311      	lw	v1,48694680 <gui_set_headbar_mode+0x80>
        this_headbar_style.time_sty = V_U16_INVALID;
4869463e:	6a01      	li	v0,1
48694640:	ea4b      	neg	v0
48694642:	cb42      	sh	v0,4(v1)
48694644:	b30f      	lw	v1,48694680 <gui_set_headbar_mode+0x80>
        this_headbar_style.cable_sty = V_U16_INVALID;
48694646:	6a01      	li	v0,1
48694648:	ea4b      	neg	v0
4869464a:	cb44      	sh	v0,8(v1)
4869464c:	b30d      	lw	v1,48694680 <gui_set_headbar_mode+0x80>
        this_headbar_style.card_sty = V_U16_INVALID;//HEADBAR_CARD;
4869464e:	6a01      	li	v0,1
48694650:	ea4b      	neg	v0
48694652:	cb45      	sh	v0,10(v1)
48694654:	b30c      	lw	v1,48694684 <gui_set_headbar_mode+0x84>

        g_headbar_update = HEADBAR_UPDATE_INIT;
48694656:	6a00      	li	v0,0
48694658:	c340      	sb	v0,0(v1)
4869465a:	b20c      	lw	v0,48694688 <gui_set_headbar_mode+0x88>
        restart_app_timer(sys_status_timer_id);
4869465c:	8240      	lb	v0,0(v0)
4869465e:	6782      	move	a0,v0
48694660:	b20b      	lw	v0,4869468c <gui_set_headbar_mode+0x8c>
48694662:	eac0      	jalrc	v0
48694664:	1005      	b	48694670 <gui_set_headbar_mode+0x70>
        break;
48694666:	b209      	lw	v0,48694688 <gui_set_headbar_mode+0x88>

        default:
        stop_app_timer(sys_status_timer_id);
48694668:	8240      	lb	v0,0(v0)
4869466a:	6782      	move	a0,v0
4869466c:	b209      	lw	v0,48694690 <gui_set_headbar_mode+0x90>
4869466e:	eac0      	jalrc	v0
48694670:	65b9      	move	sp,s1
        break;
    }
}
48694672:	6451      	restore	8,ra,s1
48694674:	e8a0      	jrc	ra
48694676:	0000      	addiu	s0,sp,0
48694678:	557d      	slti	a1,125
4869467a:	9fc1      	lw	a2,4(a3)
4869467c:	557c      	slti	a1,124
4869467e:	9fc1      	lw	a2,4(a3)
48694680:	5570      	slti	a1,112
48694682:	9fc1      	lw	a2,4(a3)
48694684:	556c      	slti	a1,108
48694686:	9fc1      	lw	a2,4(a3)
48694688:	541d      	slti	a0,29
4869468a:	9fc1      	lw	a2,4(a3)
4869468c:	46f5      	daddiu	a3,a2,5
4869468e:	4845      	addiu	s0,69
48694690:	46c5      	addiu	a2,a2,5
48694692:	4845      	addiu	s0,69

48694694 <gui_get_headbar_mode>:
48694694:	6491      	save	8,s1

/******************************************************************************/
/*!
 * \par  Description:
 *    获取状态栏模式等。
 * \param[in]    none
 * \param[out]   mode 返回状态栏模式，见 headbar_mode_e  枚举类型定义
 * \param[out]   icon_id 返回应用图标ID，参考 headbar_icon_e 枚举类型定义
 * \return       none
 * \ingroup      controls
 * \note
 *******************************************************************************/
void gui_get_headbar_mode(headbar_mode_e *mode, headbar_icon_e *icon_id)
{
48694696:	673d      	move	s1,sp
48694698:	d982      	sw	a0,8(s1)
4869469a:	d9a3      	sw	a1,12(s1)
4869469c:	9962      	lw	v1,8(s1)
    *mode = this_headbar_mode;
4869469e:	b206      	lw	v0,486946b4 <gui_get_headbar_mode+0x20>
486946a0:	a240      	lbu	v0,0(v0)
486946a2:	c340      	sb	v0,0(v1)
486946a4:	9963      	lw	v1,12(s1)
    *icon_id = this_headbar_icon_id;
486946a6:	b205      	lw	v0,486946b8 <gui_get_headbar_mode+0x24>
486946a8:	a240      	lbu	v0,0(v0)
486946aa:	c340      	sb	v0,0(v1)
486946ac:	65b9      	move	sp,s1
}
486946ae:	6411      	restore	8,s1
486946b0:	e8a0      	jrc	ra
486946b2:	0000      	addiu	s0,sp,0
486946b4:	557d      	slti	a1,125
486946b6:	9fc1      	lw	a2,4(a3)
486946b8:	557c      	slti	a1,124
486946ba:	9fc1      	lw	a2,4(a3)

486946bc <gui_headbar>:
486946bc:	64fb      	save	88,ra,s0-s1

/******************************************************************************/
/*!
 * \par  Description:
 *    状态栏更新绘制执行接口。
 * \param[in]    update 状态栏更新模式，见 headbar_update_e 定义
 * \param[out]   none
 * \return       app_result_e
 * \retval           RESULT_NULL 没任何意义
 * \ingroup      controls
 * \note
 * \li  该接口由 common 模块自动调用，用户无须干预。
 * \li  如果用户自己需要控制什么时候用什么方式刷新，也可以自己主动调用。
 *******************************************************************************/
app_result_e gui_headbar(headbar_update_e update)
{
486946be:	0104      	addiu	s1,sp,16
486946c0:	6744      	move	v0,a0
486946c2:	f040 c148 	sb	v0,72(s1)
486946c6:	b2bb      	lw	v0,486949b0 <.LBE2+0xca>
    picbox_private_t headbar_pic;
    style_infor_t style_infor;

    //临时变量
    time_t temp_sys_time;
    uint8 temp_cable_state;
    uint8 temp_card_state;
    uint8 temp_icon_id;
    uint8 real_battery_value;
    if (this_headbar_style.bg_sty != V_U16_INVALID)
486946c8:	aa60      	lhu	v1,0(v0)
486946ca:	f7ff 6a1f 	li	v0,65535
486946ce:	ea6e      	xor	v0,v1
486946d0:	5a01      	sltiu	v0,1
486946d2:	6117      	btnez	48694702 <gui_headbar+0x46>
486946d4:	f040 a148 	lbu	v0,72(s1)
    {
        if ((update == HEADBAR_UPDATE_INIT) || (update == HEADBAR_UPDATE_ALL))
486946d8:	2207      	beqz	v0,486946e8 <gui_headbar+0x2c>
486946da:	f040 a148 	lbu	v0,72(s1)
486946de:	7201      	cmpi	v0,1
486946e0:	6758      	move	v0,t8
486946e2:	5a01      	sltiu	v0,1
486946e4:	6101      	btnez	486946e8 <gui_headbar+0x2c>
486946e6:	100d      	b	48694702 <gui_headbar+0x46>
486946e8:	b2b2      	lw	v0,486949b0 <.LBE2+0xca>
        {
            //刷新背景图片
            style_infor.style_id = this_headbar_style.bg_sty;
486946ea:	aa40      	lhu	v0,0(v0)
486946ec:	c944      	sh	v0,8(s1)
486946ee:	6a01      	li	v0,1
            style_infor.type = UI_COM;
486946f0:	c14a      	sb	v0,10(s1)
486946f2:	4147      	addiu	v0,s1,7
            ui_show_picbox(&style_infor, NULL);
486946f4:	4241      	addiu	v0,v0,1
486946f6:	6782      	move	a0,v0
486946f8:	6d00      	li	a1,0
486946fa:	6e00      	li	a2,0
486946fc:	6f02      	li	a3,2
486946fe:	b2ae      	lw	v0,486949b4 <.LBE2+0xce>
48694700:	eac0      	jalrc	v0
48694702:	b2ac      	lw	v0,486949b0 <.LBE2+0xca>
        }
    }

    if (this_headbar_style.battery_sty != V_U16_INVALID)
48694704:	aa63      	lhu	v1,6(v0)
48694706:	f7ff 6a1f 	li	v0,65535
4869470a:	ea6e      	xor	v0,v1
4869470c:	5a01      	sltiu	v0,1
4869470e:	615b      	btnez	486947c6 <gui_headbar+0x10a>
48694710:	f040 a148 	lbu	v0,72(s1)
    {
        if (update == HEADBAR_UPDATE_INIT)
48694714:	2a16      	bnez	v0,48694742 <gui_headbar+0x86>
48694716:	b0a9      	lw	s0,486949b8 <.LBE2+0xd2>
        {
            g_app_info_state.charge_state = (uint8) (int) key_chargeget(&real_battery_value);
48694718:	4147      	addiu	v0,s1,7
4869471a:	4a14      	addiu	v0,20
4869471c:	6782      	move	a0,v0
4869471e:	6d00      	li	a1,0
48694720:	6e00      	li	a2,0
48694722:	6f00      	li	a3,0
48694724:	b2a6      	lw	v0,486949bc <.LBE2+0xd6>
48694726:	eac0      	jalrc	v0
48694728:	c04f      	sb	v0,15(s0)
4869472a:	b3a4      	lw	v1,486949b8 <.LBE2+0xd2>
            g_app_info_state.bat_value = real_battery_value;
4869472c:	a15b      	lbu	v0,27(s1)
4869472e:	c350      	sb	v0,16(v1)
48694730:	b2a2      	lw	v0,486949b8 <.LBE2+0xd2>

            if (g_app_info_state.cable_state == CABLE_STATE_CABLE_NULL)//USB电缆没有插入
48694732:	a24d      	lbu	v0,13(v0)
48694734:	2a03      	bnez	v0,4869473c <gui_headbar+0x80>
48694736:	b3a1      	lw	v1,486949b8 <.LBE2+0xd2>
            {
                g_app_info_state.charge_state = BAT_NORMAL;
48694738:	6a00      	li	v0,0
4869473a:	c34f      	sb	v0,15(v1)
4869473c:	b3a1      	lw	v1,486949c0 <.LBE2+0xda>
            }

            _HEADBAR_PRINTD_INFO_INT("bat_001",real_battery_value);
            g_battery_display = 1;
4869473e:	6a01      	li	v0,1
48694740:	c340      	sb	v0,0(v1)
48694742:	b29e      	lw	v0,486949b8 <.LBE2+0xd2>
        }

        //正在充电
        if (g_app_info_state.charge_state == BAT_CHARGING)
48694744:	a24f      	lbu	v0,15(v0)
48694746:	7201      	cmpi	v0,1
48694748:	6758      	move	v0,t8
4869474a:	5a01      	sltiu	v0,1
4869474c:	6012      	bteqz	48694772 <gui_headbar+0xb6>
4869474e:	b29d      	lw	v0,486949c0 <.LBE2+0xda>
        {
            if (g_battery_display > BATTERY_GRADE_MAX)
48694750:	a240      	lbu	v0,0(v0)
48694752:	5a06      	sltiu	v0,6
48694754:	6103      	btnez	4869475c <gui_headbar+0xa0>
48694756:	b39b      	lw	v1,486949c0 <.LBE2+0xda>
            {
                g_battery_display = 1;
48694758:	6a01      	li	v0,1
4869475a:	c340      	sb	v0,0(v1)
4869475c:	b299      	lw	v0,486949c0 <.LBE2+0xda>
            }_HEADBAR_PRINTD_INFO_INT("bat_002",g_battery_display);
            __show_battery(g_battery_display);
4869475e:	a240      	lbu	v0,0(v0)
48694760:	6782      	move	a0,v0
48694762:	1b50 5283 	jal	48694a0c <__show_battery>
48694766:	6500      	nop
48694768:	b397      	lw	v1,486949c4 <.LBE2+0xde>
            g_battery_value = -1;//等于无效值，一旦切换到电池供电，立即绘制图标
4869476a:	6a01      	li	v0,1
4869476c:	ea4b      	neg	v0
4869476e:	c340      	sb	v0,0(v1)
48694770:	102a      	b	486947c6 <gui_headbar+0x10a>
48694772:	b292      	lw	v0,486949b8 <.LBE2+0xd2>
        }
        //充电已满
        else if (g_app_info_state.charge_state == BAT_FULL)
48694774:	a24f      	lbu	v0,15(v0)
48694776:	7202      	cmpi	v0,2
48694778:	6758      	move	v0,t8
4869477a:	5a01      	sltiu	v0,1
4869477c:	6009      	bteqz	48694790 <gui_headbar+0xd4>
4869477e:	6c05      	li	a0,5
        {
            _HEADBAR_PRINTD_INFO_INT("bat_003",g_battery_display);
            __show_battery(BATTERY_GRADE_MAX);
48694780:	1b50 5283 	jal	48694a0c <__show_battery>
48694784:	6500      	nop
48694786:	b390      	lw	v1,486949c4 <.LBE2+0xde>
            g_battery_value = -1;//等于无效值，一旦切换到电池供电，立即绘制图标
48694788:	6a01      	li	v0,1
4869478a:	ea4b      	neg	v0
4869478c:	c340      	sb	v0,0(v1)
4869478e:	101b      	b	486947c6 <gui_headbar+0x10a>
48694790:	f040 a148 	lbu	v0,72(s1)
        }
        //无充电，电池供电
        else
        {
            if ((update == HEADBAR_UPDATE_INIT) || (update == HEADBAR_UPDATE_ALL) || (g_app_info_state.bat_value
48694794:	220e      	beqz	v0,486947b2 <gui_headbar+0xf6>
48694796:	f040 a148 	lbu	v0,72(s1)
4869479a:	7201      	cmpi	v0,1
4869479c:	6758      	move	v0,t8
4869479e:	5a01      	sltiu	v0,1
486947a0:	6108      	btnez	486947b2 <gui_headbar+0xf6>
486947a2:	b286      	lw	v0,486949b8 <.LBE2+0xd2>
486947a4:	b388      	lw	v1,486949c4 <.LBE2+0xde>
486947a6:	a290      	lbu	a0,16(v0)
486947a8:	a340      	lbu	v0,0(v1)
486947aa:	ea8e      	xor	v0,a0
486947ac:	5a01      	sltiu	v0,1
486947ae:	6001      	bteqz	486947b2 <gui_headbar+0xf6>
486947b0:	100a      	b	486947c6 <gui_headbar+0x10a>
486947b2:	b282      	lw	v0,486949b8 <.LBE2+0xd2>
                    != g_battery_value))
            {

                _HEADBAR_PRINTD_INFO_INT("bat_004",g_app_info_state.bat_value);
                __show_battery(g_app_info_state.bat_value);
486947b4:	a250      	lbu	v0,16(v0)
486947b6:	6782      	move	a0,v0
486947b8:	1b50 5283 	jal	48694a0c <__show_battery>
486947bc:	6500      	nop
486947be:	b382      	lw	v1,486949c4 <.LBE2+0xde>
                g_battery_value = g_app_info_state.bat_value;
486947c0:	b27e      	lw	v0,486949b8 <.LBE2+0xd2>
486947c2:	a250      	lbu	v0,16(v0)
486947c4:	c340      	sb	v0,0(v1)
486947c6:	b27b      	lw	v0,486949b0 <.LBE2+0xca>
            }
        }
    }

    if (this_headbar_style.icon_sty != V_U16_INVALID)
486947c8:	aa61      	lhu	v1,2(v0)
486947ca:	f7ff 6a1f 	li	v0,65535
486947ce:	ea6e      	xor	v0,v1
486947d0:	5a01      	sltiu	v0,1
486947d2:	6136      	btnez	48694840 <gui_headbar+0x184>
486947d4:	b279      	lw	v0,486949b8 <.LBE2+0xd2>
    {
        if (g_app_info_state.keylock_state == TRUE)
486947d6:	a244      	lbu	v0,4(v0)
486947d8:	7201      	cmpi	v0,1
486947da:	6758      	move	v0,t8
486947dc:	5a01      	sltiu	v0,1
486947de:	6003      	bteqz	486947e6 <gui_headbar+0x12a>
486947e0:	6a07      	li	v0,7
        {
            temp_icon_id = HEADBAR_ICON_KEYLOCK;
486947e2:	c15a      	sb	v0,26(s1)
486947e4:	1003      	b	486947ec <gui_headbar+0x130>
486947e6:	b279      	lw	v0,486949c8 <.LBE2+0xe2>
        }
        else
        {
            temp_icon_id = this_headbar_icon_id;
486947e8:	a240      	lbu	v0,0(v0)
486947ea:	c15a      	sb	v0,26(s1)
486947ec:	f040 a148 	lbu	v0,72(s1)
        }

        if ((update == HEADBAR_UPDATE_INIT) || (update == HEADBAR_UPDATE_ALL) || ((temp_icon_id != HEADBAR_ICON_NONE)
486947f0:	2212      	beqz	v0,48694816 <gui_headbar+0x15a>
486947f2:	f040 a148 	lbu	v0,72(s1)
486947f6:	7201      	cmpi	v0,1
486947f8:	6758      	move	v0,t8
486947fa:	5a01      	sltiu	v0,1
486947fc:	610c      	btnez	48694816 <gui_headbar+0x15a>
486947fe:	a15a      	lbu	v0,26(s1)
48694800:	720b      	cmpi	v0,11
48694802:	6758      	move	v0,t8
48694804:	5a01      	sltiu	v0,1
48694806:	611c      	btnez	48694840 <gui_headbar+0x184>
48694808:	b271      	lw	v0,486949cc <.LBE2+0xe6>
4869480a:	a17a      	lbu	v1,26(s1)
4869480c:	a240      	lbu	v0,0(v0)
4869480e:	ea6e      	xor	v0,v1
48694810:	5a01      	sltiu	v0,1
48694812:	6001      	bteqz	48694816 <gui_headbar+0x15a>
48694814:	1015      	b	48694840 <gui_headbar+0x184>
48694816:	b267      	lw	v0,486949b0 <.LBE2+0xca>
                && (temp_icon_id != g_icon_id)))
        {
            //刷新图标
            style_infor.style_id = this_headbar_style.icon_sty;
48694818:	aa41      	lhu	v0,2(v0)
4869481a:	c944      	sh	v0,8(s1)
4869481c:	6a01      	li	v0,1
            style_infor.type = UI_COM;
4869481e:	c14a      	sb	v0,10(s1)
48694820:	6a01      	li	v0,1
            headbar_pic.pic_id = V_U16_INVALID;
48694822:	ea4b      	neg	v0
48694824:	c940      	sh	v0,0(s1)
48694826:	a15a      	lbu	v0,26(s1)
            headbar_pic.frame_id = (uint8) temp_icon_id;
48694828:	c142      	sb	v0,2(s1)
4869482a:	4147      	addiu	v0,s1,7
            ui_show_picbox(&style_infor, &headbar_pic);
4869482c:	4241      	addiu	v0,v0,1
4869482e:	6782      	move	a0,v0
48694830:	67b1      	move	a1,s1
48694832:	6e00      	li	a2,0
48694834:	6f02      	li	a3,2
48694836:	b260      	lw	v0,486949b4 <.LBE2+0xce>
48694838:	eac0      	jalrc	v0
4869483a:	b365      	lw	v1,486949cc <.LBE2+0xe6>

            g_icon_id = temp_icon_id;
4869483c:	a15a      	lbu	v0,26(s1)
4869483e:	c340      	sb	v0,0(v1)
48694840:	b25c      	lw	v0,486949b0 <.LBE2+0xca>
        }
    }

    if (this_headbar_style.time_sty != V_U16_INVALID)
48694842:	aa62      	lhu	v1,4(v0)
48694844:	f7ff 6a1f 	li	v0,65535
48694848:	ea6e      	xor	v0,v1
4869484a:	5a01      	sltiu	v0,1
4869484c:	614c      	btnez	486948e6 <.LBE2>

4869484e <.LBB2>:
4869484e:	6a00      	li	v0,0
    {
        timebox_draw_mode_e draw_mode;
        bool need_draw = FALSE;
48694850:	c15d      	sb	v0,29(s1)
48694852:	4147      	addiu	v0,s1,7

        //获取当前时间
        sys_get_time(&temp_sys_time);
48694854:	4a09      	addiu	v0,9
48694856:	6782      	move	a0,v0
48694858:	6d00      	li	a1,0
4869485a:	6e00      	li	a2,0
4869485c:	6f24      	li	a3,36
4869485e:	b25d      	lw	v0,486949d0 <.LBE2+0xea>
48694860:	eac0      	jalrc	v0
48694862:	f040 a148 	lbu	v0,72(s1)

        if ((update == HEADBAR_UPDATE_INIT) || (update == HEADBAR_UPDATE_ALL))
48694866:	2207      	beqz	v0,48694876 <.LBB2+0x28>
48694868:	f040 a148 	lbu	v0,72(s1)
4869486c:	7201      	cmpi	v0,1
4869486e:	6758      	move	v0,t8
48694870:	5a01      	sltiu	v0,1
48694872:	6101      	btnez	48694876 <.LBB2+0x28>
48694874:	1005      	b	48694880 <.LBB2+0x32>
48694876:	6a02      	li	v0,2
        {
            draw_mode = TIMEBOX_DRAW_ALL;//时间初始化
48694878:	c15c      	sb	v0,28(s1)
4869487a:	6a01      	li	v0,1
            need_draw = TRUE;
4869487c:	c15d      	sb	v0,29(s1)
4869487e:	100a      	b	48694894 <.LBB2+0x46>
48694880:	b255      	lw	v0,486949d4 <.LBE2+0xee>
        }
        else if (temp_sys_time.minute != g_sys_minute)
48694882:	a171      	lbu	v1,17(s1)
48694884:	a240      	lbu	v0,0(v0)
48694886:	ea6e      	xor	v0,v1
48694888:	5a01      	sltiu	v0,1
4869488a:	6104      	btnez	48694894 <.LBB2+0x46>
4869488c:	6a01      	li	v0,1
        {
            draw_mode = TIMEBOX_DRAW_TIME;//更新时间
4869488e:	c15c      	sb	v0,28(s1)
48694890:	6a01      	li	v0,1
            need_draw = TRUE;
48694892:	c15d      	sb	v0,29(s1)
48694894:	a15d      	lbu	v0,29(s1)
        }
        else
        {
            //do nothing for QAC
        }

        //显示系统时间
        if (need_draw == TRUE)
48694896:	7201      	cmpi	v0,1
48694898:	6758      	move	v0,t8
4869489a:	5a01      	sltiu	v0,1
4869489c:	6024      	bteqz	486948e6 <.LBE2>

4869489e <.LBB3>:
4869489e:	4147      	addiu	v0,s1,7
        {
            timebox_private_t headbar_time;
            time_timebox_t *tmp_time;

            tmp_time = &(headbar_time.times[0].union_time.time);
486948a0:	4a19      	addiu	v0,25
486948a2:	d94c      	sw	v0,48(s1)
486948a4:	996c      	lw	v1,48(s1)
            tmp_time->hour = temp_sys_time.hour;
486948a6:	a150      	lbu	v0,16(s1)
486948a8:	cb40      	sh	v0,0(v1)
486948aa:	996c      	lw	v1,48(s1)
            tmp_time->minute = temp_sys_time.minute;
486948ac:	a151      	lbu	v0,17(s1)
486948ae:	c342      	sb	v0,2(v1)
486948b0:	996c      	lw	v1,48(s1)
            tmp_time->second = temp_sys_time.second;
486948b2:	a152      	lbu	v0,18(s1)
486948b4:	c343      	sb	v0,3(v1)
486948b6:	6a54      	li	v0,84
            headbar_time.times[0].time_type = 'T';
486948b8:	f020 c144 	sb	v0,36(s1)
486948bc:	6a05      	li	v0,5
            headbar_time.times[0].mode = TIME_DISP_HHMM;
486948be:	f020 c145 	sb	v0,37(s1)
486948c2:	b23c      	lw	v0,486949b0 <.LBE2+0xca>

            style_infor.style_id = this_headbar_style.time_sty;
486948c4:	aa42      	lhu	v0,4(v0)
486948c6:	c944      	sh	v0,8(s1)
486948c8:	6a01      	li	v0,1
            style_infor.type = UI_COM;
486948ca:	c14a      	sb	v0,10(s1)
486948cc:	4147      	addiu	v0,s1,7
            ui_show_timebox(&style_infor, &headbar_time, (uint32) draw_mode);
486948ce:	4241      	addiu	v0,v0,1
486948d0:	4167      	addiu	v1,s1,7
486948d2:	4b19      	addiu	v1,25
486948d4:	a1dc      	lbu	a2,28(s1)
486948d6:	6782      	move	a0,v0
486948d8:	67a3      	move	a1,v1
486948da:	6f04      	li	a3,4
486948dc:	b236      	lw	v0,486949b4 <.LBE2+0xce>
486948de:	eac0      	jalrc	v0
486948e0:	b33d      	lw	v1,486949d0 <.LBE2+0xea>
            g_sys_minute = temp_sys_time.minute;
486948e2:	a151      	lbu	v0,17(s1)
486948e4:	c340      	sb	v0,0(v1)

486948e6 <.LBE2>:
486948e6:	b233      	lw	v0,486949b0 <.LBE2+0xca>
        }
    }

    if (this_headbar_style.cable_sty != V_U16_INVALID)
486948e8:	aa64      	lhu	v1,8(v0)
486948ea:	f7ff 6a1f 	li	v0,65535
486948ee:	ea6e      	xor	v0,v1
486948f0:	5a01      	sltiu	v0,1
486948f2:	6129      	btnez	48694946 <.LBE2+0x60>
486948f4:	1b50 527d 	jal	486949f4 <get_cable_state>
    {
        temp_cable_state = get_cable_state();
486948f8:	6500      	nop
486948fa:	c158      	sb	v0,24(s1)
486948fc:	f040 a148 	lbu	v0,72(s1)

        if ((update == HEADBAR_UPDATE_INIT) || (update == HEADBAR_UPDATE_ALL) || (temp_cable_state
48694900:	220d      	beqz	v0,4869491c <.LBE2+0x36>
48694902:	f040 a148 	lbu	v0,72(s1)
48694906:	7201      	cmpi	v0,1
48694908:	6758      	move	v0,t8
4869490a:	5a01      	sltiu	v0,1
4869490c:	6107      	btnez	4869491c <.LBE2+0x36>
4869490e:	b233      	lw	v0,486949d8 <.LBE2+0xf2>
48694910:	a265      	lbu	v1,5(v0)
48694912:	a158      	lbu	v0,24(s1)
48694914:	ea6e      	xor	v0,v1
48694916:	5a01      	sltiu	v0,1
48694918:	6001      	bteqz	4869491c <.LBE2+0x36>
4869491a:	1015      	b	48694946 <.LBE2+0x60>
4869491c:	b225      	lw	v0,486949b0 <.LBE2+0xca>
                != g_app_last_state.last_cable_state))
        {
            //刷新电缆状态图标
            style_infor.style_id = this_headbar_style.cable_sty;
4869491e:	aa44      	lhu	v0,8(v0)
48694920:	c944      	sh	v0,8(s1)
48694922:	6a01      	li	v0,1
            style_infor.type = UI_COM;
48694924:	c14a      	sb	v0,10(s1)
48694926:	6a01      	li	v0,1
            headbar_pic.pic_id = V_U16_INVALID;
48694928:	ea4b      	neg	v0
4869492a:	c940      	sh	v0,0(s1)
4869492c:	a158      	lbu	v0,24(s1)
            headbar_pic.frame_id = temp_cable_state;
4869492e:	c142      	sb	v0,2(s1)
48694930:	4147      	addiu	v0,s1,7
            ui_show_picbox(&style_infor, &headbar_pic);
48694932:	4241      	addiu	v0,v0,1
48694934:	6782      	move	a0,v0
48694936:	67b1      	move	a1,s1
48694938:	6e00      	li	a2,0
4869493a:	6f02      	li	a3,2
4869493c:	b21e      	lw	v0,486949b4 <.LBE2+0xce>
4869493e:	eac0      	jalrc	v0
48694940:	b326      	lw	v1,486949d4 <.LBE2+0xee>

            g_app_last_state.last_cable_state = temp_cable_state;
48694942:	a158      	lbu	v0,24(s1)
48694944:	c345      	sb	v0,5(v1)
48694946:	b21b      	lw	v0,486949b0 <.LBE2+0xca>
        }
    }

    if (this_headbar_style.card_sty != V_U16_INVALID)
48694948:	aa65      	lhu	v1,10(v0)
4869494a:	f7ff 6a1f 	li	v0,65535
4869494e:	ea6e      	xor	v0,v1
48694950:	5a01      	sltiu	v0,1
48694952:	6129      	btnez	486949a6 <.LBE2+0xc0>
48694954:	1b50 5277 	jal	486949dc <get_card_state>
    {
        temp_card_state = get_card_state();
48694958:	6500      	nop
4869495a:	c159      	sb	v0,25(s1)
4869495c:	f040 a148 	lbu	v0,72(s1)

        if ((update == HEADBAR_UPDATE_INIT) || (update == HEADBAR_UPDATE_ALL) || (temp_card_state
48694960:	220d      	beqz	v0,4869497c <.LBE2+0x96>
48694962:	f040 a148 	lbu	v0,72(s1)
48694966:	7201      	cmpi	v0,1
48694968:	6758      	move	v0,t8
4869496a:	5a01      	sltiu	v0,1
4869496c:	6107      	btnez	4869497c <.LBE2+0x96>
4869496e:	b21b      	lw	v0,486949d8 <.LBE2+0xf2>
48694970:	a264      	lbu	v1,4(v0)
48694972:	a159      	lbu	v0,25(s1)
48694974:	ea6e      	xor	v0,v1
48694976:	5a01      	sltiu	v0,1
48694978:	6001      	bteqz	4869497c <.LBE2+0x96>
4869497a:	1015      	b	486949a6 <.LBE2+0xc0>
4869497c:	b20d      	lw	v0,486949b0 <.LBE2+0xca>
                != g_app_last_state.last_card_state))
        {
            //刷新卡状态图标
            style_infor.style_id = this_headbar_style.card_sty;
4869497e:	aa45      	lhu	v0,10(v0)
48694980:	c944      	sh	v0,8(s1)
48694982:	6a01      	li	v0,1
            style_infor.type = UI_COM;
48694984:	c14a      	sb	v0,10(s1)
48694986:	6a01      	li	v0,1
            headbar_pic.pic_id = V_U16_INVALID;
48694988:	ea4b      	neg	v0
4869498a:	c940      	sh	v0,0(s1)
4869498c:	a159      	lbu	v0,25(s1)
            headbar_pic.frame_id = temp_card_state;
4869498e:	c142      	sb	v0,2(s1)
48694990:	4147      	addiu	v0,s1,7
            ui_show_picbox(&style_infor, &headbar_pic);
48694992:	4241      	addiu	v0,v0,1
48694994:	6782      	move	a0,v0
48694996:	67b1      	move	a1,s1
48694998:	6e00      	li	a2,0
4869499a:	6f02      	li	a3,2
4869499c:	b206      	lw	v0,486949b4 <.LBE2+0xce>
4869499e:	eac0      	jalrc	v0
486949a0:	b30e      	lw	v1,486949d4 <.LBE2+0xee>

            g_app_last_state.last_card_state = temp_card_state;
486949a2:	a159      	lbu	v0,25(s1)
486949a4:	c344      	sb	v0,4(v1)
486949a6:	6a00      	li	v0,0
        }
    }

    return RESULT_NULL;
486949a8:	65b9      	move	sp,s1
}
486949aa:	6479      	restore	72,ra,s0-s1
486949ac:	e8a0      	jrc	ra
486949ae:	0000      	addiu	s0,sp,0
486949b0:	5570      	slti	a1,112
486949b2:	9fc1      	lw	a2,4(a3)
486949b4:	6bdd      	li	v1,221
486949b6:	bfc1      	lwu	a2,4(a3)
486949b8:	a1b8      	lbu	a1,24(s1)
486949ba:	9fc1      	lw	a2,4(a3)
486949bc:	640d      	restore	104
486949be:	bfc1      	lwu	a2,4(a3)
486949c0:	5568      	slti	a1,104
486949c2:	9fc1      	lw	a2,4(a3)
486949c4:	556b      	slti	a1,107
486949c6:	9fc1      	lw	a2,4(a3)
486949c8:	557c      	slti	a1,124
486949ca:	9fc1      	lw	a2,4(a3)
486949cc:	5569      	slti	a1,105
486949ce:	9fc1      	lw	a2,4(a3)
486949d0:	6401      	restore	8
486949d2:	bfc1      	lwu	a2,4(a3)
486949d4:	556a      	slti	a1,106
486949d6:	9fc1      	lw	a2,4(a3)
486949d8:	a1d0      	lbu	a2,16(s1)
486949da:	9fc1      	lw	a2,4(a3)

486949dc <get_card_state>:
486949dc:	6491      	save	8,s1
486949de:	673d      	move	s1,sp
486949e0:	b204      	lw	v0,486949f0 <get_card_state+0x14>
486949e2:	a24b      	lbu	v0,11(v0)
486949e4:	651a      	move	t8,v0
486949e6:	6758      	move	v0,t8
486949e8:	65b9      	move	sp,s1
486949ea:	6411      	restore	8,s1
486949ec:	e8a0      	jrc	ra
486949ee:	0000      	addiu	s0,sp,0
486949f0:	a1b8      	lbu	a1,24(s1)
486949f2:	9fc1      	lw	a2,4(a3)

486949f4 <get_cable_state>:
486949f4:	6491      	save	8,s1
486949f6:	673d      	move	s1,sp
486949f8:	b204      	lw	v0,48694a08 <get_cable_state+0x14>
486949fa:	a24d      	lbu	v0,13(v0)
486949fc:	651a      	move	t8,v0
486949fe:	6758      	move	v0,t8
48694a00:	65b9      	move	sp,s1
48694a02:	6411      	restore	8,s1
48694a04:	e8a0      	jrc	ra
48694a06:	0000      	addiu	s0,sp,0
48694a08:	a1b8      	lbu	a1,24(s1)
48694a0a:	9fc1      	lw	a2,4(a3)

48694a0c <__show_battery>:
48694a0c:	64d5      	save	40,ra,s1

/*! \endcond */

/*! \cond */

//更新电池图标
static void __show_battery(uint8 display)
{
48694a0e:	0104      	addiu	s1,sp,16
48694a10:	6744      	move	v0,a0
48694a12:	c158      	sb	v0,24(s1)
48694a14:	b20b      	lw	v0,48694a40 <__show_battery+0x34>
    picbox_private_t headbar_pic;
    style_infor_t style_infor;

    style_infor.style_id = this_headbar_style.battery_sty;
48694a16:	aa43      	lhu	v0,6(v0)
48694a18:	c944      	sh	v0,8(s1)
48694a1a:	6a01      	li	v0,1
    style_infor.type = UI_COM;
48694a1c:	c14a      	sb	v0,10(s1)
48694a1e:	6a01      	li	v0,1
    headbar_pic.pic_id = V_U16_INVALID;
48694a20:	ea4b      	neg	v0
48694a22:	c940      	sh	v0,0(s1)
48694a24:	a158      	lbu	v0,24(s1)
    headbar_pic.frame_id = display;
48694a26:	c142      	sb	v0,2(s1)
48694a28:	4147      	addiu	v0,s1,7
    ui_show_picbox(&style_infor, &headbar_pic);
48694a2a:	4241      	addiu	v0,v0,1
48694a2c:	6782      	move	a0,v0
48694a2e:	67b1      	move	a1,s1
48694a30:	6e00      	li	a2,0
48694a32:	6f02      	li	a3,2
48694a34:	b204      	lw	v0,48694a44 <__show_battery+0x38>
48694a36:	eac0      	jalrc	v0
48694a38:	65b9      	move	sp,s1
}
48694a3a:	6453      	restore	24,ra,s1
48694a3c:	e8a0      	jrc	ra
48694a3e:	0000      	addiu	s0,sp,0
48694a40:	5570      	slti	a1,112
48694a42:	9fc1      	lw	a2,4(a3)
48694a44:	6bdd      	li	v1,221
48694a46:	bfc1      	lwu	a2,4(a3)
	...
Disassembly of section BANK_UI_1_27:

486d4400 <keytone_init_set>:
486d4400:	64f4      	save	32,ra,s0-s1
 * \note
 */
/*******************************************************************************/
void keytone_init_set(void)
{
486d4402:	b10b      	lw	s1,486d442c <keytone_init_set+0x2c>
    //CHAN 0 -- URAM0 = 2KB
    //CHAN 1 -- PCMRAM2 = 4KB
    enable_dac(DAFIS_ASRC, g_keytone_infor.dac_chan);
486d4404:	b00b      	lw	s0,486d4430 <keytone_init_set+0x30>
486d4406:	a1a1      	lbu	a1,1(s1)
486d4408:	6c02      	li	a0,2
486d440a:	6e00      	li	a2,0
486d440c:	e840      	jalr	s0
486d440e:	6f04      	li	a3,4
486d4410:	6c13      	li	a0,19
//    config_asrc((g_keytone_infor.dac_chan == DAF0_EN)? K_OUT0_U0 : K_OUT1_P2, g_keytone_infor.dac_chan);
    config_asrc(K_OUT1_P2, 2);
486d4412:	6d02      	li	a1,2
486d4414:	6e00      	li	a2,0
486d4416:	e840      	jalr	s0
486d4418:	6f0f      	li	a3,15
486d441a:	a182      	lbu	a0,2(s1)
    set_asrc_rate(g_keytone_infor.dac_sample, g_keytone_infor.dac_chan, 5000);
486d441c:	a1a1      	lbu	a1,1(s1)
486d441e:	f382 6e08 	li	a2,5000
486d4422:	e840      	jalr	s0
486d4424:	6f11      	li	a3,17
486d4426:	6474      	restore	32,ra,s0-s1
486d4428:	e8a0      	jrc	ra
486d442a:	0000      	addiu	s0,sp,0
486d442c:	a1dc      	lbu	a2,28(s1)
486d442e:	9fc1      	lw	a2,4(a3)
486d4430:	6409      	restore	72
486d4432:	bfc1      	lwu	a2,4(a3)

486d4434 <keytone_send_to_asrc>:
486d4434:	f004 64b2 	save	a0,16,s0-s1
}

void keytone_send_to_asrc(kt_play_info_t *p_kt_play_info)
{
486d4438:	ac24      	lhu	s1,8(a0)
    uint32 data_count = p_kt_play_info->kt_frame_size;
486d443a:	6a00      	li	v0,0
    //temp use
    long long shift_use;
    //position to buffer
    uint32 buf_ptr = 0;
486d443c:	d200      	sw	v0,0(sp)
486d443e:	2151      	beqz	s1,486d44e2 <keytone_send_to_asrc+0xae>
    int16 chanel_data;
    uint32 check_ret;

    while (data_count > 0)
    {
        if (g_keytone_infor.dac_chan == DAF0_EN)
        {
            check_ret = act_readl(ASRC_OUT0_NUM);
        }
        else
        {
            check_ret = act_readl(ASRC_OUT1_NUM);
        }

        if (check_ret != 0)
        {
            chanel_data = *(int16 *) &g_bitstream_buffer[buf_ptr];
            shift_use = (long long) chanel_data * p_kt_play_info->kt_compact;
#pragma __PRQA_IGNORE_START__
            shift_use >>= 10;
#pragma __PRQA_IGNORE_END__
            shift_use <<= 16;
            if (shift_use > 0x7fffffff)
            {
                shift_use = 0x7fffffff;
            }
            if (shift_use < -0x7fffffff)
            {
                shift_use = -0x7fffffff;
            }

            if (g_keytone_infor.dac_chan == DAF0_EN)
            {
                (*(volatile int32 *) ASRC_OUT0_WFIFO) = shift_use;
                (*(volatile int32 *) ASRC_OUT0_WFIFO) = shift_use;
            }
            else
            {
                (*(volatile int32 *) ASRC_OUT1_WFIFO) = shift_use;
                (*(volatile int32 *) ASRC_OUT1_WFIFO) = shift_use;
            }
              
            //position move
            buf_ptr += 2;
            //data count sub
            data_count -= 2;
        }
        else
        {
            p_kt_play_info->kt_fill_flag = TRUE;
486d4440:	b52a      	lw	a1,486d44e8 <keytone_send_to_asrc+0xb4>
486d4442:	a561      	lbu	v1,1(a1)
486d4444:	653b      	move	t9,v1
486d4446:	2b03      	bnez	v1,486d444e <keytone_send_to_asrc+0x1a>
486d4448:	b629      	lw	a2,486d44ec <keytone_send_to_asrc+0xb8>
486d444a:	9e40      	lw	v0,0(a2)
486d444c:	1002      	b	486d4452 <keytone_send_to_asrc+0x1e>
486d444e:	b029      	lw	s0,486d44f0 <keytone_send_to_asrc+0xbc>
486d4450:	9840      	lw	v0,0(s0)
486d4452:	2243      	beqz	v0,486d44da <keytone_send_to_asrc+0xa6>
486d4454:	9700      	lw	a3,0(sp)
486d4456:	b028      	lw	s0,486d44f4 <keytone_send_to_asrc+0xc0>
486d4458:	9604      	lw	a2,16(sp)
486d445a:	e715      	addu	a1,a3,s0
486d445c:	8d40      	lh	v0,0(a1)
486d445e:	6b00      	li	v1,0
486d4460:	6782      	move	a0,v0
486d4462:	f7c0 3543 	sra	a1,v0,31
486d4466:	9e43      	lw	v0,12(a2)
486d4468:	ec59      	multu	a0,v0
486d446a:	ef10      	mfhi	a3
486d446c:	ee12      	mflo	a2
486d446e:	ec78      	mult	a0,v1
486d4470:	e812      	mflo	s0
486d4472:	eab8      	mult	v0,a1
486d4474:	e0f1      	addu	a0,s0,a3
486d4476:	eb12      	mflo	v1
486d4478:	30c2      	srl	s0,a2,8
486d447a:	e47d      	addu	a3,a0,v1
486d447c:	f580 35e0 	sll	a1,a3,22
486d4480:	340a      	srl	a0,s0,2
486d4482:	6705      	move	s0,a1
486d4484:	e88d      	or	s0,a0
486d4486:	32e3      	sra	v0,a3,8
486d4488:	334b      	sra	v1,v0,2
486d448a:	3602      	srl	a2,s0,8
486d448c:	34c2      	srl	a0,a2,8
486d448e:	3560      	sll	a1,v1,8
486d4490:	32a0      	sll	v0,a1,8
486d4492:	67a4      	move	a1,a0
486d4494:	ed4d      	or	a1,v0
486d4496:	3700      	sll	a3,s0,8
486d4498:	5501      	slti	a1,1
486d449a:	34e0      	sll	a0,a3,8
486d449c:	6004      	bteqz	486d44a6 <keytone_send_to_asrc+0x72>
486d449e:	2d06      	bnez	a1,486d44ac <keytone_send_to_asrc+0x78>
486d44a0:	b316      	lw	v1,486d44f8 <keytone_send_to_asrc+0xc4>
486d44a2:	eb83      	sltu	v1,a0
486d44a4:	6003      	bteqz	486d44ac <keytone_send_to_asrc+0x78>
486d44a6:	b417      	lw	a0,486d4500 <keytone_send_to_asrc+0xcc>
486d44a8:	b517      	lw	a1,486d4504 <keytone_send_to_asrc+0xd0>
486d44aa:	1003      	b	486d44b2 <keytone_send_to_asrc+0x7e>
486d44ac:	f7ff 551f 	slti	a1,-1
486d44b0:	6105      	btnez	486d44bc <keytone_send_to_asrc+0x88>
486d44b2:	eeaf      	not	a2,a1
486d44b4:	2e04      	bnez	a2,486d44be <keytone_send_to_asrc+0x8a>
486d44b6:	b215      	lw	v0,486d4508 <keytone_send_to_asrc+0xd4>
486d44b8:	ec43      	sltu	a0,v0
486d44ba:	6001      	bteqz	486d44be <keytone_send_to_asrc+0x8a>
486d44bc:	b415      	lw	a0,486d4510 <keytone_send_to_asrc+0xdc>
486d44be:	6719      	move	s0,t9
486d44c0:	2804      	bnez	s0,486d44ca <keytone_send_to_asrc+0x96>
486d44c2:	b516      	lw	a1,486d4518 <keytone_send_to_asrc+0xe4>
486d44c4:	dd80      	sw	a0,0(a1)
486d44c6:	dd80      	sw	a0,0(a1)
486d44c8:	1003      	b	486d44d0 <keytone_send_to_asrc+0x9c>
486d44ca:	b715      	lw	a3,486d451c <keytone_send_to_asrc+0xe8>
486d44cc:	df80      	sw	a0,0(a3)
486d44ce:	df80      	sw	a0,0(a3)
486d44d0:	9300      	lw	v1,0(sp)
486d44d2:	412e      	addiu	s1,s1,-2
486d44d4:	4382      	addiu	a0,v1,2
486d44d6:	d400      	sw	a0,0(sp)
486d44d8:	17b2      	b	486d443e <keytone_send_to_asrc+0xa>
486d44da:	9604      	lw	a2,16(sp)
486d44dc:	6a01      	li	v0,1
486d44de:	c64a      	sb	v0,10(a2)
486d44e0:	17ae      	b	486d443e <keytone_send_to_asrc+0xa>
486d44e2:	6432      	restore	16,s0-s1
486d44e4:	e8a0      	jrc	ra
486d44e6:	0000      	addiu	s0,sp,0
486d44e8:	a1dc      	lbu	a2,28(s1)
486d44ea:	9fc1      	lw	a2,4(a3)
486d44ec:	003c      	addiu	s0,sp,240
486d44ee:	c016      	sb	s0,22(s0)
486d44f0:	006c      	addiu	s0,sp,432
486d44f2:	c016      	sb	s0,22(s0)
486d44f4:	47dc      	daddiu	a2,a3,-4
486d44f6:	486d      	addiu	s0,109
486d44f8:	ffff      	daddiu	a3,sp,124
486d44fa:	7fff      	sd	a3,248(a3)
486d44fc:	0000      	addiu	s0,sp,0
486d44fe:	0000      	addiu	s0,sp,0
486d4500:	ffff      	daddiu	a3,sp,124
486d4502:	7fff      	sd	a3,248(a3)
486d4504:	0000      	addiu	s0,sp,0
486d4506:	0000      	addiu	s0,sp,0
486d4508:	0001      	addiu	s0,sp,4
486d450a:	8000      	lb	s0,0(s0)
486d450c:	0000      	addiu	s0,sp,0
486d450e:	0000      	addiu	s0,sp,0
486d4510:	0001      	addiu	s0,sp,4
486d4512:	8000      	lb	s0,0(s0)
486d4514:	ffff      	daddiu	a3,sp,124
486d4516:	ffff      	daddiu	a3,sp,124
486d4518:	0044      	addiu	s0,sp,272
486d451a:	c016      	sb	s0,22(s0)
486d451c:	0074      	addiu	s0,sp,464
486d451e:	c016      	sb	s0,22(s0)

486d4520 <keytone_play_frame>:
486d4520:	64f5      	save	40,ra,s0-s1
        }
    }
}

/******************************************************************************/
/*!
 * \par  Description:
 * \int32 keytone_play_frame(void* null0, void* null1, void* null2)
 * \按键音播放
 * \param[in]    none
 * \param[out]   none
 * \return       bool the result
 * \retval           1 sucess
 * \retval           0 failed
 * \ingroup
 * \note
 */
/*******************************************************************************/
int32 keytone_play_frame(kt_play_info_t *p_kt_play_info)
{
486d4522:	6704      	move	s0,a0
486d4524:	a863      	lhu	v1,6(s0)
    //播放音频帧
    int32 play_ret;

    if (p_kt_play_info->kt_offset >= p_kt_play_info->kt_length)
486d4526:	ac82      	lhu	a0,4(a0)
486d4528:	6a01      	li	v0,1
    {
        return -1;
486d452a:	ec63      	sltu	a0,v1
486d452c:	ea4b      	neg	v0
486d452e:	6037      	bteqz	486d459e <.L24+0xe>
486d4530:	6c00      	li	a0,0
    }

    sys_os_sched_lock();
486d4532:	b31d      	lw	v1,486d45a4 <.L24+0x14>
486d4534:	67a4      	move	a1,a0
486d4536:	67c4      	move	a2,a0
486d4538:	eb40      	jalr	v1
486d453a:	6f33      	li	a3,51
486d453c:	a8c2      	lhu	a2,4(s0)

    //播放音频帧
    if (sys_sd_fseek(p_kt_play_info->kt_handle, 0, p_kt_play_info->kt_offset) == -1)
486d453e:	9880      	lw	a0,0(s0)
486d4540:	b319      	lw	v1,486d45a4 <.L24+0x14>
486d4542:	6d00      	li	a1,0
486d4544:	eb40      	jalr	v1
486d4546:	6f0f      	li	a3,15
486d4548:	6f01      	li	a3,1
    {
        play_ret = -1;
486d454a:	eeeb      	neg	a2,a3
486d454c:	ed4f      	not	a1,v0
486d454e:	d604      	sw	a2,16(sp)
486d4550:	251f      	beqz	a1,486d4590 <.L24>
486d4552:	b116      	lw	s1,486d45a8 <.L24+0x18>
        goto file_seek_fail;
    }
    //read frame data
    play_ret = sys_sd_fread(p_kt_play_info->kt_handle, g_bitstream_buffer, p_kt_play_info->kt_frame_size);
486d4554:	9880      	lw	a0,0(s0)
486d4556:	a8c4      	lhu	a2,8(s0)
486d4558:	b313      	lw	v1,486d45a4 <.L24+0x14>
486d455a:	67b1      	move	a1,s1
486d455c:	eb40      	jalr	v1
486d455e:	6f11      	li	a3,17
486d4560:	d204      	sw	v0,16(sp)
486d4562:	ea4f      	not	v0

    if (play_ret != -1)
486d4564:	2215      	beqz	v0,486d4590 <.L24>
486d4566:	a842      	lhu	v0,4(s0)
    {
        if (p_kt_play_info->kt_offset == 0)
486d4568:	2a04      	bnez	v0,486d4572 <keytone_play_frame+0x52>
486d456a:	c140      	sb	v0,0(s1)
        {//前4字节为文件长度，清为0
            g_bitstream_buffer[0] = 0;
486d456c:	c141      	sb	v0,1(s1)
            g_bitstream_buffer[1] = 0;
486d456e:	c142      	sb	v0,2(s1)
            g_bitstream_buffer[2] = 0;
486d4570:	c143      	sb	v0,3(s1)
            g_bitstream_buffer[3] = 0;
486d4572:	a842      	lhu	v0,4(s0)
        }

        //change data offset
        p_kt_play_info->kt_offset += (uint16) play_ret;
486d4574:	9404      	lw	a0,16(sp)
486d4576:	a8a4      	lhu	a1,8(s0)

        //file size
        if ((uint16) play_ret < p_kt_play_info->kt_frame_size)
486d4578:	e45d      	addu	a3,a0,v0
486d457a:	679d      	move	a0,sp
486d457c:	acc8      	lhu	a2,16(a0)
486d457e:	c8e2      	sh	a3,4(s0)
486d4580:	ee31      	zeh	a2
486d4582:	eea3      	sltu	a2,a1
486d4584:	6002      	bteqz	486d458a <keytone_play_frame+0x6a>
486d4586:	ac68      	lhu	v1,16(a0)
        {
            p_kt_play_info->kt_frame_size = (uint16) play_ret;
486d4588:	c864      	sh	v1,8(s0)
486d458a:	1b70 510d 	jal	486d4434 <keytone_send_to_asrc>
        }

        //send data to asrc
        keytone_send_to_asrc(p_kt_play_info);
486d458e:	6790      	move	a0,s0

486d4590 <.L24>:
486d4590:	6c00      	li	a0,0
    }

    file_seek_fail:
    sys_os_sched_unlock();
486d4592:	b205      	lw	v0,486d45a4 <.L24+0x14>
486d4594:	67a4      	move	a1,a0
486d4596:	67c4      	move	a2,a0
486d4598:	ea40      	jalr	v0
486d459a:	6f34      	li	a3,52
486d459c:	9204      	lw	v0,16(sp)

    return play_ret;
486d459e:	6475      	restore	40,ra,s0-s1
}
486d45a0:	e8a0      	jrc	ra
486d45a2:	0000      	addiu	s0,sp,0
486d45a4:	6401      	restore	8
486d45a6:	bfc1      	lwu	a2,4(a3)
486d45a8:	47dc      	daddiu	a2,a3,-4
486d45aa:	486d      	addiu	s0,109

486d45ac <keytone_play_loop>:
486d45ac:	64e5      	save	40,ra,s0

void keytone_play_loop(void *param)
{
486d45ae:	677d      	move	v1,sp
    kt_play_info_t kt_play_info;
    int32 play_ret;

    g_keytone_infor.playing = TRUE;

    kt_play_info.kt_compact = 0x0fec; //固定系数
    kt_play_info.kt_fill_flag = FALSE;
486d45b0:	b636      	lw	a2,486d4688 <.L30+0x16>
486d45b2:	6c00      	li	a0,0
486d45b4:	c39a      	sb	a0,26(v1)
486d45b6:	b036      	lw	s0,486d468c <.L30+0x1a>
    sys_os_sched_lock();
486d45b8:	6c00      	li	a0,0
486d45ba:	6f01      	li	a3,1
486d45bc:	f7e1 6d0c 	li	a1,4076
486d45c0:	c6e4      	sb	a3,4(a2)
486d45c2:	d507      	sw	a1,28(sp)
486d45c4:	67c4      	move	a2,a0
486d45c6:	67a4      	move	a1,a0
486d45c8:	e840      	jalr	s0
486d45ca:	6f33      	li	a3,51
486d45cc:	6d00      	li	a1,0
    kt_play_info.kt_handle = sys_sd_fopen(g_keytone_file);
486d45ce:	b431      	lw	a0,486d4690 <.L30+0x1e>
486d45d0:	67c5      	move	a2,a1
486d45d2:	e840      	jalr	s0
486d45d4:	6f0d      	li	a3,13
486d45d6:	6c00      	li	a0,0
    sys_os_sched_unlock();
486d45d8:	d204      	sw	v0,16(sp)
486d45da:	67a4      	move	a1,a0
486d45dc:	67c4      	move	a2,a0
486d45de:	e840      	jalr	s0
486d45e0:	6f34      	li	a3,52
486d45e2:	9204      	lw	v0,16(sp)
    if (kt_play_info.kt_handle == NULL)
486d45e4:	2246      	beqz	v0,486d4672 <.L30>
486d45e6:	1b70 5100 	jal	486d4400 <keytone_init_set>
    {
        //open fail
        goto fail_open;
    }

    //set hardware
    keytone_init_set();
486d45ea:	6500      	nop
486d45ec:	677d      	move	v1,sp

    kt_play_info.kt_frame_size = KEYTONE_FRAME_SIZE;
486d45ee:	f200 6c00 	li	a0,512
486d45f2:	cb8c      	sh	a0,24(v1)
486d45f4:	6d00      	li	a1,0
    sys_sd_fseek(kt_play_info.kt_handle, 0, 0);
486d45f6:	9404      	lw	a0,16(sp)
486d45f8:	67c5      	move	a2,a1
486d45fa:	e840      	jalr	s0
486d45fc:	6f0f      	li	a3,15
486d45fe:	9404      	lw	a0,16(sp)
    sys_sd_fread(kt_play_info.kt_handle, &(kt_play_info.kt_length), 2);
486d4600:	f000 0516 	addiu	a1,sp,22
486d4604:	6e02      	li	a2,2
486d4606:	e840      	jalr	s0
486d4608:	6f11      	li	a3,17
486d460a:	6a00      	li	v0,0
    kt_play_info.kt_offset = 0;
486d460c:	671d      	move	s0,sp
486d460e:	c84a      	sh	v0,20(s0)
486d4610:	1b70 5148 	jal	486d4520 <keytone_play_frame>

    while (1)
    {
        play_ret = keytone_play_frame(&kt_play_info);
486d4614:	0404      	addiu	a0,sp,16
486d4616:	ed4f      	not	a1,v0
        if (play_ret == -1)
486d4618:	250d      	beqz	a1,486d4634 <keytone_play_loop+0x88>
486d461a:	677d      	move	v1,sp
        {
            break;
        }

        //ASRC OUT启动后才需要延时
        if (kt_play_info.kt_fill_flag == TRUE)
486d461c:	a3da      	lbu	a2,26(v1)
486d461e:	7601      	cmpi	a2,1
486d4620:	61f7      	btnez	486d4610 <keytone_play_loop+0x64>
486d4622:	6f00      	li	a3,0
        {
            kt_play_info.kt_fill_flag = FALSE;
486d4624:	6d00      	li	a1,0
            sys_os_time_dly(2);
486d4626:	b01a      	lw	s0,486d468c <.L30+0x1a>
486d4628:	c3fa      	sb	a3,26(v1)
486d462a:	6c02      	li	a0,2
486d462c:	67c5      	move	a2,a1
486d462e:	e840      	jalr	s0
486d4630:	6f31      	li	a3,49
486d4632:	17ee      	b	486d4610 <keytone_play_loop+0x64>
486d4634:	b215      	lw	v0,486d4688 <.L30+0x16>
486d4636:	b618      	lw	a2,486d4694 <.L30+0x22>
486d4638:	a261      	lbu	v1,1(v0)
486d463a:	b418      	lw	a0,486d4698 <.L30+0x26>
486d463c:	6d08      	li	a1,8
486d463e:	2b04      	bnez	v1,486d4648 <keytone_play_loop+0x9c>
        }
    }
    //等待按键音播放结束
    while (1)
    {
        if (g_keytone_infor.dac_chan == DAF0_EN)
486d4640:	9e60      	lw	v1,0(a2)
        {
            if ((act_readl(ASRC_OUT0_IP) & (1 << ASRC_OUT0_IP_PCMFIFOEmpty)) != 0)
486d4642:	ebac      	and	v1,a1
486d4644:	23fd      	beqz	v1,486d4640 <keytone_play_loop+0x94>
486d4646:	1003      	b	486d464e <keytone_play_loop+0xa2>
            {
                break;
486d4648:	9c00      	lw	s0,0(a0)
            }
        }
        else
        {
            if ((act_readl(ASRC_OUT1_IP) & (1 << ASRC_OUT1_IP_PCMFIFOEmpty)) != 0)
486d464a:	e8ac      	and	s0,a1
486d464c:	20f8      	beqz	s0,486d463e <keytone_play_loop+0x92>
486d464e:	6d00      	li	a1,0
            {
                break;
            }
        }

    //    sys_os_time_dly(1);
    }
    
    close_asrc(K_OUT1_P2);
486d4650:	b013      	lw	s0,486d469c <.L30+0x2a>
486d4652:	67c5      	move	a2,a1
486d4654:	6c13      	li	a0,19
486d4656:	e840      	jalr	s0
486d4658:	6f10      	li	a3,16
486d465a:	b50c      	lw	a1,486d4688 <.L30+0x16>

    //disable dac channel zero
    disable_dac(g_keytone_infor.dac_chan);
486d465c:	6f05      	li	a3,5
486d465e:	a581      	lbu	a0,1(a1)
486d4660:	6d00      	li	a1,0
486d4662:	e840      	jalr	s0
486d4664:	67c5      	move	a2,a1
486d4666:	6d00      	li	a1,0
    //close source file
    sys_sd_fclose(kt_play_info.kt_handle);
486d4668:	9404      	lw	a0,16(sp)
486d466a:	b209      	lw	v0,486d468c <.L30+0x1a>
486d466c:	67c5      	move	a2,a1
486d466e:	ea40      	jalr	v0
486d4670:	6f0e      	li	a3,14

486d4672 <.L30>:
486d4672:	b406      	lw	a0,486d4688 <.L30+0x16>

    fail_open:

    g_keytone_infor.playing = FALSE;
486d4674:	6e00      	li	a2,0
486d4676:	c4c4      	sb	a2,4(a0)
486d4678:	b20a      	lw	v0,486d46a0 <.L30+0x2e>

    libc_pthread_exit();
486d467a:	6c00      	li	a0,0
486d467c:	67a4      	move	a1,a0
486d467e:	67c4      	move	a2,a0
486d4680:	ea40      	jalr	v0
486d4682:	6f0c      	li	a3,12
486d4684:	6465      	restore	40,ra,s0
486d4686:	e8a0      	jrc	ra
486d4688:	a1dc      	lbu	a2,28(s1)
486d468a:	9fc1      	lw	a2,4(a3)
486d468c:	6401      	restore	8
486d468e:	bfc1      	lwu	a2,4(a3)
486d4690:	47d0      	daddiu	a2,a3,0
486d4692:	486d      	addiu	s0,109
486d4694:	0050      	addiu	s0,sp,320
486d4696:	c016      	sb	s0,22(s0)
486d4698:	0080      	addiu	s0,sp,512
486d469a:	c016      	sb	s0,22(s0)
486d469c:	6409      	restore	72
486d469e:	bfc1      	lwu	a2,4(a3)
486d46a0:	6405      	restore	40
486d46a2:	bfc1      	lwu	a2,4(a3)

486d46a4 <keytone_play_thread>:
486d46a4:	64c5      	save	40,ra
}

void keytone_play_thread(uint8 kt_id)
{
486d46a6:	ec11      	zeb	a0
486d46a8:	b609      	lw	a2,486d46cc <keytone_play_thread+0x28>
    //打开按键音线程
    pthread_ext_param_t param;

    //初始化创建线程的参数
    param.pthread_param.start_rtn = (void *) keytone_play_loop;
486d46aa:	b50a      	lw	a1,486d46d0 <keytone_play_thread+0x2c>
    param.pthread_param.arg = (void *) (uint32) kt_id;
    param.pthread_param.ptos = (void *) KEYTONE_PLAY_STK_POS;/*实际使用0x190*/
486d46ac:	d405      	sw	a0,20(sp)
486d46ae:	677d      	move	v1,sp
    param.stk_size = KEYTONE_PLAY_STK_SIZE;
486d46b0:	f280 6c00 	li	a0,640
486d46b4:	b208      	lw	v0,486d46d4 <keytone_play_thread+0x30>

    libc_pthread_create(&param, KEYTONE_PLAY_PRIO, CREATE_NOT_MAIN_THREAD);
486d46b6:	d604      	sw	a2,16(sp)
486d46b8:	d506      	sw	a1,24(sp)
486d46ba:	cb8e      	sh	a0,28(v1)
486d46bc:	6d04      	li	a1,4
486d46be:	0404      	addiu	a0,sp,16
486d46c0:	6eff      	li	a2,255
486d46c2:	ea40      	jalr	v0
486d46c4:	6f4a      	li	a3,74
486d46c6:	6445      	restore	40,ra
486d46c8:	e8a0      	jrc	ra
486d46ca:	0000      	addiu	s0,sp,0
486d46cc:	45ad      	addiu	a1,a1,-3
486d46ce:	486d      	addiu	s0,109
486d46d0:	cd00      	sh	s0,0(a1)
486d46d2:	9fc1      	lw	a2,4(a3)
486d46d4:	6401      	restore	8
486d46d6:	bfc1      	lwu	a2,4(a3)

486d46d8 <keytone_set_dac_chan>:
486d46d8:	64e3      	save	24,ra,s0
}

void keytone_set_dac_chan(dac_chenel_e dac_chan)
{
486d46da:	b30c      	lw	v1,486d4708 <keytone_set_dac_chan+0x30>
    if (dac_chan == g_keytone_infor.dac_chan)
486d46dc:	6704      	move	s0,a0
486d46de:	a341      	lbu	v0,1(v1)
486d46e0:	e811      	zeb	s0
486d46e2:	ea0e      	xor	v0,s0
486d46e4:	220e      	beqz	v0,486d4702 <keytone_set_dac_chan+0x2a>
486d46e6:	a344      	lbu	v0,4(v1)
    {
        return;
    }

    //等待按键音结束后才能切换dac通道
    while (g_keytone_infor.playing == TRUE)
    {
        sys_os_time_dly(1);
486d46e8:	7201      	cmpi	v0,1
486d46ea:	6109      	btnez	486d46fe <keytone_set_dac_chan+0x26>
486d46ec:	6d00      	li	a1,0
486d46ee:	b208      	lw	v0,486d470c <keytone_set_dac_chan+0x34>
486d46f0:	6c01      	li	a0,1
486d46f2:	67c5      	move	a2,a1
486d46f4:	ea40      	jalr	v0
486d46f6:	6f31      	li	a3,49
486d46f8:	b304      	lw	v1,486d4708 <keytone_set_dac_chan+0x30>
486d46fa:	a344      	lbu	v0,4(v1)
486d46fc:	17f5      	b	486d46e8 <keytone_set_dac_chan+0x10>
486d46fe:	b403      	lw	a0,486d4708 <keytone_set_dac_chan+0x30>
    }

    g_keytone_infor.dac_chan = dac_chan;
486d4700:	c401      	sb	s0,1(a0)
486d4702:	6463      	restore	24,ra,s0
}
486d4704:	e8a0      	jrc	ra
486d4706:	0000      	addiu	s0,sp,0
486d4708:	a1dc      	lbu	a2,28(s1)
486d470a:	9fc1      	lw	a2,4(a3)
486d470c:	6401      	restore	8
486d470e:	bfc1      	lwu	a2,4(a3)

486d4710 <keytone_set_dac_sample>:
486d4710:	b202      	lw	v0,486d4718 <keytone_set_dac_sample+0x8>


void keytone_set_dac_sample(uint8 dac_sample)
{
    g_keytone_infor.dac_sample = dac_sample;
486d4712:	e820      	jr	ra
486d4714:	c282      	sb	a0,2(v0)
486d4716:	0000      	addiu	s0,sp,0
486d4718:	a1dc      	lbu	a2,28(s1)
486d471a:	9fc1      	lw	a2,4(a3)

486d471c <keytone_fifo_out>:
486d471c:	b50b      	lw	a1,486d4748 <keytone_fifo_out+0x2c>
}


void keytone_play_deal(void)
{
    uint8 kt_id;

    if (g_keytone_infor.playing == TRUE)
    {
        return;
    }

    kt_id = keytone_fifo_out();
    if (kt_id == 0xff)
    {
//        PRINT_WARNING("kt fifo out err!!");
        return;
    }

    keytone_play_thread(kt_id);

}


bool keytone_play(uint8 kt_id, uint8 mode)
{
    keytone_fifo_in(kt_id);
    keytone_play_deal();
    return TRUE;
}

void com_start_key_tone(uint8 mode)
{
    //按键音使能，才发出按键音
    if (sys_comval->key_tone == TRUE)
    {
        keytone_play(KEYTONE_KEYTONE, mode);
    }
}

uint8 keytone_fifo_out(void)
{
    uint8 kt_id, i;

    if (g_keytone_infor.count == 0)
486d471e:	6bff      	li	v1,255
    {
        return -1;
486d4720:	a540      	lbu	v0,0(a1)
486d4722:	2210      	beqz	v0,486d4744 <keytone_fifo_out+0x28>
486d4724:	424f      	addiu	v0,v0,-1
    }

    kt_id = g_keytone_infor.kt_fifo[0];
    g_keytone_infor.count--;
486d4726:	c540      	sb	v0,0(a1)
486d4728:	ea11      	zeb	v0

    for (i = 0; i < g_keytone_infor.count; i++)
486d472a:	a5e5      	lbu	a3,5(a1)
486d472c:	6c00      	li	a0,0
486d472e:	2209      	beqz	v0,486d4742 <keytone_fifo_out+0x26>
486d4730:	67c2      	move	a2,v0
486d4732:	e4ad      	addu	v1,a0,a1
    {
        g_keytone_infor.kt_fifo[i] = g_keytone_infor.kt_fifo[i + 1];
486d4734:	a346      	lbu	v0,6(v1)
486d4736:	c345      	sb	v0,5(v1)
486d4738:	4441      	addiu	v0,a0,1
486d473a:	6782      	move	a0,v0
486d473c:	ec11      	zeb	a0
486d473e:	ecc3      	sltu	a0,a2
486d4740:	61f8      	btnez	486d4732 <keytone_fifo_out+0x16>
486d4742:	6767      	move	v1,a3
    }

    return kt_id;
486d4744:	e820      	jr	ra
}
486d4746:	6743      	move	v0,v1
486d4748:	a1dc      	lbu	a2,28(s1)
486d474a:	9fc1      	lw	a2,4(a3)

486d474c <keytone_play_deal>:
486d474c:	64c3      	save	24,ra
486d474e:	b308      	lw	v1,486d476c <keytone_play_deal+0x20>
486d4750:	a344      	lbu	v0,4(v1)
486d4752:	7201      	cmpi	v0,1
486d4754:	6008      	bteqz	486d4766 <keytone_play_deal+0x1a>
486d4756:	1b70 51c7 	jal	486d471c <keytone_fifo_out>
486d475a:	6500      	nop
486d475c:	72ff      	cmpi	v0,255
486d475e:	6003      	bteqz	486d4766 <keytone_play_deal+0x1a>
486d4760:	1b70 51a9 	jal	486d46a4 <keytone_play_thread>
486d4764:	6782      	move	a0,v0
486d4766:	6443      	restore	24,ra
486d4768:	e8a0      	jrc	ra
486d476a:	0000      	addiu	s0,sp,0
486d476c:	a1dc      	lbu	a2,28(s1)
486d476e:	9fc1      	lw	a2,4(a3)

486d4770 <keytone_fifo_in>:
486d4770:	b308      	lw	v1,486d4790 <keytone_fifo_in+0x20>

bool keytone_fifo_in(uint8 kt_id)
{
    if (g_keytone_infor.count >= KEYTONE_FIFO_DEPTH)
486d4772:	ec11      	zeb	a0
486d4774:	a3c0      	lbu	a2,0(v1)
486d4776:	6d00      	li	a1,0
    {
//        PRINT_WARNING("kt fifo in full!");
        return FALSE;
486d4778:	6746      	move	v0,a2
486d477a:	ea11      	zeb	v0
486d477c:	5a04      	sltiu	v0,4
486d477e:	6005      	bteqz	486d478a <keytone_fifo_in+0x1a>
486d4780:	e27d      	addu	a3,v0,v1
    }

    g_keytone_infor.kt_fifo[g_keytone_infor.count] = kt_id;
486d4782:	4641      	addiu	v0,a2,1
    g_keytone_infor.count++;
486d4784:	c785      	sb	a0,5(a3)
486d4786:	c340      	sb	v0,0(v1)
486d4788:	45a1      	addiu	a1,a1,1

    return TRUE;
486d478a:	e820      	jr	ra
}
486d478c:	6745      	move	v0,a1
486d478e:	0000      	addiu	s0,sp,0
486d4790:	a1dc      	lbu	a2,28(s1)
486d4792:	9fc1      	lw	a2,4(a3)

486d4794 <keytone_play>:
486d4794:	64c3      	save	24,ra
486d4796:	1b70 51dc 	jal	486d4770 <keytone_fifo_in>
486d479a:	ec11      	zeb	a0
486d479c:	b203      	lw	v0,486d47a8 <keytone_play+0x14>
486d479e:	eac0      	jalrc	v0
486d47a0:	6a01      	li	v0,1
486d47a2:	6443      	restore	24,ra
486d47a4:	e8a0      	jrc	ra
486d47a6:	0000      	addiu	s0,sp,0
486d47a8:	474d      	addiu	v0,a3,-3
486d47aa:	486d      	addiu	s0,109

486d47ac <com_start_key_tone>:
486d47ac:	64c3      	save	24,ra
486d47ae:	67a4      	move	a1,a0
486d47b0:	b406      	lw	a0,486d47c8 <com_start_key_tone+0x1c>
486d47b2:	ed11      	zeb	a1
486d47b4:	9c60      	lw	v1,0(a0)
486d47b6:	a354      	lbu	v0,20(v1)
486d47b8:	7201      	cmpi	v0,1
486d47ba:	6103      	btnez	486d47c2 <com_start_key_tone+0x16>
486d47bc:	b204      	lw	v0,486d47cc <com_start_key_tone+0x20>
486d47be:	ea40      	jalr	v0
486d47c0:	6c00      	li	a0,0
486d47c2:	6443      	restore	24,ra
486d47c4:	e8a0      	jrc	ra
486d47c6:	0000      	addiu	s0,sp,0
486d47c8:	5418      	slti	a0,24
486d47ca:	9fc1      	lw	a2,4(a3)
486d47cc:	4795      	daddiu	a0,a3,5
486d47ce:	486d      	addiu	s0,109

486d47d0 <g_keytone_file>:
486d47d0:	656b 7479 6e6f 2e65 6370 006d               keytone.pcm.

486d47dc <g_bitstream_buffer>:
	...
